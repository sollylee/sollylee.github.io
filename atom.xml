<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LISILE&#39;s Notes</title>
  
  
  <link href="/sollylee.github.io/atom.xml" rel="self"/>
  
  <link href="https://sollylee.github.io/"/>
  <updated>2018-02-02T11:57:13.260Z</updated>
  <id>https://sollylee.github.io/</id>
  
  <author>
    <name>Solly Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript进阶(一)</title>
    <link href="https://sollylee.github.io/2018/02/02/JavaScript%E8%BF%9B%E9%98%B6-%E4%B8%80/"/>
    <id>https://sollylee.github.io/2018/02/02/JavaScript进阶-一/</id>
    <published>2018-02-02T10:50:49.000Z</published>
    <updated>2018-02-02T11:57:13.260Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript进阶学习总结（一）<br><a id="more"></a></p><h2 id="js基础语法补充"><a href="#js基础语法补充" class="headerlink" title="js基础语法补充"></a>js基础语法补充</h2><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>js中拥有:<br>算术操作符(+、-、 * , /、–、++等)，<br>比较操作符(&lt;、&gt;、&gt;=、&lt;=、==、!=)，<br>逻辑操作符(&amp;&amp;、||、！)。功能与C语言一致。</p><p>算术运算符<br>主要用来完成类似加减乘除，自增自减的工作，<br>在JS中，“+”不只代表加法，还可以连接两个字符串</p><p>比较操作符<br>主要用于两个操作数的比较，成立返回true，否则返回false</p><p>逻辑运算符<br>主要用于条件判断，成立返回true，否则返回false</p><p>操作符之间的优先级（高到低）:<br>算术操作符 → 比较操作符 → 逻辑操作符 → “=”赋值符号</p><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><pre><code>var 变量名=new Array();</code></pre><p>js的数组元素下标也是从0开始的,<br>元素成员也是  变量名[num]  来表示，<br>不过要注意的是：</p><pre><code>1.创建的新数组是空数组，没有值，如输出，则显示undefined。2.虽然创建数组时，指定了长度，但实际上数组都是变长的，也就是说即使指定了长度为8，仍然可以将元素存储在规定长度以外</code></pre><p>数组长度:</p><pre><code>myarray.length; //获得数组myarray的长度</code></pre><p>二维数组的定义有两种方式:</p><pre><code>1.var myarr=new Array();  //先声明一维 for(var i=0;i&lt;2;i++)    //一维长度为2{          myarr[i]=new Array();  //再声明二维        for(var j=0;j&lt;3;j++)   //二维长度为3      {              myarr[i][j]=i+j;   //赋值，每个数组元素的值为i+j   } }2. var myarr = [[0 , 1 , 2 ],[1 , 2 , 3]]  //myarr[2][3]</code></pre><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>js中有if语句、if-else语句、if-else嵌套语句<br>while语句、do-while语句（不用在最后加 ; ）<br>for语句、switch语句、continue、break语句。</p><p>它们的功能语法与C语言的一致。</p><h4 id="if-else嵌套"><a href="#if-else嵌套" class="headerlink" title="if-else嵌套:"></a>if-else嵌套:</h4><pre><code>if(条件1){ 条件1成立时执行的代码}else  if(条件2){ 条件2成立时执行的代码}...else  if(条件n){ 条件n成立时执行的代码}else{ 条件1、2至n不成立时执行的代码}</code></pre><h5 id="while循环语句："><a href="#while循环语句：" class="headerlink" title="while循环语句："></a>while循环语句：</h5><pre><code>while(判断条件){    循环语句}</code></pre><h5 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句:"></a>switch语句:</h5><pre><code>switch(表达式){case值1:  执行代码块 1  break;case值2:  执行代码块 2  break;...case值n:  执行代码块 n  break;default:  与 case值1、...case值n 不同时执行的代码}</code></pre><h4 id="for循环语句："><a href="#for循环语句：" class="headerlink" title="for循环语句："></a>for循环语句：</h4><pre><code>for(初始化变量;循环条件;循环迭代){         循环语句  }</code></pre><h4 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do-while语句"></a>do-while语句</h4><pre><code>do{    循环语句}while(判断条件)</code></pre><h2 id="事件响应"><a href="#事件响应" class="headerlink" title="事件响应"></a>事件响应</h2><p>在网页中，如使用事件，就在该元素中设置事件属性。<br>eg:</p><pre><code>&lt; input  .... 事件=&quot;函数名()&quot; /&gt;</code></pre><h3 id="鼠标单击事件-onclick"><a href="#鼠标单击事件-onclick" class="headerlink" title="鼠标单击事件(onclick)"></a>鼠标单击事件(onclick)</h3><p>onclick是鼠标单击事件，当在网页上单击鼠标时，<br>就会发生该事件。同时onclick事件调用的程序块就会被执行，<br>通常与按钮一起使用。</p><h3 id="鼠标经过事件（onmouseover）"><a href="#鼠标经过事件（onmouseover）" class="headerlink" title="鼠标经过事件（onmouseover）"></a>鼠标经过事件（onmouseover）</h3><p>鼠标经过事件，当鼠标移到一个对象上时，<br>该对象就触发onmouseover事件，并执行onmouseover事件调用的程序</p><h3 id="鼠标移开事件（onmouseout）"><a href="#鼠标移开事件（onmouseout）" class="headerlink" title="鼠标移开事件（onmouseout）"></a>鼠标移开事件（onmouseout）</h3><p>鼠标移开事件，当鼠标移开当前对象时，执行onmouseout调用的程序</p><h3 id="光标聚焦事件（onfocus）"><a href="#光标聚焦事件（onfocus）" class="headerlink" title="光标聚焦事件（onfocus）"></a>光标聚焦事件（onfocus）</h3><p>当网页中的对象获得聚点时，执行onfocus调用的程序就会被执行</p><h3 id="失焦事件（onblur）"><a href="#失焦事件（onblur）" class="headerlink" title="失焦事件（onblur）"></a>失焦事件（onblur）</h3><p>onblur事件与onfocus是相对事件，<br>当光标离开当前获得聚焦对象的时候，触发onblur事件，<br>同时执行被调用的程序。</p><h3 id="内容选中事件（onselect）"><a href="#内容选中事件（onselect）" class="headerlink" title="内容选中事件（onselect）"></a>内容选中事件（onselect）</h3><p>选中事件，当文本框或者文本域中的文字被选中时，<br>触发onselect事件，同时调用的程序就会被执行。</p><h3 id="文本框内容改变事件（onchange）"><a href="#文本框内容改变事件（onchange）" class="headerlink" title="文本框内容改变事件（onchange）"></a>文本框内容改变事件（onchange）</h3><p>通过改变文本框的内容来触发onchange事件，同时执行被调用的程序</p><h3 id="加载事件（onload）"><a href="#加载事件（onload）" class="headerlink" title="加载事件（onload）"></a>加载事件（onload）</h3><p>事件会在页面加载完成后，立即发生，同时执行被调用的程序。<br>注意：1. 加载页面时，触发onload事件，事件写在&lt; body &gt;标签内</p><h3 id="卸载事件（onunload）"><a href="#卸载事件（onunload）" class="headerlink" title="卸载事件（onunload）"></a>卸载事件（onunload）</h3><p>当用户退出页面时（页面关闭、页面刷新等），<br>触发onUnload事件，同时执行被调用的程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript进阶学习总结（一）&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript入门</title>
    <link href="https://sollylee.github.io/2018/02/01/JavaScript%E5%85%A5%E9%97%A8/"/>
    <id>https://sollylee.github.io/2018/02/01/JavaScript入门/</id>
    <published>2018-02-01T09:10:28.000Z</published>
    <updated>2018-02-02T11:57:49.743Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript入门(基础学习总结)<br><a id="more"></a></p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><p>一行的结束就被认定为语句的结束，通常在结尾加上一个分号”;”来表示语句的结束。</p><p>javascript作为一种脚本语言可以放在html页面中任何位置。<br>但浏览器解释html时是按先后顺序的，所以前面的script就先被执行。<br>比如进行页面显示初始化的js必须放在head里面,<br>因为初始化都要求提前进行(如给页面body设置css等);<br>而如果是通过事件调用执行的function那么对位置没什么要求的。</p><h3 id="js文件引用"><a href="#js文件引用" class="headerlink" title="js文件引用"></a>js文件引用</h3><pre><code>&lt;script src=&quot;文件名&quot;&gt;&lt;/script&gt;</code></pre><h3 id="js注释"><a href="#js注释" class="headerlink" title="js注释"></a>js注释</h3><pre><code>//   注释一行/**/ 注释多行</code></pre><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><pre><code>var  变量名;</code></pre><p>注意:</p><pre><code>1. 变量名必须以下划线&apos;_&apos;、英文字母或美元符号&apos;$&apos;开始.2. 变量名可以使用任意多个英文字母，数字，下划线，或者美元符号组成3. 变量名不能使用JavaScript关键词和JavaScript保留字</code></pre><p>可以给变量赋值数字，字母，字符串，true或false.</p><p>附：</p><p>javascript保留字：</p><pre><code>abstract、enum、int、short、boolean、export、interface、static、byte、extends、long、super、char、final、native、synchronized、class、float、package、throws、const、goto、private、tranisientdebugger、implements、protected、volatile、double、import、public</code></pre><p>javascript关键字：</p><pre><code>break、else、new、var、case、finally、return、void、catch、for、switch、while、default、if、throw、delete、in、try、do、instanceof、typeof</code></pre><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><pre><code>function 函数名(形参){    函数代码;    return  返回值;}</code></pre><p>形参和返回语句可有可无，<br>返回值可以是数字，字母，字符串，ture/false<br>返回值可以用变量取接。</p><p>调用函数： 函数名(参数);</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><pre><code>if(条件){ 条件成立时执行的代码 }else{ 条件不成立时执行的代码 }</code></pre><h3 id="输出内容-document-write"><a href="#输出内容-document-write" class="headerlink" title="输出内容(document.write())"></a>输出内容(document.write())</h3><p>第一种:输出内容用””括起，直接输出””号内的内容。</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  document.write(&quot;I love JavaScript！&quot;); //内容用&quot;&quot;括起来，&quot;&quot;里的内容直接输出。&lt;/script&gt;</code></pre><p>第二种:通过变量，输出内容</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  var mystr=&quot;hello world!&quot;;  document.write(mystr);  //直接写变量名，输出变量存储的内容。&lt;/script&gt;</code></pre><p>第三种:输出多项内容，内容之间用+号连接。</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  var mystr=&quot;hello&quot;;  document.write(mystr+&quot;I love JavaScript&quot;);   //多项内容之间用+号连接&lt;/script&gt;</code></pre><p>第四种:输出HTML标签，并起作用，标签使用””括起来。</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  var mystr=&quot;hello&quot;;document.write(mystr+&quot;&lt;br&gt;&quot;);//输出hello后，输出一个换行符  document.write(&quot;JavaScript&quot;);&lt;/script&gt;</code></pre><p> 输出时，加上“white-space:pre”(空白会被浏览器保留)样式，<br> 可以输出空格。</p><h2 id="常用互动语法"><a href="#常用互动语法" class="headerlink" title="常用互动语法"></a>常用互动语法</h2><h3 id="js-警告"><a href="#js-警告" class="headerlink" title="js-警告"></a>js-警告</h3><pre><code>alert(字符串);</code></pre><p>alert 弹出消息对话框(包含一个确定按钮)。</p><h3 id="js-确定-confirm消息对话框"><a href="#js-确定-confirm消息对话框" class="headerlink" title="js-确定(confirm消息对话框)"></a>js-确定(confirm消息对话框)</h3><pre><code>confirm(str);</code></pre><p>str:在消息对话框中要显示的文本</p><p>返回值:<br>        按下“确定”，返回true<br>        按下“取消”，返回false</p><p>返回值用于判断语句。</p><h3 id="js-提问-prompt"><a href="#js-提问-prompt" class="headerlink" title="js-提问(prompt)"></a>js-提问(prompt)</h3><pre><code>prompt(str1,str2);</code></pre><p>str1:要显示在消息对话框中的文本，不可修改</p><p>str2:文本框的内容，可以修改</p><p>返回值：<br>        点击确定，文本框中的内容作为返回值<br>        点击取消，返回null</p><h3 id="js-打开新窗口-window-open"><a href="#js-打开新窗口-window-open" class="headerlink" title="js-打开新窗口(window.open)"></a>js-打开新窗口(window.open)</h3><pre><code>window.open([URl],[窗口名称],[参数字符串])</code></pre><p>URL：可选参数，在窗口中要显示网页的网址或路径。<br>如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。</p><p>窗口名称：可选参数，被打开窗口的名称。</p><p>注意：<br>    1.该名称由字母、数字和下划线字符组成。</p><pre><code>2.&quot;_top&quot;、&quot;_blank&quot;、&quot;_self&quot;具有特殊意义的名称。    _blank：在新窗口显示目标网页    _self：在当前窗口显示目标网页    _top：框架网页中在上部窗口中显示目标网页3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。4.name 不能包含有空格。</code></pre><p>参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。</p><pre><code>参数          值                     说明 top         Number        窗口顶部离屏幕顶部的像素数left         Number        窗口左侧离屏幕左侧的像素数width        Number               窗口的高度height       Number               窗口的宽度menubar      yes/no             窗口有没有菜单toolbar      yes/no             窗口有没有工具条scrollbars   yes/no             窗口有没有滚动条status       yes/no             窗口有没有状态栏</code></pre><h3 id="js-关闭窗口-window-close"><a href="#js-关闭窗口-window-close" class="headerlink" title="js-关闭窗口(window.close)"></a>js-关闭窗口(window.close)</h3><pre><code>window.close;//关闭本窗口</code></pre><p>或</p><pre><code>&lt;窗口对象&gt;.close();//关闭指定窗口</code></pre><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>文档对象模型DOM（Document Object Model）<br>定义访问和处理HTML文档的标准方法。<br>DOM 将HTML文档呈现为带有元素、属性和文本的树结构(节点树)</p><p>元素节点：&lt; html &gt; &lt; body &gt; &lt; p &gt; 等标签</p><p>文本节点：向用户展示的内容,如&lt; li &gt;间的文本</p><p>属性节点: 元素属性，如&lt; a &gt;标签的链接属性 herf=””</p><h3 id="获取id"><a href="#获取id" class="headerlink" title="获取id"></a>获取id</h3><pre><code>document.getElementById(&quot;id&quot;)</code></pre><p>以变量接取，var i=document.getElementById(“id”);</p><h3 id="innerHTML属性"><a href="#innerHTML属性" class="headerlink" title="innerHTML属性"></a>innerHTML属性</h3><p>innerHTML(区分大小写)属性用于获取或替换HTML元素的内容</p><pre><code>object.innerHTML//object为获取的对象，下同</code></pre><p>eg:</p><pre><code>&lt; p id=&quot;con&quot;&gt;xxxxxx&lt; /p &gt;var i=document.getElementById(&quot;con&quot;);i.innerHTML=&quot;hello world&quot; //修改p中的内容为&quot;hello world&quot;</code></pre><h3 id="改变HTML样式"><a href="#改变HTML样式" class="headerlink" title="改变HTML样式"></a>改变HTML样式</h3><pre><code>object.style.display=&quot;value&quot;;</code></pre><p>value:<br>    none   此元素不会被显示(隐藏)</p><pre><code>block  此元素将显示为块级元素(显示)</code></pre><h3 id="控制类名-className属性"><a href="#控制类名-className属性" class="headerlink" title="控制类名(className属性)"></a>控制类名(className属性)</h3><pre><code>object.className=classname;</code></pre><p>作用：<br>    1.获取元素的class属性<br>    2.为网页内的某个元素指定一个css样式来改变外观</p><h3 id="取消获取的样式"><a href="#取消获取的样式" class="headerlink" title="取消获取的样式"></a>取消获取的样式</h3><pre><code>1. object.removeAttribute(&quot;style&quot;);2. object.style=null;3.object.style=&quot;&quot;;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript入门(基础学习总结)&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>sublime使用技巧</title>
    <link href="https://sollylee.github.io/2018/01/28/sublime%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://sollylee.github.io/2018/01/28/sublime使用技巧/</id>
    <published>2018-01-28T01:42:37.000Z</published>
    <updated>2018-02-01T10:24:13.241Z</updated>
    
    <content type="html"><![CDATA[<p>前端工具sublime的使用技巧，从慕课中总结而来</p><a id="more"></a><h2 id="一些插件及与其相关的快捷键的使用："><a href="#一些插件及与其相关的快捷键的使用：" class="headerlink" title="一些插件及与其相关的快捷键的使用："></a>一些插件及与其相关的快捷键的使用：</h2><p>安装Packet：菜单栏View-&gt;Show Console-&gt;粘贴text2或text3的Packet配置信息-&gt;重启软件-&gt;Ct+N（新建文档）-&gt;Ct+Sh+P-&gt;输入pci-&gt;查找要安装的插件</p><h3 id="Emmet插件："><a href="#Emmet插件：" class="headerlink" title="Emmet插件："></a>Emmet插件：</h3><p>安装好Emmet插件后：</p><pre><code>！+Ct+E:迅速生成html的基础元素Ct+P:查找时加 #元素名；找到后，若要在该行下新加一行，可按 Ct+Enter上一行  Ct+Sh+Enterul&gt;.item$*10 ,再按Ct+E，则一次性生成10个&lt;li class=&quot;item(1/2/3/../10)&quot;&gt;&lt;/li&gt; 即 父元素&gt; .（表示有class标签或用 # 表示有id值）类名（id名）$*（子元素出现次数），再Ct+E在文本中写 h2{this is good} 再按Ct+E,则生成 &lt;h2&gt;this is good&lt;/h2&gt;Ct+ 键盘上含 } 的键：文本缩进Ct+Sh+V：粘贴时保持复制时的格式，如缩进等</code></pre><h3 id="insert-callback插件"><a href="#insert-callback插件" class="headerlink" title="insert callback插件"></a>insert callback插件</h3><pre><code>Alt+C：删除多于的符号</code></pre><h3 id="advanNew"><a href="#advanNew" class="headerlink" title="advanNew"></a>advanNew</h3><p>Ctrl+Shift+P打开命令模式，<br>输入”pci”（Package Control:Install Package），<br>在提示框输入”adva”，选”AdvancedNewFile”进行安装。</p><pre><code>安装完成后使用&quot;Ctrl+Alt+N&quot;</code></pre><p>选在屏幕下方出现的输入框中输入”test.html”，创建了一个html文件；</p><p>输入框中输入”public/css/test.css”，<br>则在public目录下的css中创建了一个test.css文件；</p><p>输入框中输入”public/css/sass/test.sass”，<br>则在public目录下的css中创建了一个sass文件夹<br>并在其中创建了一个test.sass文件。</p><h3 id="httpRequester"><a href="#httpRequester" class="headerlink" title="httpRequester"></a>httpRequester</h3><pre><code>Ctrl+Shift+P打开命令模式，输入&quot;pci&quot;（Package Control:Install Package），在提示框输入&quot;http&quot;，选&quot;Http Requester&quot;进行安装。</code></pre><p>安装完成后要使用注解的方式来标记函数需要测试的路由地址</p><p>在Sublime内部，做服务器响应的测试Get请求</p><pre><code>/* GET users listing. */// localhost:3000/users/router.get(&apos;/&apos;, function(req, res) {res.send(&apos;respond with a resource&apos;);});</code></pre><p>注释需要测试的路由地址”// localhost:3000/users/“（localhost为路由地址，3000为端口号）<br>选中”localhost:3000/users/“，<br>使用快捷键”Alt+Ctrl+R”，出现新的页面显示服务器的响应，<br>“200 OK”表示服务器响应正确。</p><p>get请求比较容易测试，可以在浏览器中输入地址；<br>post请求比较难以测试<br>以前测试post请求需要完成一个表单（用html语言写），<br>然后模拟提交，这样不利于开发</p><p>不需要前端form表单的情况下来模拟form提交，先完成post请求<br>在Sublime内部，做服务器响应的测试Post请求</p><pre><code>/* POST localhost:3000/users/Content-type: application/x-www-form-urlencodedPOST_BODY:variable1=avalue&amp;variable2=1234&amp;variable3=anothervalue*/router.post(&apos;/&apos;, function(req, res) {res.send(req.body);});（POST：访问地址是一个post请求，&quot;localhost:3000/users/&quot;是访问的地址，&quot;Content-type...anothervalue&quot;指定是以form表单形式提交）选中&quot;/* */&quot;内的注释，使用快捷键&quot;Alt+Ctrl+R&quot;，出现新的页面显示服务器的响应，&quot;200 OK&quot;表示服务器响应正确</code></pre><h3 id="netauke-Snip"><a href="#netauke-Snip" class="headerlink" title="netauke Snip"></a>netauke Snip</h3><h3 id="sidebar-enhancement"><a href="#sidebar-enhancement" class="headerlink" title="sidebar enhancement"></a>sidebar enhancement</h3><p>右击对应文档，有直接浏览该页的选项</p><h3 id="docblockr"><a href="#docblockr" class="headerlink" title="docblockr"></a>docblockr</h3><p>用于简化注释拼写</p><pre><code>/** +Tab键 ：可有函数的注释格式/** 或 /* + 回车键：其余注释符自动补充输入/*按回车，补充行注释。输入/**按回车，补充多行注释。在写好的函数上方输入/**按tab键，自动补充函数说明格式。Ctrl+/: 行注释;Ctrl+Shift+/: 块注释.</code></pre><h3 id="sublimelinter-jshlint"><a href="#sublimelinter-jshlint" class="headerlink" title="sublimelinter-jshlint"></a>sublimelinter-jshlint</h3><pre><code>用于语法、风格的检验安装jsnode插件 -&gt; 安装sublimelinter-jshlint插件 -&gt;运行cmd，输入 npm install -g jshint -&gt;最后到sulimt软件里检验补充9.html代码对齐插件html beautiful；安装后快捷键ctr + alt + shift + f</code></pre><h3 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h3><p>ctrl+shift+p —&gt;Install Package —&gt;<br>找到SideBarEnhancements<br>安装SideBarEnhancements</p><p>配置预览快捷键</p><p>Preferences —&gt; Key Bindings - User 将以下代码复制到数组中。</p><pre><code>// chrome{ &quot;keys&quot;: [&quot;f2&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,&quot;args&quot;: {&quot;paths&quot;: [],&quot;application&quot;: &quot;C:/Program Files (x86)/Google/Chrome/Application/chrome.exe&quot;,&quot;extensions&quot;:&quot;.*&quot;}},// firefox{ &quot;keys&quot;: [&quot;f3&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,&quot;args&quot;: {&quot;paths&quot;: [],&quot;application&quot;: &quot;D:/Program Files (x86)/Mozilla Firefox/firefox.exe&quot;,&quot;extensions&quot;:&quot;.*&quot;}},// ie{ &quot;keys&quot;: [&quot;f4&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,&quot;args&quot;: {&quot;paths&quot;: [],&quot;application&quot;: &quot;C:/Program Files/Internet Explorer/iexplore.exe&quot;,&quot;extensions&quot;:&quot;.*&quot;}}</code></pre><p>上面的代码中有两处需要注意的地方，<br>一个是keys表示快捷键，即f2可以启动chrome进行预览。<br>另一个是application，表示浏览器所在的安装路径，<br>只有路径配置正确，才能够正常调用浏览器</p><h3 id="nettus-fetch插件"><a href="#nettus-fetch插件" class="headerlink" title="nettus fetch插件"></a>nettus fetch插件</h3><pre><code>ctrl+shift+p---&gt;输入nettus fetch回车---&gt;ctrl_shift+p---&gt;输入fetch manage来管理配置文件</code></pre><p>使用fetch来下载jquery步骤：</p><pre><code>ctrl+alt+n在某个目录下创建一个jQuery文件---&gt;在该文件中输入ctrl+shift+p---&gt;输入fetch file回车---&gt;jquery回车下载。</code></pre><p>在fetch配置文件中来增加新的类库（如：underscore.js）：<br>步骤如下：</p><pre><code>在该文件中添加&quot;underscore&quot;:&quot;http://github.com/jashkenas/underscore/blob/master/underscore.min.js&quot;和前一个参数以&quot;逗号&quot;来分隔。ctrl+alt+n在某个目录下创建一个underscore文件---&gt;在该文件中输入ctrl+shift+p---&gt;输入fetch file回车---&gt;jquery回车下载。</code></pre><p>到github下载underscore.js文件<br>github上的underscore文件地址：</p><pre><code>https://raw.githubusercontent.com/jashkenas/underscore/master/underscore-min.js</code></pre><h2 id="快捷键的使用"><a href="#快捷键的使用" class="headerlink" title="快捷键的使用"></a>快捷键的使用</h2><p>1、Ctrl+H：查找替换<br>2、Ctrl+D：选择游标所在单词，连续Ctrl+D实现多行选择<br>（选择与第一次选择相同的单词）<br>3、Ctrl+K Ctrl+D：跳过当前选择，选择下一个<br>4、Ctrl+shift+D：复制游标所在行<br>5、Ctrl+F3：选择所以与游标所在单词相同的单词<br>6、全选：先Ctrl+A全选然后Ctrl+shift+L产生游标<br>7、按住shift，右键，拖动，产生多行游标<br>8、Ctrl+P 的作用是：搜索项目中的文件 go to anything<br>9、Ctrl+Shift+P 快捷键的作用是：打开命令模式<br>10、Ctrl+Shift+K 的快捷键是：删除整行<br>11、ctrl+shift+v 保持缩进粘贴<br>12、Ctrl+] 增加缩进 [ 减小缩进。<br>13、Alt+. 闭合标签<br>14、Alt+&gt; 闭合标签<br>15、Ctrl+? 注释一行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端工具sublime的使用技巧，从慕课中总结而来&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端工具" scheme="https://sollylee.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sollylee.github.io/2018/01/27/hello-world/"/>
    <id>https://sollylee.github.io/2018/01/27/hello-world/</id>
    <published>2018-01-27T11:56:45.915Z</published>
    <updated>2018-01-28T01:35:53.986Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
