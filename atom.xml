<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LISILE&#39;s Notes</title>
  
  
  <link href="/sollylee.github.io/atom.xml" rel="self"/>
  
  <link href="https://sollylee.github.io/"/>
  <updated>2018-02-09T07:48:54.753Z</updated>
  <id>https://sollylee.github.io/</id>
  
  <author>
    <name>Solly Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript进阶学习(四)</title>
    <link href="https://sollylee.github.io/2018/02/08/JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0-%E5%9B%9B/"/>
    <id>https://sollylee.github.io/2018/02/08/JavaScript进阶学习-四/</id>
    <published>2018-02-08T09:22:42.000Z</published>
    <updated>2018-02-09T07:48:54.753Z</updated>
    
    <content type="html"><![CDATA[<p>js进阶学习four<br><a id="more"></a></p><h2 id="DOM对象补充"><a href="#DOM对象补充" class="headerlink" title="DOM对象补充"></a>DOM对象补充</h2><p>###获取DOM对象方法</p><pre><code>    方法                 说明                     获得getElementByID        通过指定id获取元素         一个getElementsByName  通过元素名称name属性获取元素  一组getElementsByTagName  通过标签名获取元素         一组</code></pre><h3 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute()"></a>getAttribute()</h3><p>通过元素节点的属性名称获取属性的值。</p><pre><code>elementNode.getAttribute(name)</code></pre><p>说明:<br>1.elementNode：元素节点。下同。<br>2.name：要想查询的元素节点的属性名字 如: id,title</p><h3 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute()"></a>setAttribute()</h3><p>方法增加一个指定名称和值的新属性，<br>或者把一个现有的属性设定为指定的值。</p><p>   elementNode.setAttribute(name,value)</p><p>说明：<br>1.name: 要设置的属性名。<br>2.value: 要设置的属性值。</p><p>注意：<br>把指定的属性设置为指定的值<br>如果不存在具有指定名称的属性，该方法将创建一个新属性</p><h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><p>在文档对象模型 (DOM) 中，每个节点都是一个对象。</p><p>DOM 节点有三个重要的属性 ：</p><pre><code>nodeName   节点的名称 nodeValue  节点的值nodeType   节点的类型</code></pre><h4 id="nodeName"><a href="#nodeName" class="headerlink" title="nodeName"></a>nodeName</h4><p>节点的名称，是只读的。</p><pre><code>元素节点的 nodeName 与标签名相同属性节点的 nodeName 是属性的名称文本节点的 nodeName 永远是 #text文档节点的 nodeName 永远是 #document</code></pre><h4 id="nodeValue"><a href="#nodeValue" class="headerlink" title="nodeValue"></a>nodeValue</h4><p>节点的值</p><pre><code>元素节点的 nodeValue 是 undefined 或 null文本节点的 nodeValue 是文本自身属性节点的 nodeValue 是属性的值</code></pre><h4 id="nodeType"><a href="#nodeType" class="headerlink" title="nodeType"></a>nodeType</h4><p>节点的类型，是只读的。<br>以下常用的几种结点类型:</p><pre><code>元素类型    节点类型  元素          1  属性          2  文本          3  注释          8  文档          9</code></pre><h3 id="访问子节点childNodes"><a href="#访问子节点childNodes" class="headerlink" title="访问子节点childNodes"></a>访问子节点childNodes</h3><p>访问选定元素节点下的所有子节点的列表，<br>返回的值可以看作是一个数组，它具有length属性</p><pre><code>elementNode.childNodes</code></pre><p>注意：<br>1.如果选定的节点没有子节点，<br>  则该属性返回不包含节点的 NodeList<br>2.IE全系列、firefox、chrome、opera、safari兼容问题<br>3.节点之间的空白符，<br>  在firefox、chrome、opera、safari浏览器是文本节点</p><p>####firstChild<br>返回‘childNodes’数组的第一个子节点。<br>如果选定的节点没有子节点，则该属性返回 NULL。</p><pre><code>node.firstChild</code></pre><p>说明：<br>与elementNode.childNodes[0]是同样的效果。 </p><p>####lastChild<br>返回‘childNodes’数组的最后一个子节点。<br>如果选定的节点没有子节点，则该属性返回 NULL。</p><pre><code>node.lastChild</code></pre><p>说明：<br>elementNode.childNodes[elementNode.childNodes.length-1]<br>是同样的效果。</p><h3 id="访问父节点parentNode"><a href="#访问父节点parentNode" class="headerlink" title="访问父节点parentNode"></a>访问父节点parentNode</h3><p>获取指定节点的父节点</p><pre><code>elementNode.parentNode</code></pre><p>若想继续指向祖节点可以继续加上 .parenetNode<br>eg:    </p><pre><code>elementNode.parentNode.parentNode</code></pre><p>###访问兄弟节点</p><h4 id="nextSibling"><a href="#nextSibling" class="headerlink" title="nextSibling"></a>nextSibling</h4><p>可返回某个节点之后紧跟的节点（处于同一树层级中）</p><pre><code>nodeObject.nextSibling</code></pre><p>说明：如果无此节点，则该属性返回 null。</p><p>####previousSibling<br>可返回某个节点之前紧跟的节点（处于同一树层级中）</p><pre><code>nodeObject.previousSibling  </code></pre><p>说明：如果无此节点，则该属性返回 null。</p><p>注意: 两个属性获取的是节点。<br>Internet Explorer 会忽略节点间生成的空白文本节点(如换行符号)<br>而其它浏览器不会忽略。</p><p>可以通过判断该节点的nodeType是否为1，来知道是否为元素节点</p><h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild()"></a>appendChild()</h3><p>在指定节点的最后一个子节点列表之后添加一个新的子节点</p><pre><code>appendChild(newnode)</code></pre><p>说明：<br>newnode：指定追加的节点</p><h3 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore()"></a>insertBefore()</h3><p>在已有的子节点前插入一个新的子节点。</p><pre><code>insertBefore(newnode,node);</code></pre><p>说明：<br>newnode: 要插入的新节点<br>node: 指定此节点前插入节点</p><p>注意: otest.insertBefore(newnode,node);也可以改为:<br>      otest.insertBefore(newnode,otest.childNodes[0]);</p><h3 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild()"></a>removeChild()</h3><p>从子节点列表中删除某个节点<br>如删除成功，返回被删除的节点<br>如失败，则返回 NULL</p><pre><code>nodeObject.removeChild(node)</code></pre><p>说明:<br>node：必需，指定需要删除的节点</p><p>注意: 把删除的子节点赋值给x，这个子节点不在DOM树中<br>      但是还存在内存中，可通过 x 操作<br>      如果要完全删除对象，给 x 赋 null 值。</p><h3 id="replaceChild"><a href="#replaceChild" class="headerlink" title="replaceChild()"></a>replaceChild()</h3><p>实现子节点(对象)的替换。返回被替换对象的引用。 </p><p>   node.replaceChild (newnode,oldnew) </p><p>参数:<br>newnode: 必需，用于替换 oldnew 的对象<br>oldnew: 必需，被 newnode 替换的对象</p><p>注意:<br>1.当 oldnode 被替换时，所有与之相关的属性内容都将被移除<br>2.newnode 必须先被建立。 </p><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement()"></a>createElement()</h3><p>可创建元素节点,返回一个 Element 对象</p><pre><code>document.createElement(tagName)</code></pre><p>说明:<br>tagName：字符串值，这个字符串用来指明创建元素的类型<br>注意：要与appendChild() 或 insertBefore()<br>      方法联合使用，将元素显示在页面中。</p><p>调用方式:<br>eg:创建一个连接</p><pre><code>var main = document.body;var at=document.createElement(&quot;a&quot;);main.appendChild(at);</code></pre><h3 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode()"></a>createTextNode()</h3><p>创建新的文本节点，返回新创建的 Text 节点</p><pre><code>document.createTextNode(data)</code></pre><p>说明：<br>data : 字符串值，可规定此节点的文本。</p><p>调用方式:<br>eg:创建一个div，并在里面写上”i love JaveScript”</p><p>  var element=document.createElement(“div”);<br>  var text=document.createTextNode(“i love JaveScript”);<br>  element.appendChild(text);<br>  document.body.appendChild(element);</p><h3 id="clientHeight-amp-amp-clientWidth"><a href="#clientHeight-amp-amp-clientWidth" class="headerlink" title="clientHeight&amp;&amp;clientWidth"></a>clientHeight&amp;&amp;clientWidth</h3><p>获得浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）<br>在不同浏览器都实用的 JavaScript 方案：</p><pre><code>var w= document.documentElement.clientWidth      || document.body.clientWidth;var h= document.documentElement.clientHeight      || document.body.clientHeight;</code></pre><h3 id="scrollHeight-amp-amp-scrollWidth"><a href="#scrollHeight-amp-amp-scrollWidth" class="headerlink" title="scrollHeight&amp;&amp;scrollWidth"></a>scrollHeight&amp;&amp;scrollWidth</h3><p>获取网页内容高度和宽度。</p><pre><code>var w=document.documentElement.scrollWidth           || document.body.scrollWidth;var h=document.documentElement.scrollHeight          || document.body.scrollHeight;</code></pre><h3 id="offsetHeight-amp-amp-offsetWidth"><a href="#offsetHeight-amp-amp-offsetWidth" class="headerlink" title="offsetHeight&amp;&amp;offsetWidth"></a>offsetHeight&amp;&amp;offsetWidth</h3><p>获取网页内容高度和宽度<br>(包括滚动条等边线，会随窗口的显示大小改变)<br>offsetHeight = clientHeight + 滚动条 + 边框。</p><pre><code>var w= document.documentElement.offsetWidth    || document.body.offsetWidth;var h= document.documentElement.offsetHeight    || document.body.offsetHeight;</code></pre><h3 id="网页卷去的距离与偏移量"><a href="#网页卷去的距离与偏移量" class="headerlink" title="网页卷去的距离与偏移量"></a>网页卷去的距离与偏移量</h3><pre><code>scrollLeft:设置或获取位于给定对象左边界           与窗口中目前可见内容的最左端之间的距离 scrollTop:设置或获取位于对象最顶端          与窗口中可见内容的最顶端之间的距离 offsetLeft:获取指定对象相对于版面           或由offsetParent属性指定的           父坐标的计算左侧位置offsetTop:获取指定对象相对于版面          或由offsetParent属性指定的          父坐标的计算顶端位置</code></pre><p>注意:<br>offsetParent：布局中设置postion属性<br>              (Relative、Absolute、fixed)的父容器<br>              从最近的父节点开始，一层层向上找<br>              直到HTML的body</p><p>参考:<br><a href="http://blog.csdn.net/xiebaochun/article/details/38382169" target="_blank" rel="noopener">http://blog.csdn.net/xiebaochun/article/details/38382169</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js进阶学习four&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶(三)</title>
    <link href="https://sollylee.github.io/2018/02/08/JavaScript%E8%BF%9B%E9%98%B6-%E4%B8%89/"/>
    <id>https://sollylee.github.io/2018/02/08/JavaScript进阶-三/</id>
    <published>2018-02-08T08:23:33.000Z</published>
    <updated>2018-02-09T07:34:57.365Z</updated>
    
    <content type="html"><![CDATA[<p>javascript进阶学习总结三</p><a id="more"></a><h1 id="浏览器对象-BOM"><a href="#浏览器对象-BOM" class="headerlink" title="浏览器对象(BOM)"></a>浏览器对象(BOM)</h1><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><h3 id="java计时器"><a href="#java计时器" class="headerlink" title="java计时器"></a>java计时器</h3><p>在JavaScript中，我们可以在设定的时间间隔之后来执行代码<br>而不是在函数被调用后立即执行。</p><p>计时器类型：<br>一次性计时器：仅在指定的延迟时间之后触发一次。<br>间隔性触发计时器：每隔一定的时间间隔就触发一次。</p><pre><code>setTimeout():指定的延迟时间之后来执行代码。clearTimeout():取消setTimeout的设置。setInterval():每隔指定的时间执行代码。clearInterval():取消setInterval()设置。</code></pre><h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h4><p>在执行时,从载入页面后每隔指定的时间执行代码。</p><pre><code>setInterval(代码,交互时间);</code></pre><p>说明：<br>1.代码：要调用的函数或要执行的代码串</p><p>2.交互时间：周期性执行或调用表达式之间的时间间隔<br>            以毫秒计（1s=1000ms）</p><p>返回值:<br>一个可以传递给 clearInterval()<br>从而取消对”代码”的周期性执行的值</p><p>调用方式(假设有一个clock()函数):</p><pre><code>setInterval(&quot;clock()&quot;,1000)          或setInterval(clock,1000)</code></pre><h4 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a>clearInterval()</h4><p>clearInterval() 方法可取消由 setInterval() 设置的交互时间</p><p>   clearInterval(id_of_setInterval)</p><p>说明:</p><p>id_of_setInterval：由 setInterval() 返回的 ID 值。</p><h4 id="计时器setTimeout"><a href="#计时器setTimeout" class="headerlink" title="计时器setTimeout()"></a>计时器setTimeout()</h4><p>setTimeout()计时器，在载入后延迟指定时间后,<br>去执行一次表达式,仅执行一次</p><pre><code>setTimeout(代码,延迟时间);</code></pre><p>说明：<br>1.代码: 要调用的函数或要执行的代码串</p><p>2.延时时间：在执行代码前需等待的时间，<br>            以毫秒为单位（1s=1000ms)。</p><h4 id="取消计时器clearTimeout"><a href="#取消计时器clearTimeout" class="headerlink" title="取消计时器clearTimeout()"></a>取消计时器clearTimeout()</h4><p>setTimeout()和clearTimeout()一起使用，停止计时器</p><pre><code>clearTimeout(id_of_setTimeout)</code></pre><p>参数说明:<br>id_of_setTimeout：由 setTimeout() 返回的 ID 值</p><h2 id="History-对象"><a href="#History-对象" class="headerlink" title="History 对象"></a>History 对象</h2><p>history对象记录了用户曾经浏览过的页面(URL)，并可以实现浏览器前进与后退相似导航的功能</p><pre><code>window.history.[属性|方法]</code></pre><p>History对象属性:</p><pre><code>length  返回浏览器历史列表中的URL数量</code></pre><p>History对象方法</p><pre><code>back()  加载history列表中的前一个URLforward()  加载history列表中的后一个URLgo()  加载history列表中的某个具体的页面go(0) 当前页面go(1) 相当forward()go(-1) 相等back()go(n) 访问history的url列表中相对位置的URL</code></pre><h2 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h2><p>location用于获取或设置窗体的URL，并且可以用于解析URL</p><pre><code>location.[属性|方法]</code></pre><p>location对象属性:</p><pre><code>hash  设置或返回从井号（#）开始的URL（锚）host  设置或返回主机名和当前URL的端口号hostname 设置或返回当前URL的主机名href 设置或返回当前URL。pathname 设置或返回当前URL的路径部分port  设置或返回当前URL的协议。search  设置或返回从问号（？）开始的URL(查询部分)</code></pre><p>location对象方法:</p><pre><code>assign()  加载新的文档reload()  重新加载当前文档replace()  用新的文档替换当前文档</code></pre><h2 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h2><p>Navigator 对象包含有关浏览器的信息<br>通常用于检测浏览器与操作系统的版本</p><pre><code>Navigator.属性</code></pre><p>Navigator对象属性:</p><pre><code>appCodeName 浏览器代码名的字符串表示appName  返回浏览器的名称appVersiion  返回浏览器的平台和版本信息platform  返回运行浏览器的操作系统平台userAgent  返回由客户机发送服务器的user-agent头部的值</code></pre><h2 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h2><p>screen对象用于获取用户的屏幕信息</p><pre><code>window.screen.属性</code></pre><p>screen对象属性:</p><pre><code>availHeight：窗口可以使用的屏幕高度，单位像素；availWidth：窗口可以使用的屏幕宽度，单位像素；colorDepth：用户浏览器表示的颜色位数，            通常为32位(每像素的位数)pixelDepth：用户浏览器表示的颜色位数，            通常为32位(每像素的位数)            (IE不支持此属性)height：屏幕的高度，单位像素；width：屏幕的宽度，单位像素；</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript进阶学习总结三&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶(二)</title>
    <link href="https://sollylee.github.io/2018/02/05/JavaScript%E8%BF%9B%E9%98%B6-%E4%BA%8C/"/>
    <id>https://sollylee.github.io/2018/02/05/JavaScript进阶-二/</id>
    <published>2018-02-05T04:32:25.000Z</published>
    <updated>2018-02-05T11:12:24.979Z</updated>
    
    <content type="html"><![CDATA[<p>js进阶学习总结two<br><a id="more"></a></p><h2 id="js内置对象"><a href="#js内置对象" class="headerlink" title="js内置对象"></a>js内置对象</h2><h3 id="Date-日期对象"><a href="#Date-日期对象" class="headerlink" title="Date 日期对象"></a>Date 日期对象</h3><p>日期对象可以储存任意一个日期，<br>并且可以精确到毫秒数（1/1000 秒）。<br>定义一个时间对象 :</p><pre><code>var Udate=new Date(); </code></pre><p>访问方法语法：“&lt;日期对象&gt;.&lt;方法&gt;”<br>Date对象中处理时间和日期的常用方法：</p><pre><code>get/setDate()     返回/设置日期get/setFullYear() 返回/设置年份，用四位数表示get/setYear()   返回/设置年份get/setHours()  返回/设置小时 24小时get/setMouth()  返回/设置月份 0-11月 所以要加一get/setMinutes() 返回/设置分钟get/setTime()    返回/设置时间，毫秒为单位，计算从 1970 年 1 月 1 日零时到日期对象所指的日期的毫秒数。</code></pre><p>可以在设置时间上推迟时间:<br>eg:时间推迟 1 小时<br>就是: “x.setTime(x.getTime() + 60 <em> 60 </em> 1000);”</p><p>获取星期的方法:<br>getDay() 返回星期，返回的是0-6的数字，0 表示星期天。<br>如果要返回相对应“星期”，<br>通过数组完成，代码如下:</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  var mydate=new Date();  var weekday=[&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,  &quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;];  document.write(&quot;今天是：&quot;+ weekday[mydate.getDay()]);&lt;/script&gt;</code></pre><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p>定义字符串的方法就是直接赋值。<br>eg：</p><pre><code>var mystr = &quot;Hello World&quot;</code></pre><p>访问字符串对象的属性length:</p><pre><code>stringObject.length; 返回该字符串的长度。</code></pre><p>访问字符串对象的方法：</p><pre><code>stringObject.方法toUpperCase() 将字符串所有小写字母转换为大写toLowerCase() 将字符串所有大写字母转换为小写</code></pre><h4 id="charAt-index"><a href="#charAt-index" class="headerlink" title="charAt(index)"></a>charAt(index)</h4><p>返回指定位置的字符(index为字符下标,必填)<br>返回的字符是长度为 1 的字符串。</p><p>注意：</p><p>1.字符串中第一个字符的下标是0。<br>  最后一个字符的下标为字符串长度减一(string.length-1)</p><p>2.如果参数index不在 0 与string.length-1之间，<br>  该方法将返回一个空字符串</p><p>3.空格也算一个字符</p><h4 id="indexOf-substring-startpos"><a href="#indexOf-substring-startpos" class="headerlink" title="indexOf(substring, startpos)"></a>indexOf(substring, startpos)</h4><p>返回某个指定的字符串值在字符串中首次出现的位置.<br>substring(必填), startpos(可选参数)</p><p>说明：</p><p>1.该方法将从头到尾地检索字符串stringObject,<br>  看它是否含有子串substring</p><p>2.可选参数，从stringObject的startpos位置开始查找substring，<br>如果没有此参数将从stringObject的开始位置查找。</p><p>3.如果找到一个 substring，则返回substring的第一次出现的位置<br>stringObject 中的字符位置是从 0 开始的</p><p>若要检索的字符串值没有出现，则返回-1</p><h4 id="字符串分割split-separator-limit"><a href="#字符串分割split-separator-limit" class="headerlink" title="字符串分割split(separator,limit)"></a>字符串分割split(separator,limit)</h4><p>将字符串分割为字符串数组，并返回此数组。</p><p>sparator为必填参数，以该参数为标志分割数组</p><p>limit为可选参数，分割次数，设置后，<br>返回的字符串不会超过分割次数,省略后将返回所有分割的字符串</p><p>注意：如果把空字符串(“”)作为separator,<br>那么stringObject中的每个字符之间都会被分割。</p><h4 id="substring-startPos-stopPos"><a href="#substring-startPos-stopPos" class="headerlink" title="substring(startPos,stopPos)"></a>substring(startPos,stopPos)</h4><p>提取字符串中介于两个指定下标之间的字符</p><p>startPos为必填参数，一个非负整数，开始位置</p><p>stopPos为可填参数，一个非负整数，结束位置,<br>省略后默认为字符串末尾</p><p>注意：</p><p>1.返回的内容是从start开始(包含start位置的字符)到stop-1 处的所有字符，其长度为 stop 减start。</p><p>2.如果参数 start 与 stop 相等，<br>那么该方法返回的就是一个空串(即长度为 0 的字符串)</p><p>3.如果 start 比 stop 大，<br>那么该方法在提取子串之前会先交换这两个参数。</p><h4 id="substr-startPos-length"><a href="#substr-startPos-length" class="headerlink" title="substr(startPos,length)"></a>substr(startPos,length)</h4><p>从字符串中提取从 startPos位置开始的指定数目的字符串。</p><p>startPos为必填参数,开始位置.必须是数值</p><p>length为可填参数,提取的字符串长度,省略则返回从startPos<br>到字符串对象的结尾的字符</p><p>注意：</p><p>1.如果参数startPos是负数，从字符串的尾部开始算起的位置。<br>即:-1 指字符串中最后一个字符，-2指倒数第二个字符,以此类推</p><p>2.如果startPos为负数且绝对值大于字符串长度，startPos为0。</p><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math对象，提供对数据的数学计算。<br>Math对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法<br>eg：<br>      var mypi=Math.PI; //获取π值<br>调用方式: Math.方法<br>常用方法:</p><pre><code>ceil(X) 对一个数进行向上取整，X必填,为一个数值。下同floor(X) 对一个数进行向下取整。round(X) 把一个数字四舍五入为最接近的整数。random() 返回介于 0 ~ 1（大于或等于 0 但小于 1 )         之间的一个随机数。</code></pre><h3 id="数组对象-补充"><a href="#数组对象-补充" class="headerlink" title="数组对象(补充)"></a>数组对象(补充)</h3><p>数组方法:</p><p>调用方式:    arrayObject.方法</p><pre><code>concat()    连接两个或更多的数组，并返回结果join()      把数组的所有元素放入一个字符串            元素通过指定的分隔符进行分隔pop()       删除并返回数组的最后一个元素push()      向数组的未尾添加一个或多个元素            并返回新的长度reverse()   颠倒数组中的元素顺序shift()     删除并返回数组的第一个元素slice()     从某个已有的数组返回选定的元素sort()      对数组的元素进行排序splice()    删除元素，并向数组添加新元素toSource()  返回该对象的源代码toString()  把数组转换为字符串，并返回结果</code></pre><p>部分方法详解:</p><h4 id="concat-array1-array2-…-arrayN"><a href="#concat-array1-array2-…-arrayN" class="headerlink" title="concat(array1,array2,…,arrayN)"></a>concat(array1,array2,…,arrayN)</h4><p>连接两个或多个数组。返回一个新数组(副本)，不改变原来的数组。<br>array1为要连接的第一个数组，以此类推</p><h4 id="join-separator"><a href="#join-separator" class="headerlink" title="join(separator)"></a>join(separator)</h4><p>把数组中的所有元素放入一个字符串。<br>元素是通过指定的分隔符进行分隔的。<br>sperator为可选参数，指定的分隔符，省略默认为 逗号</p><p>注意：<br>返回的字符串中，是把数组中的各个元素串起来，<br>用&lt;分隔符&gt;置于元素与元素之间。<br>这个方法不影响数组原本的内容。</p><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>用于颠倒数组中元素的顺序</p><p>该方法会改变原来的数组，而不会创建新的数组。</p><h4 id="slice-start-end"><a href="#slice-start-end" class="headerlink" title="slice(start, end)"></a>slice(start, end)</h4><p>从已有的数组中返回选定的元素。</p><p>返回一个新的数组，<br>包含从 start 到 end(不包括end)的arrayObject中的元素<br>该方法并不会修改数组，而是返回一个子数组。</p><p>start 为必填参数(数值)，开始选取的位置，若为负数<br>则从数组末尾开始往回数</p><p>end 为可选参数，结束的位置，省略默认从start到数组末尾</p><p>String.slice() 与 Array.slice() 相似。</p><h4 id="sort-sortMethod"><a href="#sort-sortMethod" class="headerlink" title="sort(sortMethod)"></a>sort(sortMethod)</h4><p>使数组中的元素按照一定的顺序排列。</p><p>sortMethod为可填参数，规定排序顺序，必须为函数<br>说明：</p><p>1.如果不指定&lt;方法函数&gt;，则按unicode码顺序排列。<br>2.如果指定&lt;方法函数&gt;，则按&lt;方法函数&gt;所指定的排序方法排序。</p><p>注意:</p><p>该函数要比较两个值，<br>然后返回一个用于说明这两个值的相对顺序的数字。<br>比较函数应该具有两个参数 a 和 b，<br>其返回值如下： </p><p>  若返回值&lt;=-1，则表示 A 在排序后的序列中出现在 B 之前。<br>  若返回值&gt;-1 &amp;&amp; <1，则表示 a="" 和="" b="" 具有相同的排序顺序。="" 若返回值="">=1，则表示 A 在排序后的序列中出现在 B 之后。</1，则表示></p><p>升序：</p><pre><code>function sortNum(a,b) {      return a - b;     //如降序，把“a - b”该成“b - a”}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js进阶学习总结two&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶(一)</title>
    <link href="https://sollylee.github.io/2018/02/02/JavaScript%E8%BF%9B%E9%98%B6-%E4%B8%80/"/>
    <id>https://sollylee.github.io/2018/02/02/JavaScript进阶-一/</id>
    <published>2018-02-02T10:50:49.000Z</published>
    <updated>2018-02-02T12:02:56.744Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript进阶学习总结（一）<br><a id="more"></a></p><h2 id="js基础语法补充"><a href="#js基础语法补充" class="headerlink" title="js基础语法补充"></a>js基础语法补充</h2><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>js中拥有:<br>算术操作符(+、-、 * , /、–、++等)，<br>比较操作符(&lt;、&gt;、&gt;=、&lt;=、==、!=)，<br>逻辑操作符(&amp;&amp;、||、！)。功能与C语言一致。</p><p>算术运算符<br>主要用来完成类似加减乘除，自增自减的工作，<br>在JS中，“+”不只代表加法，还可以连接两个字符串</p><p>比较操作符<br>主要用于两个操作数的比较，成立返回true，否则返回false</p><p>逻辑运算符<br>主要用于条件判断，成立返回true，否则返回false</p><p>操作符之间的优先级（高到低）:<br>算术操作符 → 比较操作符 → 逻辑操作符 → “=”赋值符号</p><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><pre><code>var 变量名=new Array();</code></pre><p>js的数组元素下标也是从0开始的,<br>元素成员也是  变量名[num]  来表示，<br>不过要注意的是：</p><pre><code>1.创建的新数组是空数组，没有值，如输出，则显示undefined。2.虽然创建数组时，指定了长度，但实际上数组都是变长的，也就是说即使指定了长度为8，仍然可以将元素存储在规定长度以外</code></pre><p>数组长度:</p><pre><code>myarray.length; //获得数组myarray的长度</code></pre><p>二维数组的定义有两种方式:</p><pre><code>1.var myarr=new Array();  //先声明一维 for(var i=0;i&lt;2;i++)    //一维长度为2{          myarr[i]=new Array();  //再声明二维        for(var j=0;j&lt;3;j++)   //二维长度为3      {              myarr[i][j]=i+j;   //赋值，每个数组元素的值为i+j   } }2. var myarr = [[0 , 1 , 2 ],[1 , 2 , 3]]  //myarr[2][3]</code></pre><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>js中有if语句、if-else语句、if-else嵌套语句<br>while语句、do-while语句（不用在最后加 ; ）<br>for语句、switch语句、continue、break语句。</p><p>它们的功能语法与C语言的一致。</p><h4 id="if-else嵌套"><a href="#if-else嵌套" class="headerlink" title="if-else嵌套:"></a>if-else嵌套:</h4><pre><code>if(条件1){ 条件1成立时执行的代码}else  if(条件2){ 条件2成立时执行的代码}...else  if(条件n){ 条件n成立时执行的代码}else{ 条件1、2至n不成立时执行的代码}</code></pre><h4 id="while循环语句："><a href="#while循环语句：" class="headerlink" title="while循环语句："></a>while循环语句：</h4><pre><code>while(判断条件){    循环语句}</code></pre><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句:"></a>switch语句:</h4><pre><code>switch(表达式){case值1:  执行代码块 1  break;case值2:  执行代码块 2  break;...case值n:  执行代码块 n  break;default:  与 case值1、...case值n 不同时执行的代码}</code></pre><h4 id="for循环语句："><a href="#for循环语句：" class="headerlink" title="for循环语句："></a>for循环语句：</h4><pre><code>for(初始化变量;循环条件;循环迭代){         循环语句  }</code></pre><h4 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do-while语句"></a>do-while语句</h4><pre><code>do{    循环语句}while(判断条件)</code></pre><h2 id="事件响应"><a href="#事件响应" class="headerlink" title="事件响应"></a>事件响应</h2><p>在网页中，如使用事件，就在该元素中设置事件属性。<br>eg:</p><pre><code>&lt; input  .... 事件=&quot;函数名()&quot; /&gt;</code></pre><h3 id="鼠标单击事件-onclick"><a href="#鼠标单击事件-onclick" class="headerlink" title="鼠标单击事件(onclick)"></a>鼠标单击事件(onclick)</h3><p>onclick是鼠标单击事件，当在网页上单击鼠标时，<br>就会发生该事件。同时onclick事件调用的程序块就会被执行，<br>通常与按钮一起使用。</p><h3 id="鼠标经过事件（onmouseover）"><a href="#鼠标经过事件（onmouseover）" class="headerlink" title="鼠标经过事件（onmouseover）"></a>鼠标经过事件（onmouseover）</h3><p>鼠标经过事件，当鼠标移到一个对象上时，<br>该对象就触发onmouseover事件，并执行onmouseover事件调用的程序</p><h3 id="鼠标移开事件（onmouseout）"><a href="#鼠标移开事件（onmouseout）" class="headerlink" title="鼠标移开事件（onmouseout）"></a>鼠标移开事件（onmouseout）</h3><p>鼠标移开事件，当鼠标移开当前对象时，执行onmouseout调用的程序</p><h3 id="光标聚焦事件（onfocus）"><a href="#光标聚焦事件（onfocus）" class="headerlink" title="光标聚焦事件（onfocus）"></a>光标聚焦事件（onfocus）</h3><p>当网页中的对象获得聚点时，执行onfocus调用的程序就会被执行</p><h3 id="失焦事件（onblur）"><a href="#失焦事件（onblur）" class="headerlink" title="失焦事件（onblur）"></a>失焦事件（onblur）</h3><p>onblur事件与onfocus是相对事件，<br>当光标离开当前获得聚焦对象的时候，触发onblur事件，<br>同时执行被调用的程序。</p><h3 id="内容选中事件（onselect）"><a href="#内容选中事件（onselect）" class="headerlink" title="内容选中事件（onselect）"></a>内容选中事件（onselect）</h3><p>选中事件，当文本框或者文本域中的文字被选中时，<br>触发onselect事件，同时调用的程序就会被执行。</p><h3 id="文本框内容改变事件（onchange）"><a href="#文本框内容改变事件（onchange）" class="headerlink" title="文本框内容改变事件（onchange）"></a>文本框内容改变事件（onchange）</h3><p>通过改变文本框的内容来触发onchange事件，同时执行被调用的程序</p><h3 id="加载事件（onload）"><a href="#加载事件（onload）" class="headerlink" title="加载事件（onload）"></a>加载事件（onload）</h3><p>事件会在页面加载完成后，立即发生，同时执行被调用的程序。<br>注意：1. 加载页面时，触发onload事件，事件写在&lt; body &gt;标签内</p><h3 id="卸载事件（onunload）"><a href="#卸载事件（onunload）" class="headerlink" title="卸载事件（onunload）"></a>卸载事件（onunload）</h3><p>当用户退出页面时（页面关闭、页面刷新等），<br>触发onUnload事件，同时执行被调用的程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript进阶学习总结（一）&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript入门</title>
    <link href="https://sollylee.github.io/2018/02/01/JavaScript%E5%85%A5%E9%97%A8/"/>
    <id>https://sollylee.github.io/2018/02/01/JavaScript入门/</id>
    <published>2018-02-01T09:10:28.000Z</published>
    <updated>2018-02-02T11:57:49.743Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript入门(基础学习总结)<br><a id="more"></a></p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><p>一行的结束就被认定为语句的结束，通常在结尾加上一个分号”;”来表示语句的结束。</p><p>javascript作为一种脚本语言可以放在html页面中任何位置。<br>但浏览器解释html时是按先后顺序的，所以前面的script就先被执行。<br>比如进行页面显示初始化的js必须放在head里面,<br>因为初始化都要求提前进行(如给页面body设置css等);<br>而如果是通过事件调用执行的function那么对位置没什么要求的。</p><h3 id="js文件引用"><a href="#js文件引用" class="headerlink" title="js文件引用"></a>js文件引用</h3><pre><code>&lt;script src=&quot;文件名&quot;&gt;&lt;/script&gt;</code></pre><h3 id="js注释"><a href="#js注释" class="headerlink" title="js注释"></a>js注释</h3><pre><code>//   注释一行/**/ 注释多行</code></pre><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><pre><code>var  变量名;</code></pre><p>注意:</p><pre><code>1. 变量名必须以下划线&apos;_&apos;、英文字母或美元符号&apos;$&apos;开始.2. 变量名可以使用任意多个英文字母，数字，下划线，或者美元符号组成3. 变量名不能使用JavaScript关键词和JavaScript保留字</code></pre><p>可以给变量赋值数字，字母，字符串，true或false.</p><p>附：</p><p>javascript保留字：</p><pre><code>abstract、enum、int、short、boolean、export、interface、static、byte、extends、long、super、char、final、native、synchronized、class、float、package、throws、const、goto、private、tranisientdebugger、implements、protected、volatile、double、import、public</code></pre><p>javascript关键字：</p><pre><code>break、else、new、var、case、finally、return、void、catch、for、switch、while、default、if、throw、delete、in、try、do、instanceof、typeof</code></pre><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><pre><code>function 函数名(形参){    函数代码;    return  返回值;}</code></pre><p>形参和返回语句可有可无，<br>返回值可以是数字，字母，字符串，ture/false<br>返回值可以用变量取接。</p><p>调用函数： 函数名(参数);</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><pre><code>if(条件){ 条件成立时执行的代码 }else{ 条件不成立时执行的代码 }</code></pre><h3 id="输出内容-document-write"><a href="#输出内容-document-write" class="headerlink" title="输出内容(document.write())"></a>输出内容(document.write())</h3><p>第一种:输出内容用””括起，直接输出””号内的内容。</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  document.write(&quot;I love JavaScript！&quot;); //内容用&quot;&quot;括起来，&quot;&quot;里的内容直接输出。&lt;/script&gt;</code></pre><p>第二种:通过变量，输出内容</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  var mystr=&quot;hello world!&quot;;  document.write(mystr);  //直接写变量名，输出变量存储的内容。&lt;/script&gt;</code></pre><p>第三种:输出多项内容，内容之间用+号连接。</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  var mystr=&quot;hello&quot;;  document.write(mystr+&quot;I love JavaScript&quot;);   //多项内容之间用+号连接&lt;/script&gt;</code></pre><p>第四种:输出HTML标签，并起作用，标签使用””括起来。</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  var mystr=&quot;hello&quot;;document.write(mystr+&quot;&lt;br&gt;&quot;);//输出hello后，输出一个换行符  document.write(&quot;JavaScript&quot;);&lt;/script&gt;</code></pre><p> 输出时，加上“white-space:pre”(空白会被浏览器保留)样式，<br> 可以输出空格。</p><h2 id="常用互动语法"><a href="#常用互动语法" class="headerlink" title="常用互动语法"></a>常用互动语法</h2><h3 id="js-警告"><a href="#js-警告" class="headerlink" title="js-警告"></a>js-警告</h3><pre><code>alert(字符串);</code></pre><p>alert 弹出消息对话框(包含一个确定按钮)。</p><h3 id="js-确定-confirm消息对话框"><a href="#js-确定-confirm消息对话框" class="headerlink" title="js-确定(confirm消息对话框)"></a>js-确定(confirm消息对话框)</h3><pre><code>confirm(str);</code></pre><p>str:在消息对话框中要显示的文本</p><p>返回值:<br>        按下“确定”，返回true<br>        按下“取消”，返回false</p><p>返回值用于判断语句。</p><h3 id="js-提问-prompt"><a href="#js-提问-prompt" class="headerlink" title="js-提问(prompt)"></a>js-提问(prompt)</h3><pre><code>prompt(str1,str2);</code></pre><p>str1:要显示在消息对话框中的文本，不可修改</p><p>str2:文本框的内容，可以修改</p><p>返回值：<br>        点击确定，文本框中的内容作为返回值<br>        点击取消，返回null</p><h3 id="js-打开新窗口-window-open"><a href="#js-打开新窗口-window-open" class="headerlink" title="js-打开新窗口(window.open)"></a>js-打开新窗口(window.open)</h3><pre><code>window.open([URl],[窗口名称],[参数字符串])</code></pre><p>URL：可选参数，在窗口中要显示网页的网址或路径。<br>如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。</p><p>窗口名称：可选参数，被打开窗口的名称。</p><p>注意：<br>    1.该名称由字母、数字和下划线字符组成。</p><pre><code>2.&quot;_top&quot;、&quot;_blank&quot;、&quot;_self&quot;具有特殊意义的名称。    _blank：在新窗口显示目标网页    _self：在当前窗口显示目标网页    _top：框架网页中在上部窗口中显示目标网页3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。4.name 不能包含有空格。</code></pre><p>参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。</p><pre><code>参数          值                     说明 top         Number        窗口顶部离屏幕顶部的像素数left         Number        窗口左侧离屏幕左侧的像素数width        Number               窗口的高度height       Number               窗口的宽度menubar      yes/no             窗口有没有菜单toolbar      yes/no             窗口有没有工具条scrollbars   yes/no             窗口有没有滚动条status       yes/no             窗口有没有状态栏</code></pre><h3 id="js-关闭窗口-window-close"><a href="#js-关闭窗口-window-close" class="headerlink" title="js-关闭窗口(window.close)"></a>js-关闭窗口(window.close)</h3><pre><code>window.close;//关闭本窗口</code></pre><p>或</p><pre><code>&lt;窗口对象&gt;.close();//关闭指定窗口</code></pre><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>文档对象模型DOM（Document Object Model）<br>定义访问和处理HTML文档的标准方法。<br>DOM 将HTML文档呈现为带有元素、属性和文本的树结构(节点树)</p><p>元素节点：&lt; html &gt; &lt; body &gt; &lt; p &gt; 等标签</p><p>文本节点：向用户展示的内容,如&lt; li &gt;间的文本</p><p>属性节点: 元素属性，如&lt; a &gt;标签的链接属性 herf=””</p><h3 id="获取id"><a href="#获取id" class="headerlink" title="获取id"></a>获取id</h3><pre><code>document.getElementById(&quot;id&quot;)</code></pre><p>以变量接取，var i=document.getElementById(“id”);</p><h3 id="innerHTML属性"><a href="#innerHTML属性" class="headerlink" title="innerHTML属性"></a>innerHTML属性</h3><p>innerHTML(区分大小写)属性用于获取或替换HTML元素的内容</p><pre><code>object.innerHTML//object为获取的对象，下同</code></pre><p>eg:</p><pre><code>&lt; p id=&quot;con&quot;&gt;xxxxxx&lt; /p &gt;var i=document.getElementById(&quot;con&quot;);i.innerHTML=&quot;hello world&quot; //修改p中的内容为&quot;hello world&quot;</code></pre><h3 id="改变HTML样式"><a href="#改变HTML样式" class="headerlink" title="改变HTML样式"></a>改变HTML样式</h3><pre><code>object.style.display=&quot;value&quot;;</code></pre><p>value:<br>    none   此元素不会被显示(隐藏)</p><pre><code>block  此元素将显示为块级元素(显示)</code></pre><h3 id="控制类名-className属性"><a href="#控制类名-className属性" class="headerlink" title="控制类名(className属性)"></a>控制类名(className属性)</h3><pre><code>object.className=classname;</code></pre><p>作用：<br>    1.获取元素的class属性<br>    2.为网页内的某个元素指定一个css样式来改变外观</p><h3 id="取消获取的样式"><a href="#取消获取的样式" class="headerlink" title="取消获取的样式"></a>取消获取的样式</h3><pre><code>1. object.removeAttribute(&quot;style&quot;);2. object.style=null;3.object.style=&quot;&quot;;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript入门(基础学习总结)&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>sublime使用技巧</title>
    <link href="https://sollylee.github.io/2018/01/28/sublime%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://sollylee.github.io/2018/01/28/sublime使用技巧/</id>
    <published>2018-01-28T01:42:37.000Z</published>
    <updated>2018-02-01T10:24:13.241Z</updated>
    
    <content type="html"><![CDATA[<p>前端工具sublime的使用技巧，从慕课中总结而来</p><a id="more"></a><h2 id="一些插件及与其相关的快捷键的使用："><a href="#一些插件及与其相关的快捷键的使用：" class="headerlink" title="一些插件及与其相关的快捷键的使用："></a>一些插件及与其相关的快捷键的使用：</h2><p>安装Packet：菜单栏View-&gt;Show Console-&gt;粘贴text2或text3的Packet配置信息-&gt;重启软件-&gt;Ct+N（新建文档）-&gt;Ct+Sh+P-&gt;输入pci-&gt;查找要安装的插件</p><h3 id="Emmet插件："><a href="#Emmet插件：" class="headerlink" title="Emmet插件："></a>Emmet插件：</h3><p>安装好Emmet插件后：</p><pre><code>！+Ct+E:迅速生成html的基础元素Ct+P:查找时加 #元素名；找到后，若要在该行下新加一行，可按 Ct+Enter上一行  Ct+Sh+Enterul&gt;.item$*10 ,再按Ct+E，则一次性生成10个&lt;li class=&quot;item(1/2/3/../10)&quot;&gt;&lt;/li&gt; 即 父元素&gt; .（表示有class标签或用 # 表示有id值）类名（id名）$*（子元素出现次数），再Ct+E在文本中写 h2{this is good} 再按Ct+E,则生成 &lt;h2&gt;this is good&lt;/h2&gt;Ct+ 键盘上含 } 的键：文本缩进Ct+Sh+V：粘贴时保持复制时的格式，如缩进等</code></pre><h3 id="insert-callback插件"><a href="#insert-callback插件" class="headerlink" title="insert callback插件"></a>insert callback插件</h3><pre><code>Alt+C：删除多于的符号</code></pre><h3 id="advanNew"><a href="#advanNew" class="headerlink" title="advanNew"></a>advanNew</h3><p>Ctrl+Shift+P打开命令模式，<br>输入”pci”（Package Control:Install Package），<br>在提示框输入”adva”，选”AdvancedNewFile”进行安装。</p><pre><code>安装完成后使用&quot;Ctrl+Alt+N&quot;</code></pre><p>选在屏幕下方出现的输入框中输入”test.html”，创建了一个html文件；</p><p>输入框中输入”public/css/test.css”，<br>则在public目录下的css中创建了一个test.css文件；</p><p>输入框中输入”public/css/sass/test.sass”，<br>则在public目录下的css中创建了一个sass文件夹<br>并在其中创建了一个test.sass文件。</p><h3 id="httpRequester"><a href="#httpRequester" class="headerlink" title="httpRequester"></a>httpRequester</h3><pre><code>Ctrl+Shift+P打开命令模式，输入&quot;pci&quot;（Package Control:Install Package），在提示框输入&quot;http&quot;，选&quot;Http Requester&quot;进行安装。</code></pre><p>安装完成后要使用注解的方式来标记函数需要测试的路由地址</p><p>在Sublime内部，做服务器响应的测试Get请求</p><pre><code>/* GET users listing. */// localhost:3000/users/router.get(&apos;/&apos;, function(req, res) {res.send(&apos;respond with a resource&apos;);});</code></pre><p>注释需要测试的路由地址”// localhost:3000/users/“（localhost为路由地址，3000为端口号）<br>选中”localhost:3000/users/“，<br>使用快捷键”Alt+Ctrl+R”，出现新的页面显示服务器的响应，<br>“200 OK”表示服务器响应正确。</p><p>get请求比较容易测试，可以在浏览器中输入地址；<br>post请求比较难以测试<br>以前测试post请求需要完成一个表单（用html语言写），<br>然后模拟提交，这样不利于开发</p><p>不需要前端form表单的情况下来模拟form提交，先完成post请求<br>在Sublime内部，做服务器响应的测试Post请求</p><pre><code>/* POST localhost:3000/users/Content-type: application/x-www-form-urlencodedPOST_BODY:variable1=avalue&amp;variable2=1234&amp;variable3=anothervalue*/router.post(&apos;/&apos;, function(req, res) {res.send(req.body);});（POST：访问地址是一个post请求，&quot;localhost:3000/users/&quot;是访问的地址，&quot;Content-type...anothervalue&quot;指定是以form表单形式提交）选中&quot;/* */&quot;内的注释，使用快捷键&quot;Alt+Ctrl+R&quot;，出现新的页面显示服务器的响应，&quot;200 OK&quot;表示服务器响应正确</code></pre><h3 id="netauke-Snip"><a href="#netauke-Snip" class="headerlink" title="netauke Snip"></a>netauke Snip</h3><h3 id="sidebar-enhancement"><a href="#sidebar-enhancement" class="headerlink" title="sidebar enhancement"></a>sidebar enhancement</h3><p>右击对应文档，有直接浏览该页的选项</p><h3 id="docblockr"><a href="#docblockr" class="headerlink" title="docblockr"></a>docblockr</h3><p>用于简化注释拼写</p><pre><code>/** +Tab键 ：可有函数的注释格式/** 或 /* + 回车键：其余注释符自动补充输入/*按回车，补充行注释。输入/**按回车，补充多行注释。在写好的函数上方输入/**按tab键，自动补充函数说明格式。Ctrl+/: 行注释;Ctrl+Shift+/: 块注释.</code></pre><h3 id="sublimelinter-jshlint"><a href="#sublimelinter-jshlint" class="headerlink" title="sublimelinter-jshlint"></a>sublimelinter-jshlint</h3><pre><code>用于语法、风格的检验安装jsnode插件 -&gt; 安装sublimelinter-jshlint插件 -&gt;运行cmd，输入 npm install -g jshint -&gt;最后到sulimt软件里检验补充9.html代码对齐插件html beautiful；安装后快捷键ctr + alt + shift + f</code></pre><h3 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h3><p>ctrl+shift+p —&gt;Install Package —&gt;<br>找到SideBarEnhancements<br>安装SideBarEnhancements</p><p>配置预览快捷键</p><p>Preferences —&gt; Key Bindings - User 将以下代码复制到数组中。</p><pre><code>// chrome{ &quot;keys&quot;: [&quot;f2&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,&quot;args&quot;: {&quot;paths&quot;: [],&quot;application&quot;: &quot;C:/Program Files (x86)/Google/Chrome/Application/chrome.exe&quot;,&quot;extensions&quot;:&quot;.*&quot;}},// firefox{ &quot;keys&quot;: [&quot;f3&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,&quot;args&quot;: {&quot;paths&quot;: [],&quot;application&quot;: &quot;D:/Program Files (x86)/Mozilla Firefox/firefox.exe&quot;,&quot;extensions&quot;:&quot;.*&quot;}},// ie{ &quot;keys&quot;: [&quot;f4&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,&quot;args&quot;: {&quot;paths&quot;: [],&quot;application&quot;: &quot;C:/Program Files/Internet Explorer/iexplore.exe&quot;,&quot;extensions&quot;:&quot;.*&quot;}}</code></pre><p>上面的代码中有两处需要注意的地方，<br>一个是keys表示快捷键，即f2可以启动chrome进行预览。<br>另一个是application，表示浏览器所在的安装路径，<br>只有路径配置正确，才能够正常调用浏览器</p><h3 id="nettus-fetch插件"><a href="#nettus-fetch插件" class="headerlink" title="nettus fetch插件"></a>nettus fetch插件</h3><pre><code>ctrl+shift+p---&gt;输入nettus fetch回车---&gt;ctrl_shift+p---&gt;输入fetch manage来管理配置文件</code></pre><p>使用fetch来下载jquery步骤：</p><pre><code>ctrl+alt+n在某个目录下创建一个jQuery文件---&gt;在该文件中输入ctrl+shift+p---&gt;输入fetch file回车---&gt;jquery回车下载。</code></pre><p>在fetch配置文件中来增加新的类库（如：underscore.js）：<br>步骤如下：</p><pre><code>在该文件中添加&quot;underscore&quot;:&quot;http://github.com/jashkenas/underscore/blob/master/underscore.min.js&quot;和前一个参数以&quot;逗号&quot;来分隔。ctrl+alt+n在某个目录下创建一个underscore文件---&gt;在该文件中输入ctrl+shift+p---&gt;输入fetch file回车---&gt;jquery回车下载。</code></pre><p>到github下载underscore.js文件<br>github上的underscore文件地址：</p><pre><code>https://raw.githubusercontent.com/jashkenas/underscore/master/underscore-min.js</code></pre><h2 id="快捷键的使用"><a href="#快捷键的使用" class="headerlink" title="快捷键的使用"></a>快捷键的使用</h2><p>1、Ctrl+H：查找替换<br>2、Ctrl+D：选择游标所在单词，连续Ctrl+D实现多行选择<br>（选择与第一次选择相同的单词）<br>3、Ctrl+K Ctrl+D：跳过当前选择，选择下一个<br>4、Ctrl+shift+D：复制游标所在行<br>5、Ctrl+F3：选择所以与游标所在单词相同的单词<br>6、全选：先Ctrl+A全选然后Ctrl+shift+L产生游标<br>7、按住shift，右键，拖动，产生多行游标<br>8、Ctrl+P 的作用是：搜索项目中的文件 go to anything<br>9、Ctrl+Shift+P 快捷键的作用是：打开命令模式<br>10、Ctrl+Shift+K 的快捷键是：删除整行<br>11、ctrl+shift+v 保持缩进粘贴<br>12、Ctrl+] 增加缩进 [ 减小缩进。<br>13、Alt+. 闭合标签<br>14、Alt+&gt; 闭合标签<br>15、Ctrl+? 注释一行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端工具sublime的使用技巧，从慕课中总结而来&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端工具" scheme="https://sollylee.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sollylee.github.io/2018/01/27/hello-world/"/>
    <id>https://sollylee.github.io/2018/01/27/hello-world/</id>
    <published>2018-01-27T11:56:45.915Z</published>
    <updated>2018-01-28T01:35:53.986Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
