<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LISILE&#39;s Notes</title>
  
  
  <link href="/sollylee.github.io/atom.xml" rel="self"/>
  
  <link href="https://sollylee.github.io/"/>
  <updated>2018-08-02T07:37:53.944Z</updated>
  <id>https://sollylee.github.io/</id>
  
  <author>
    <name>Solly Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习(二)</title>
    <link href="https://sollylee.github.io/2018/08/02/Python%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>https://sollylee.github.io/2018/08/02/Python学习二/</id>
    <published>2018-08-02T03:25:13.000Z</published>
    <updated>2018-08-02T07:37:53.944Z</updated>
    
    <content type="html"><![CDATA[<p>Python常用函数<br><a id="more"></a></p><h1 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h1><pre><code>int(x [,base])        将x转换为一个整数float(x)             将x转换到一个浮点数complex(real [,imag])     创建一个复数str(x)                     将对象 x 转换为字符串repr(x)                 将对象 x 转换为表达式字符串eval(str)         用来计算在字符串中的有效Python表达式,                并返回一个对象eval(expression[, globals[, locals]])    expression: 表达式    globals - 变量作用域, 全局命名空间, 必须为字典对象    locals - 变量作用域, 局部命名空间, 可以是任何映射对象tuple(s)         将序列 s 转换为一个元组list(s)         将序列 s 转换为一个列表set(s)             转换为可变集合dict(d)         创建一个字典,                d必须是一个序列(key,value)元组frozenset(s)     转换为不可变集合chr(x)             将一个整数转换为一个字符ord(x)             将一个字符转换为它的整数值hex(x)             将一个整数转换为一个十六进制字符串oct(x)             将一个整数转换为一个八进制字符串</code></pre><h1 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h1><pre><code>abs(x)             返回数字的绝对值，如abs(-10)返回10ceil(x)         返回数字的上入整数，                如math.ceil(4.1)返回5exp(x)             返回e的x次幂(ex),                如math.exp(1) 返回2.718281828459045fabs(x)         返回数字的绝对值，                如math.fabs(-10) 返回10.0floor(x)         返回数字的下舍整数，                如math.floor(4.9)返回 4log(x)             如math.log(math.e)返回1.0,                math.log(100,10)返回2.0log10(x)         返回以10为基数的x的对数，                如math.log10(100)返回 2.0max(x1, x2,...)     返回给定参数的最大值，                    参数可以为序列。min(x1, x2,...)     返回给定参数的最小值，                    参数可以为序列。modf(x)             返回x的整数部分与小数部分，                    两部分的数值符号与x相同，                    整数部分以浮点型表示。pow(x, y)            返回x**y 运算后的值。round(x [,n])         返回浮点数x的四舍五入值,如给出n值                    则代表舍入到小数点后的位数。sqrt(x)             返回数字x的平方根。</code></pre><h1 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h1><p>使用随机函数时, 要导入random模块<br>然后通过random静态对象调用该方法</p><pre><code>choice(seq)     从序列的元素中随机挑选一个元素                比如random.choice(range(10))，                从0到9中随机挑选一个整数。randrange ([start,] stop [,step]) 从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1random()         随机生成下一个实数，它在[0,1)范围内seed([x])         改变随机数生成器的种子seed。shuffle(lst)     将序列的所有元素随机排序uniform(x, y)    随机生成下一个实数，它在[x,y]范围内</code></pre><h1 id="Python-的字符串内建函数-一"><a href="#Python-的字符串内建函数-一" class="headerlink" title="Python 的字符串内建函数(一)"></a>Python 的字符串内建函数(一)</h1><p>Python 的字符串常用内建函数如下：</p><h2 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize()"></a>capitalize()</h2><p>将字符串的第一个字符转换为大写</p><h2 id="center-width-fillchar"><a href="#center-width-fillchar" class="headerlink" title="center(width, fillchar)"></a>center(width, fillchar)</h2><p>返回一个指定的宽度 width 居中的字符串，<br>fillchar 为填充的字符，默认为空格。</p><h2 id="count-str-beg-0-end-len-string"><a href="#count-str-beg-0-end-len-string" class="headerlink" title="count(str, beg= 0,end=len(string))"></a>count(str, beg= 0,end=len(string))</h2><p>返回 str 在 string 里面出现的次数，<br>如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</p><h2 id="bytes-decode-encoding-”utf-8”-errors-”strict”"><a href="#bytes-decode-encoding-”utf-8”-errors-”strict”" class="headerlink" title="bytes.decode(encoding=”utf-8”, errors=”strict”)"></a>bytes.decode(encoding=”utf-8”, errors=”strict”)</h2><p>Python3 中没有 decode 方法，<br>但我们可以使用 bytes 对象的 decode() 方法<br>来解码给定的 bytes 对象，<br>这个 bytes 对象可以由 str.encode() 来编码返回。</p><h2 id="encode-encoding-’UTF-8’-errors-’strict’"><a href="#encode-encoding-’UTF-8’-errors-’strict’" class="headerlink" title="encode(encoding=’UTF-8’,errors=’strict’)"></a>encode(encoding=’UTF-8’,errors=’strict’)</h2><p>以 encoding 指定的编码格式编码字符串，<br>如果出错默认报一个ValueError 的异常，<br>除非 errors 指定的是’ignore’或者’replace’</p><h2 id="endswith-suffix-beg-0-end-len-string"><a href="#endswith-suffix-beg-0-end-len-string" class="headerlink" title="endswith(suffix, beg=0, end=len(string))"></a>endswith(suffix, beg=0, end=len(string))</h2><p>检查字符串是否以 obj 结束，<br>如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束<br>如果是，返回 True,否则返回 False.</p><h2 id="expandtabs-tabsize-8"><a href="#expandtabs-tabsize-8" class="headerlink" title="expandtabs(tabsize=8)"></a>expandtabs(tabsize=8)</h2><p>把字符串 string 中的 tab 符号转为空格，<br>tab 符号默认的空格数是 8 </p><h2 id="find-str-beg-0-end-len-string"><a href="#find-str-beg-0-end-len-string" class="headerlink" title="find(str, beg=0 end=len(string))"></a>find(str, beg=0 end=len(string))</h2><p>检测 str 是否包含在字符串中，<br>如果指定范围 beg 和 end ，则检查是否包含在指定范围内<br>如果包含返回开始的索引值，否则返回-1</p><h2 id="index-str-beg-0-end-len-string"><a href="#index-str-beg-0-end-len-string" class="headerlink" title="index(str, beg=0, end=len(string))"></a>index(str, beg=0, end=len(string))</h2><p>跟find()方法一样，只不过如果str不在字符串中会报一个异常.</p><h2 id="isalnum"><a href="#isalnum" class="headerlink" title="isalnum()"></a>isalnum()</h2><p>如果字符串至少有一个字符并且所有字符都是字母或数字<br>则返 回 True,否则返回 False</p><h2 id="isalpha"><a href="#isalpha" class="headerlink" title="isalpha()"></a>isalpha()</h2><p>如果字符串至少有一个字符并且所有字符都是字母则返回 True,<br>否则返回 False</p><h2 id="isdigit"><a href="#isdigit" class="headerlink" title="isdigit()"></a>isdigit()</h2><p>如果字符串只包含数字则返回 True 否则返回 False..</p><h2 id="islower"><a href="#islower" class="headerlink" title="islower()"></a>islower()</h2><p>如果字符串中包含至少一个区分大小写的字符，<br>并且所有这些(区分大小写的)字符都是小写，<br>则返回 True，否则返回 False</p><h2 id="isnumeric"><a href="#isnumeric" class="headerlink" title="isnumeric()"></a>isnumeric()</h2><p>如果字符串中只包含数字字符，则返回 True，否则返回 False</p><h2 id="isspace"><a href="#isspace" class="headerlink" title="isspace()"></a>isspace()</h2><p>如果字符串中只包含空白，则返回 True，否则返回 False.</p><h1 id="Python-的字符串内建函数-二"><a href="#Python-的字符串内建函数-二" class="headerlink" title="Python 的字符串内建函数(二)"></a>Python 的字符串内建函数(二)</h1><h2 id="istitle"><a href="#istitle" class="headerlink" title="istitle()"></a>istitle()</h2><p>如果字符串是标题化的(见 title())则返回True,否则返回False</p><h2 id="isupper"><a href="#isupper" class="headerlink" title="isupper()"></a>isupper()</h2><p>如果字符串中包含至少一个区分大小写的字符，<br>并且所有这些(区分大小写的)字符都是大写，<br>则返回 True，否则返回 False</p><h2 id="join-seq"><a href="#join-seq" class="headerlink" title="join(seq)"></a>join(seq)</h2><p>以指定字符串作为分隔符，<br>将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</p><h2 id="len-string"><a href="#len-string" class="headerlink" title="len(string)"></a>len(string)</h2><p>返回字符串长度</p><h2 id="ljust-width-fillchar"><a href="#ljust-width-fillchar" class="headerlink" title="ljust(width[, fillchar])"></a>ljust(width[, fillchar])</h2><p>返回一个原字符串左对齐,<br>并使用 fillchar 填充至长度 width 的新字符串，<br>fillchar 默认为空格。</p><h2 id="lower"><a href="#lower" class="headerlink" title="lower()"></a>lower()</h2><p>转换字符串中所有大写字符为小写.</p><h2 id="lstrip"><a href="#lstrip" class="headerlink" title="lstrip()"></a>lstrip()</h2><p>截掉字符串左边的空格或指定字符。</p><h2 id="maketrans"><a href="#maketrans" class="headerlink" title="maketrans()"></a>maketrans()</h2><p>创建字符映射的转换表，对于接受两个参数的最简单的调用方式<br>第一个参数是字符串，表示需要转换的字符，<br>第二个参数也是字符串表示转换的目标。</p><h2 id="max-str"><a href="#max-str" class="headerlink" title="max(str)"></a>max(str)</h2><p>返回字符串 str 中最大的字母。</p><h2 id="min-str"><a href="#min-str" class="headerlink" title="min(str)"></a>min(str)</h2><p>回字符串 str 中最小的字母。</p><h2 id="replace-old-new-max"><a href="#replace-old-new-max" class="headerlink" title="replace(old, new [, max])"></a>replace(old, new [, max])</h2><p>把 将字符串中的 str1 替换成 str2,如果 max 指定，<br>则替换不超过 max 次。</p><h2 id="rfind-str-beg-0-end-len-string"><a href="#rfind-str-beg-0-end-len-string" class="headerlink" title="rfind(str, beg=0,end=len(string))"></a>rfind(str, beg=0,end=len(string))</h2><p>类似于 find()函数，不过是从右边开始查找.</p><h2 id="rindex-str-beg-0-end-len-string"><a href="#rindex-str-beg-0-end-len-string" class="headerlink" title="rindex( str, beg=0, end=len(string))"></a>rindex( str, beg=0, end=len(string))</h2><p>类似于 index()，不过是从右边开始.</p><h2 id="rjust-width-fillchar"><a href="#rjust-width-fillchar" class="headerlink" title="rjust(width,[, fillchar])"></a>rjust(width,[, fillchar])</h2><p>返回一个原字符串右对齐,并使用fillchar(默认空格）<br>填充至长度 width 的新字符串</p><h2 id="rstrip"><a href="#rstrip" class="headerlink" title="rstrip()"></a>rstrip()</h2><p>删除字符串字符串末尾的空格.</p><h1 id="Python-的字符串内建函数-三"><a href="#Python-的字符串内建函数-三" class="headerlink" title="Python 的字符串内建函数(三)"></a>Python 的字符串内建函数(三)</h1><h2 id="split-str-””-num-string-count-str"><a href="#split-str-””-num-string-count-str" class="headerlink" title="split(str=””, num=string.count(str))"></a>split(str=””, num=string.count(str))</h2><p>num=string.count(str)) 以 str 为分隔符截取字符串，<br>如果 num 有指定值，则仅截取 num 个子字符串</p><h2 id="splitlines-keepends"><a href="#splitlines-keepends" class="headerlink" title="splitlines([keepends])"></a>splitlines([keepends])</h2><p>按照行(‘\r’, ‘\r\n’, \n’)分隔，<br>返回一个包含各行作为元素的列表<br>如果参数 keepends 为 False，不包含换行符，<br>如果为 True，则保留换行符。</p><h2 id="startswith-str-beg-0-end-len-string"><a href="#startswith-str-beg-0-end-len-string" class="headerlink" title="startswith(str, beg=0,end=len(string))"></a>startswith(str, beg=0,end=len(string))</h2><p>检查字符串是否是以 obj 开头，是则返回 True，<br>否则返回 False<br>如果beg 和 end 指定值，则在指定范围内检查</p><h2 id="strip-chars"><a href="#strip-chars" class="headerlink" title="strip([chars])"></a>strip([chars])</h2><p>在字符串上执行 lstrip()和 rstrip()</p><h2 id="swapcase"><a href="#swapcase" class="headerlink" title="swapcase()"></a>swapcase()</h2><p>将字符串中大写转换为小写，小写转换为大写</p><h2 id="title"><a href="#title" class="headerlink" title="title()"></a>title()</h2><p>返回”标题化”的字符串,就是说所有单词都是以大写开始，<br>其余字母均为小写(见 istitle())</p><h2 id="translate-table-deletechars-””"><a href="#translate-table-deletechars-””" class="headerlink" title="translate(table, deletechars=””)"></a>translate(table, deletechars=””)</h2><p>根据 str 给出的表(包含 256 个字符)转换 string 的字符,<br>要过滤掉的字符放到 deletechars 参数中</p><h2 id="upper"><a href="#upper" class="headerlink" title="upper()"></a>upper()</h2><p>转换字符串中的小写字母为大写</p><h2 id="zfill-width"><a href="#zfill-width" class="headerlink" title="zfill (width)"></a>zfill (width)</h2><p>返回长度为 width 的字符串，原字符串右对齐，前面填充0</p><h2 id="isdecimal"><a href="#isdecimal" class="headerlink" title="isdecimal()"></a>isdecimal()</h2><p>检查字符串是否只包含十进制字符，<br>如果是返回 true，否则返回 false</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python常用函数&lt;br&gt;
    
    </summary>
    
      <category term="后端/机器学习" scheme="https://sollylee.github.io/categories/%E5%90%8E%E7%AB%AF-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://sollylee.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JQ基础学习(四)</title>
    <link href="https://sollylee.github.io/2018/08/01/JQ%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E5%9B%9B/"/>
    <id>https://sollylee.github.io/2018/08/01/JQ基础学习四/</id>
    <published>2018-08-01T02:26:48.000Z</published>
    <updated>2018-08-02T07:17:18.986Z</updated>
    
    <content type="html"><![CDATA[<p>JQ动画<br><a id="more"></a></p><h1 id="隐藏与显示"><a href="#隐藏与显示" class="headerlink" title="隐藏与显示"></a>隐藏与显示</h1><h2 id="hide"><a href="#hide" class="headerlink" title="hide()"></a>hide()</h2><p>隐藏元素</p><pre><code>$elem.hide()</code></pre><p>提供参数：</p><pre><code>.hide( options )</code></pre><p>当提供hide方法一个参数时，.hide()就会成为一个动画方法<br>.hide()方法将会匹配元素的宽度,高度,以及不透明度,同时进行动画操作</p><p>快捷参数：</p><pre><code>.hide(&quot;fast / slow&quot;)</code></pre><p>这是一个动画设置的快捷方式,’fast’ 和 ‘slow’<br>分别代表200和600毫秒的延时,就是元素会执行200/600毫秒的动画后再隐藏</p><p>注意：<br>jQuery在做hide操作的时候，是会保存本身的元素的原始属性值,<br>再之后通过对应的方法还原的时候还是初始值。</p><p>比如:<br>一个元素的display属性值为inline，<br>那么隐藏再显示时这个元素将再次显示inline。<br>一旦透明度达到0，display样式属性将被设置为none<br>这个元素将不再在页面中影响布局</p><h2 id="show"><a href="#show" class="headerlink" title="show()"></a>show()</h2><p>方法的使用几乎与hide是一致的，hide是让元素显示到隐藏.<br>show则是相反，让元素从隐藏到显示</p><p>注意事项：</p><p>1.show与hide方法是修改的display属性，<br>  通过是visibility属性布局需要通过css方法单独设置</p><p>2.如果使用!important在你的样式中，<br>  比如display: none !important，如果你希望.show()方法正常工作，<br>  必须使用.css(‘display’, ‘block !important’)重写样式</p><p>3.如果让show与hide成为一个动画，<br>  那么默认执行动画会改变元素的宽度，高度，透明度</p><h2 id="toggle"><a href="#toggle" class="headerlink" title="toggle()"></a>toggle()</h2><p>元素显示与隐藏切换</p><p>基本的操作：</p><pre><code>toggle();</code></pre><p>这是最基本的操作,处理元素显示或者隐藏,因为不带参数,所以没有动画<br>通过改变CSS的display属性,匹配的元素将被立即显示或隐藏,没有动画</p><pre><code>1.如果元素是最初显示，它会被隐藏2.如果隐藏的，它会显示出来</code></pre><p>display属性将被储存并且需要的时候可以恢复。<br>如果一个元素的display值为inline，然后是隐藏和显示，<br>这个元素将再次显示inline</p><p>提供参数：</p><pre><code>.toggle( [duration ] [, complete ] )</code></pre><p>同样的提供了时间、还有动画结束的回调。<br>在参数对应的时间内元素会发生显示/隐藏的改变<br>在改变的过程中会把元素的高、宽、不透明度进行一系列动画效果。<br>这个元素其实就是show与hide的方法</p><p>直接定位：</p><pre><code>.toggle(display)</code></pre><p>直接提供一个参数，指定要改变的元素的最终效果<br>其实就是确定是使用show还是hide方法</p><h2 id="slideDown"><a href="#slideDown" class="headerlink" title="slideDown()"></a>slideDown()</h2><p>下拉动画</p><pre><code>.slideDown()     用滑动动画显示一个匹配元素</code></pre><p>.slideDown()方法将给匹配元素的高度的动画，<br>这会导致页面的下面部分滑下去，弥补了显示的方式</p><p>常见的操作，提供一个动画是时间，然后传递一个回调，<br>用于知道动画是什么时候结束</p><pre><code>.slideDown( [duration ] [, complete ] )</code></pre><p>持续时间(duration)是以毫秒为单位的,数值越大,动画越慢,不是越快。<br>字符串’fast’和’slow’分别代表200和600毫秒的延时。<br>如果提供任何其他字符串，或者这个duration参数被省略<br>那么默认使用400 毫秒的延时。</p><p>注意事项：</p><p>1.下拉动画是从无到有，所以一开始元素是需要先隐藏起来的，<br>  可以设置display:none</p><p>2.如果提供回调函数参数,callback会在动画完成的时候调用。<br>将不同的动画串联在一起按顺序排列执行是非常有用的。<br>这个回调函数不设置任何参数,但是 this会设成将要执行动画的那个DOM元素<br>如果多个元素一起做动画效果,那么要非常注意,<br>回调函数会在每一个元素执行完动画后都执行一次,<br>而不是这组动画整体才执行一次</p><h1 id="上卷与下拉"><a href="#上卷与下拉" class="headerlink" title="上卷与下拉"></a>上卷与下拉</h1><h2 id="slideUp"><a href="#slideUp" class="headerlink" title="slideUp()"></a>slideUp()</h2><p>上卷动画</p><p>最简单的使用：不带参数</p><pre><code>$(&quot;elem&quot;).slideUp();</code></pre><p>含义：</p><p>找到元素的高度，然后采用一个下滑动画让元素一直滑到隐藏，<br>当高度为0的时候，也就是不可见的时，<br>修改元素display样式属性被设置为none。<br>这样就能确保这个元素不会影响页面布局了</p><p>带参数：</p><pre><code>.slideUp( [duration ] [, easing ] [, complete ] )</code></pre><p>同样可以提供一个时间，然后可以使用一种过渡使用哪种缓动函数，<br>jQuery默认就2种，可以通过下载插件支持。最后一个动画结束的回调方法。</p><p>注意:<br>因为动画是异步的<br>所以要在动画之后执行某些操作就必须要写到回调函数里面</p><h2 id="slideToggle"><a href="#slideToggle" class="headerlink" title="slideToggle()"></a>slideToggle()</h2><p>上卷下拉动画切换</p><p>基本的操作：</p><pre><code>slideToggle();</code></pre><p>这是最基本的操作，获取元素的高度，使这个元素的高度发生改变<br>从而让元素里的内容往下或往上滑。</p><p>提供参数：</p><pre><code>.slideToggle( [duration ] ,[ complete ] )</code></pre><p>同样的提供了时间、还有动画结束的回调。<br>在参数对应的时间内，元素会完成动画，然后出发回调函数</p><p>注意：<br>1.display属性值保存在jQuery的数据缓存中，<br>所以display可以方便以后可以恢复到其初始值</p><p>2.当一个隐藏动画后，高度值达到0的时候，display<br>样式属性被设置为none，以确保该元素不再影响页面布局</p><h1 id="淡入与淡出"><a href="#淡入与淡出" class="headerlink" title="淡入与淡出"></a>淡入与淡出</h1><h2 id="fadeOut"><a href="#fadeOut" class="headerlink" title="fadeOut()"></a>fadeOut()</h2><p>fadeOut()函数用于隐藏所有匹配的元素,并带有淡出的过渡动画效果<br>所谓”淡出”隐藏的<br>元素是隐藏状态不对作任何改变,元素是可见的,则将其隐藏。</p><pre><code>.fadeOut( [duration ], [ complete ] )</code></pre><p>通过不透明度的变化来实现所有匹配元素的淡出效果，<br>并在动画完成后可选地触发一个回调函数。<br>这个动画只调整元素的不透明度，<br>也就是说所有匹配的元素的高度和宽度不会发生变化。</p><h2 id="fadeIn"><a href="#fadeIn" class="headerlink" title="fadeIn()"></a>fadeIn()</h2><p>淡入动画</p><p>方法使用与fadeout()是一致的，只是结果相反</p><pre><code>.fadeIn( [duration ], [ complete ] )</code></pre><p>duration：指定过渡动画运行多长时间(毫秒数)，默认值为400<br>该参数也可以为字符串”fast”(=200)或”slow”(=600)<br>元素显示完毕后需要执行的函数。函数内的this指向当前DOM元素</p><p>fadeIn()函数用于显示所有匹配的元素，并带有淡入的过渡动画效果</p><p>注意：</p><p>1.淡入的动画原理：操作元素的不透明度从0%逐渐增加到100%</p><p>2.如果元素本身是可见的,不对其作任何改变<br>  如果元素是隐藏的,则使其可见</p><p>3.fadeIn：淡入效果，内容显示，opacity是0到1<br>  fadeOut：淡出效果，内容隐藏，opacity是1到0</p><h2 id="fadeToggle"><a href="#fadeToggle" class="headerlink" title="fadeToggle()"></a>fadeToggle()</h2><p>淡入淡出切换<br>adeToggle()函数用于切换所有匹配的元素<br>并带有淡入/淡出的过渡动画效果</p><p>fadeToggle切换fadeOut与fadeIn效果</p><p>即:<br>如果元素当前是可见的，则将其隐藏(淡出)<br>如果元素当前是隐藏的，则使其显示(淡入)</p><p>常用语法：</p><pre><code>.fadeToggle( [duration ] ,[ complete ] )</code></pre><p>可选的duration参数规定效果的时长。<br>它可以取以下值：”slow”、”fast” 或毫秒<br>可选的 callback 参数是 fadeToggle完成后所执行的函数名称</p><h2 id="fadeTo"><a href="#fadeTo" class="headerlink" title="fadeTo()"></a>fadeTo()</h2><p>淡入效果</p><p>语法:<br>    .fadeTo( duration, opacity ,callback)</p><p>必需的 duration参数规定效果的时长。<br>它可以取以下值：”slow”、”fast” 或毫秒。<br>fadeTo() 方法中必需的 opacity 参数<br>将淡入淡出效果设置为给定的不透明度(值介于 0 与 1 之间)<br>可选的 callback 参数是该函数完成后所执行的函数名称。</p><h2 id="toggle与slideToggle以及fadeToggle的比较"><a href="#toggle与slideToggle以及fadeToggle的比较" class="headerlink" title="toggle与slideToggle以及fadeToggle的比较"></a>toggle与slideToggle以及fadeToggle的比较</h2><p>toggle与slideToggle细节区别：</p><pre><code>toggle：动态效果为从右至左。横向动作，toggle通过display来判断切换所有匹配元素的可见性slideToggle：动态效果从下至上。竖向动作，slideToggle 通过高度变化来切换所有匹配元素的可见性</code></pre><p>fadeToggle方法:</p><pre><code>1.fadeToggle()方法在fadeIn()和fadeOut()方法之间切换2.元素是淡出显示的,fadeToggle()会使用淡入效果显示它们3.元素是淡入显示的,fadeToggle()会使用淡出效果显示它们4.注释：隐藏的元素不会被完全显示(不再影响页面的布局)</code></pre><h1 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h1><h2 id="animate"><a href="#animate" class="headerlink" title="animate()"></a>animate()</h2><p>精确的控制样式属性从而执行动画</p><p>语法：</p><pre><code>.animate( properties ,[ duration ],         [ easing ], [ complete ] ).animate( properties, options )</code></pre><p>参数分解：</p><p>1.properties：</p><p>(1)一个或多个css属性的键值对所构成的Object对象。<br>要特别注意所有用于动画的属性必须是数字的，除非另有说明；<br>这些属性如果不是数字的将不能使用基本的jQuery功能。<br>比如常见的，border、margin、padding、width、height<br>font、left、top、right、bottom、wordSpacing等等<br>这些都是能产生动画效果的。</p><p>(2)如background-color是不可以,因为参数是red或者GBG这样的值<br>除非用插件，否则正常情况下是不能只用动画效果的。<br>注意，CSS 样式使用 DOM 名称（比如 “fontSize”）来设置,<br>而非 CSS 名称(比如 “font-size”)</p><p>(3)特别注意单位，属性值的单位像素（px）,除非另有说明。<br>单位em 和 %需要指定使用</p><p>(4)除了定义数值，每个属性能使用’show’, ‘hide’, 和’toggle’<br>这些快捷方式允许定制隐藏和显示动画用来控制元素的显示或隐藏</p><pre><code>.animate({    width: &quot;toggle&quot;});</code></pre><p>(5)如果提供一个以+= 或 -=开始的值,那么目标值就是<br>以这个属性的当前值加上或者减去给定的数字来计算的</p><p>2.duration:设置动画执行的时间<br>3.easing:规定要使用的 easing 函数，过渡使用哪种缓动函数<br>4.step:规定每个动画的每一步完成之后要执行的函数<br>5.progress:每一次动画调用的时候会执行这个回调,就是一个进度的概念<br>6.complete:动画完成回调</p><p>注意:<br>如果多个元素执行动画，回调将在每个匹配的元素上执行一次,<br>不是作为整个动画执行一次</p><h2 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h2><p>当一个元素调用.stop()方法，当前正在运行的动画立即停止</p><p>语法：<br>    .stop( [clearQueue ], [ jumpToEnd ] )<br>    .stop( [queue ], [ clearQueue ],[jumpToEnd])</p><p>stop还有几个可选的参数，简单来说可以这3种情况:</p><p>(1).stop(); 停止当前动画，点击在暂停处继续开始</p><p>(2).stop(true);<br>如果同一元素调用多个动画方法，<br>尚未被执行的动画被放置在元素的效果队列中。<br>这些动画不会开始，直到第一个完成。<br>当调用.stop()的时候，队列中的下一个动画立即开始<br>如果clearQueue参数提供true值,<br>那么在队列中的动画其余被删除并永远不会运行</p><p>(3).stop(true,true); 当前动画将停止,<br>但该元素上的 CSS 属性会被立刻修改成动画的目标值</p><h2 id="inArray"><a href="#inArray" class="headerlink" title="inArray()"></a>inArray()</h2><p>查找数组中的索引,判断元素是否存在数组中</p><p>语法：</p><pre><code>jQuery.inArray( value, array ,[ fromIndex ] )</code></pre><p>传递一个检测的目标值，然后传递原始的数组<br>可以通过fromIndex规定查找的起始值，默认数组是0开始</p><p>注意：</p><p>如果要判断数组中是否存在指定值，<br>你需要通过该函数的返回值不等于(或大于)-1来进行判断</p><h2 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h2><p>jQuery.trim()函数用于去除字符串两端的空白字符</p><p>需要注意：<br>移除字符串开始和结尾处的所有换行符,<br>空格(包括连续的空格)和制表符（tab）<br>如果这些空白字符在字符串中间时,它们将被保留,不会被移除</p><h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><p>jQ是一个合集对象,如果需要单独操作合集中的的某一个元素<br>可以通过.get()方法获取到.</p><p>语法：</p><pre><code>.get( [index ] )</code></pre><p>注意:<br>1.get方法是获取的dom对象<br>  也就是通过document.getElementById获取的对象</p><p>2.get方法是从0开始索引</p><p>负索引值参数:<br>get方法还可以从后往前索引，传递一个负索引值<br>注意的负值的索引起始值是-1</p><h2 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h2><p>从匹配的元素中搜索给定元素的索引值，从0开始计数.</p><p>语法：参数接受一个jQuery或者dom对象作为查找的条件</p><pre><code>.index().index( selector ).index( element )</code></pre><p>注意:</p><p>1.如果不传递任何参数给 .index() 方法，<br>则返回值就是jQuery对象中第一个元素相对于它同辈元素的位置</p><p>2.如果在一组元素上调用 .index()<br>并且参数是一个DOM元素或jQuery对象<br>.index() 返回值就是传入的元素相对于原先集合的位置</p><p>3.如果参数是一个选择器，<br>.index()返回值就是原先元素相对于选择器匹配元素的位置。<br>如果找不到匹配的元素，则 .index() 返回 -1</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQ动画&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JQ" scheme="https://sollylee.github.io/tags/JQ/"/>
    
  </entry>
  
  <entry>
    <title>JQ基础学习(三)</title>
    <link href="https://sollylee.github.io/2018/07/31/JQ%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%89/"/>
    <id>https://sollylee.github.io/2018/07/31/JQ基础学习三/</id>
    <published>2018-07-31T00:03:54.000Z</published>
    <updated>2018-08-02T07:29:23.554Z</updated>
    
    <content type="html"><![CDATA[<p>JQ事件<br><a id="more"></a></p><h1 id="JQ鼠标事件"><a href="#JQ鼠标事件" class="headerlink" title="JQ鼠标事件"></a>JQ鼠标事件</h1><h2 id="click-与dbclick"><a href="#click-与dbclick" class="headerlink" title="click()与dbclick()"></a>click()与dbclick()</h2><p>监听用户的点击操作与监听用户的双击操作</p><pre><code>$ele.click() 绑定$ele元素，不带任何参数一般是用来指定触发一个事件$ele.click(handler(eventObject))绑定$ele元素,每次$ele元素触发点击操作会执行回调handler函数$ele.click([eventData ], handler(eventObject))使用与方法二一致，不过可以接受一个数据参数，这样的处理是为了解决不同作用域下数据传递的问题</code></pre><p>dblclick()的用法和click()的用法是类似的</p><p>注意：<br>在同一元素上同时绑定 click 和 dblclick 事件是不可取的。<br>各个浏览器事件触发的顺序是不同的<br>一些浏览器在dblclick之前接受两个 click 事件<br>而一些浏览器只接受一个 click事件。<br>用户往往可通过不同的操作系统和浏览器配置双击灵敏度</p><h2 id="mousedown-与mouseup"><a href="#mousedown-与mouseup" class="headerlink" title="mousedown()与mouseup()"></a>mousedown()与mouseup()</h2><p>监听用户鼠标按下的操作，与监听用户鼠标弹起的操作<br>mousedown()与mouseup()和click()的用法是类似的</p><pre><code>$ele.mousedown()$ele.mousedown(handler(eventObject))$ele.mousedown([eventData], handler(eventObject))</code></pre><p>mousedown事件触发需要以下几点：</p><pre><code>mousedown强调是按下触发如果在一个元素按住了鼠标不放并且拖动鼠标离开这个元素，并释放鼠标键这仍然是算作mousedown事件任何鼠标按钮被按下时都能触发mousedown事件用event 对象的which区别按键敲击鼠标左键which的值是1敲击鼠标中键which的值是2敲击鼠标右键which的值是3</code></pre><p>mouseup事件：</p><pre><code>mouseup强调是松手触发其他与mousedown一致</code></pre><h2 id="mousemove"><a href="#mousemove" class="headerlink" title="mousemove()"></a>mousemove()</h2><p>监听用户移动的的操作<br>mousemove()和click()的用法是类似的</p><pre><code>$ele.mousemove()$ele.mousemove(handler(eventObject))$ele.mousemove([eventData], handler(eventObject))</code></pre><p>mousemove事件触发需要以下几点：</p><p>1.mousemove事件是当鼠标指针移动时触发的，即使是一个像素</p><p>2.如果处理器做任何重大的处理，或者如果该事件存在多个处理函数，<br>这可能造成浏览器的严重的性能问题</p><h2 id="mouseover-与mouseout"><a href="#mouseover-与mouseout" class="headerlink" title="mouseover()与mouseout()"></a>mouseover()与mouseout()</h2><p>用于监听用户的移入移出操作<br>mouseover()与mouseout()和click()的用法是类似的</p><pre><code>$ele.mouseover()$ele.mouseover(handler(eventObject))$ele.mouseover([eventData], handler(eventObject))</code></pre><h2 id="mouseenter与mouseleave事件"><a href="#mouseenter与mouseleave事件" class="headerlink" title="mouseenter与mouseleave事件"></a>mouseenter与mouseleave事件</h2><p>监听用户移动到内部的操作<br>三种参数传递方式与mouseover和mouseout是一模一样的</p><p>mouseenter事件和mouseover的区别:</p><p>1.mouseenter事件只会在绑定它的元素上被调用<br>  而不会在后代节点上被触发</p><p>2.mouseover会产生事件冒泡</p><h2 id="hover"><a href="#hover" class="headerlink" title="hover()"></a>hover()</h2><p>用来给元素做一个简单的切换效果</p><pre><code>$(selector).hover(handlerIn, handlerOut)</code></pre><p>注:<br>handlerIn(eventObject):<br>当鼠标指针进入元素时触发执行的事件函数</p><p>handlerOut(eventObject):<br>当鼠标指针离开元素时触发执行的事件函数</p><p>E.g.:</p><pre><code>$(&quot;p&quot;).hover(    function() {        $(this).css(&quot;background&quot;, &apos;red&apos;);    },    function() {        $(this).css(&quot;background&quot;, &apos;#bbffaa&apos;);    });</code></pre><h2 id="focusin"><a href="#focusin" class="headerlink" title="focusin()"></a>focusin()</h2><p>捕获用户点击聚焦的动作<br>focusin()和click()的用法是类似的</p><pre><code>$ele.focusin() $ele.focusin( handler )$ele.focusin( [eventData ], handler )</code></pre><h2 id="focusout"><a href="#focusout" class="headerlink" title="focusout()"></a>focusout()</h2><p>捕获用户点击失焦的动作<br>focusout()和click()的用法是类似的</p><pre><code>$ele.focusout() $ele.focusout(handler)$ele.focusout( [eventData ], handler )</code></pre><h1 id="JQ表单事件"><a href="#JQ表单事件" class="headerlink" title="JQ表单事件"></a>JQ表单事件</h1><h2 id="blur-与focus"><a href="#blur-与focus" class="headerlink" title="blur()与focus()"></a>blur()与focus()</h2><p>用于处理表单焦点<br>blur()与focus()和focusin()与focusout()用法类似</p><p>区别:<br>focus()在元素本身产生，focusin()在元素包含的元素中产生<br>blur与focusout也亦是如此</p><h2 id="change"><a href="#change" class="headerlink" title="change()"></a>change()</h2><p>&lt; input &gt;元素,&lt; textarea &gt;和&lt; select &gt;元素的值<br>都是可以发生改变的,可以通过change事件去监听这些改变的动作</p><p>change()用法与click()用法类似</p><p>input元素:</p><pre><code>监听value值的变化，当有改变时，失去焦点后触发change事件。对于单选按钮和复选框，当用户用鼠标做出选择时，该事件立即触发</code></pre><p>select元素:</p><pre><code>对于下拉选择框，当用户用鼠标作出选择时，该事件立即触发</code></pre><p>textarea元素:</p><pre><code>多行文本输入框，当有改变时，失去焦点后触发change事件</code></pre><h2 id="select"><a href="#select" class="headerlink" title="select()"></a>select()</h2><p>当 textarea 或文本类型的 input 元素中的文本被选择时，<br>会发生 select 事件。<br>select()用法与click()用法类似</p><pre><code>$ele.select()$ele.select(handler(eventObject))$ele.select([eventData], handler(eventObject))</code></pre><p>注意:</p><p>这个函数会调用执行绑定到select事件的所有函数,包括浏览器的默认行为<br>可以通过在某个绑定的函数中返回false来防止触发浏览器的默认行为</p><p>2.select事件只能用于&lt; input &gt;元素与&lt; textarea &gt;元素</p><h2 id="submit"><a href="#submit" class="headerlink" title="submit()"></a>submit()</h2><p>通过submit事件，监听提交表单的这个动作<br>submit()用法与click()用法类似</p><pre><code>$ele.submit()$ele.submit(handler(eventObject))$ele.submit([eventData], handler(eventObject))</code></pre><p>具体能触发submit事件的行为：</p><pre><code>&lt;input type=&quot;submit&quot;&gt;&lt;input type=&quot;image&quot;&gt;&lt;button type=&quot;submit&quot;&gt;当某些表单元素获取焦点时，敲击Enter(回车键)</code></pre><p>特别注意：<br>form元素是有默认提交表单的行为，<br>如果通过submit处理的话，需要禁止浏览器的这个默认行为<br>传统的方式是调用事件对象  e.preventDefault() 来处理<br>jQuery中可以直接在函数中最后结尾return false即可</p><h1 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h1><h2 id="keydown-与keyup"><a href="#keydown-与keyup" class="headerlink" title="keydown()与keyup()"></a>keydown()与keyup()</h2><p>keydown事件:<br>当用户在一个元素上第一次按下键盘上字母键的时候，就会触发<br>用法与基本事件参数处理保持一致(与click()用法类似)</p><pre><code>$elem.keydown( handler(eventObject) )$elem.keydown( [eventData ], handler(eventObject) )$elem.keydown()</code></pre><p>keyup事件：<br>当用户在一个元素上第一次松手键盘上的键的时候，就会触发它<br>使用方法与keydown是一致的只是触发的条件是相反的</p><p>注意：</p><pre><code>keydown是在键盘按下就会触发keyup是在键盘松手就会触发理论上它可以绑定到任何元素但keydown/keyup事件只是发送到具有焦点的元素上不同的浏览器中，可获得焦点的元素略有不同但是表单元素总是能获取焦点所以对于此事件类型表单元素是最合适的keydown事件触发在文字还没敲进文本框，这时如果在keydown事件中输出文本框中的文本，得到的是触发键盘事件前的文本而keyup事件触发时整个键盘事件的操作已经完成获得的是触发键盘事件后的文本</code></pre><h2 id="keypress"><a href="#keypress" class="headerlink" title="keypress()"></a>keypress()</h2><p>捕获键盘输入<br>用法与keydown()非常相似</p><p>keypress事件与keydown和keyup的主要区别:</p><p>1.只能捕获单个字符，不能捕获组合键<br>2.无法响应系统功能键（如delete，backspace）<br>3.不区分小键盘和主键盘的数字字符</p><p>KeyPress主要用来接收字母、数字等ANSI字符，<br>而KeyDown和KeyUP事件过程可以处理任何不被KeyPress识别的击键</p><p>诸如：功能键（F1-F12）、编辑键、定位键<br>    以及任何这些键和键盘换档键的组合等</p><h1 id="事件的绑定与解绑"><a href="#事件的绑定与解绑" class="headerlink" title="事件的绑定与解绑"></a>事件的绑定与解绑</h1><h2 id="on"><a href="#on" class="headerlink" title="on()"></a>on()</h2><p>用于给元素绑定事件</p><p>基本用法：</p><pre><code>.on( events ,[ selector ] ,[ data ] )</code></pre><p>多个事件绑定同一个函数</p><pre><code>$(&quot;#elem&quot;).on(&quot;mouseover mouseout&quot;,function(){ });</code></pre><p>多个事件绑定不同函数</p><pre><code>$(&quot;#elem&quot;).on({    mouseover:function(){},      mouseout:function(){}});</code></pre><p>将数据传递到处理程序:</p><pre><code>function greet( event ) {  alert( &quot;Hello &quot; + event.data.name );}$( &quot;button&quot; ).on( &quot;click&quot;, {  name: &quot;World&quot;}, greet );</code></pre><h2 id="on-的高级用法"><a href="#on-的高级用法" class="headerlink" title="on()的高级用法"></a>on()的高级用法</h2><p>委托机制:</p><pre><code>.on( events ,[ selector ] ,[ data ],     handler(eventObject) )</code></pre><p>E.g:</p><pre><code>&lt;div class=&quot;left&quot;&gt;    &lt;p class=&quot;aaron&quot;&gt;        &lt;a&gt;目标节点&lt;/a&gt; //点击在这个元素上    &lt;/p&gt;&lt;/div&gt;给出如下代码：    $(&quot;div&quot;).on(&quot;click&quot;,&quot;p&quot;,fn)事件绑定在最上层div元素上，当用户触发在a元素上事件将往上冒泡，一直会冒泡在div元素上。如果提供了第二参数那么事件在往上冒泡的过程中遇到了选择器匹配的元素，将会触发事件回调函数</code></pre><h2 id="off-方法"><a href="#off-方法" class="headerlink" title="off()方法"></a>off()方法</h2><p>通过.on()绑定的事件处理程序,可以通过off() 方法移除该绑定</p><p>根据on绑定事件的一些特性,off方法也可以通过相应的传递组合的事件名,<br>名字空间,选择器或处理函数来移除绑定在元素上指定的事件处理函数<br>当有多个过滤参数时,只有与这些参数完全匹配的事件处理函数才会被移除</p><p>E.g.:</p><p>绑定2个事件:</p><pre><code>$(&quot;elem&quot;).on(&quot;mousedown mouseup&quot;,fn)</code></pre><p>删除一个事件:</p><pre><code>$(&quot;elem&quot;).off(&quot;mousedown&quot;)</code></pre><p>删除所有事件:</p><pre><code>$(&quot;elem&quot;).off(&quot;mousedown mouseup&quot;)$(&quot;elem&quot;).off()</code></pre><h1 id="事件对象的使用"><a href="#事件对象的使用" class="headerlink" title="事件对象的使用"></a>事件对象的使用</h1><h2 id="事件对象的作用"><a href="#事件对象的作用" class="headerlink" title="事件对象的作用"></a>事件对象的作用</h2><p>jQuery事件回调方法中获取到的事件对象<br>是经过兼容后处理过的一个标准的跨浏览器对象</p><p>事件对象是用来记录一些事件发生时的相关信息的对象。<br>事件对象只有事件发生时才会产生，并且只能是事件处理函数内部访问<br>在所有事件处理函数运行结束后，事件对象就被销毁</p><p>event.target</p><p>target 属性可以是注册事件时的元素，或者它的子元素<br>通常用于比较event.target和this<br>来确定事件是不是由于冒泡而触发的<br>也常用于事件冒泡时处理事件委托</p><p>简单来说：<br>event.target代表当前触发事件的元素，<br>可以通过当前元素对象的一系列属性来判断是不是我们想要的元素</p><h2 id="对象的属性和方法"><a href="#对象的属性和方法" class="headerlink" title="对象的属性和方法"></a>对象的属性和方法</h2><pre><code>event.type                     获取事件的类型event.pageX和event.pageY       获取鼠标当前相对于页面的坐标event.preventDefault()         阻止默认行为event.stopPropagation()     阻止事件冒泡event.which        获取在鼠标单击时,单击的是鼠标的哪个键event.currentTarget     在事件冒泡过程中的当前DOM元素</code></pre><p>this和event.target的区别：</p><p>js中事件是会冒泡的，所以this是可以变化的<br>但event.target不会变化，它永远是直接接受事件的目标DOM元素;</p><p>.this和event.target都是dom对象<br>如果要使用jquey中的方法可以将他们转换为jquery对象</p><h1 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h1><h2 id="trigger事件"><a href="#trigger事件" class="headerlink" title="trigger事件"></a>trigger事件</h2><p>原生事件:</p><p>由浏览器提供的叫原生事件<br>这类事件是需要有交互行为才能被触发</p><p>自定义事件trigger:</p><p>根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为</p><p>trigger除了能够触发浏览器事件，<br>同时还支持自定义事件，并且自定义时间还支持传递参数</p><p>E.g.:</p><pre><code>$(&apos;#elem&apos;).on(&apos;Aaron&apos;, function(event,arg1,arg2){    alert(&quot;自触自定义时间&quot;) });$(&apos;#elem&apos;).trigger(&apos;Aaron&apos;,[&apos;参数1&apos;,&apos;参数2&apos;])</code></pre><p>trigger触发浏览器事件与自定义事件区别:</p><p>1.自定义事件对象，是jQuery模拟原生实现的<br>2.自定义事件可以传递参数</p><p>trigger事件还有一个特性：会在DOM树上冒泡<br>所以如果要阻止冒泡就需要在事件处理程序中返回false<br>或调用事件对象中的.stopPropagation() 方法可以使事件停止冒泡</p><p>trigger事件是具有触发原生与自定义能力的，<br>但是存在一个不可避免的问题： 事件对象event无法完美的实现</p><h2 id="triggerHandler事件"><a href="#triggerHandler事件" class="headerlink" title="triggerHandler事件"></a>triggerHandler事件</h2><p>triggerHandler与trigger的用法是一样的，重点看不同之处：</p><pre><code>1.triggerHandler不会触发浏览器的默认行为，.triggerHandler( &quot;submit&quot; )将不会调用表单上的.submit()2..trigger() 会影响所有与jQuery对象相匹配的元素,而 .triggerHandler()仅影响第一个匹配到的元素3.使用.triggerHandler()触发的事件,并不会在DOM树中向上冒泡如果它们不是由目标元素直接触发的,那么它就不会进行任何处理4.与普通的方法返回 jQuery 对象(这样就能够使用链式用法)相反，.triggerHandler() 返回最后一个处理的事件的返回值如果没有触发任何事件，会返回 undefined</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQ事件&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JQ" scheme="https://sollylee.github.io/tags/JQ/"/>
    
  </entry>
  
  <entry>
    <title>JQ基础学习(二)</title>
    <link href="https://sollylee.github.io/2018/07/31/JQ%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>https://sollylee.github.io/2018/07/31/JQ基础学习二/</id>
    <published>2018-07-30T23:59:36.000Z</published>
    <updated>2018-08-02T07:16:22.305Z</updated>
    
    <content type="html"><![CDATA[<p>JQ DOM<br><a id="more"></a></p><h1 id="DOM的创建"><a href="#DOM的创建" class="headerlink" title="DOM的创建"></a>DOM的创建</h1><h2 id="创建元素节点"><a href="#创建元素节点" class="headerlink" title="创建元素节点"></a>创建元素节点</h2><pre><code>$(&quot;&lt;div&gt;&lt;/div&gt;&quot;)</code></pre><h2 id="创建文本节点"><a href="#创建文本节点" class="headerlink" title="创建文本节点"></a>创建文本节点</h2><pre><code>$(&quot;&lt;div&gt;我是文本&lt;/div&gt;&quot;)</code></pre><h2 id="创建为属性节点"><a href="#创建为属性节点" class="headerlink" title="创建为属性节点"></a>创建为属性节点</h2><pre><code>$(&quot;&lt;div id=&apos;test&apos; class=&apos;arron&apos;&gt;我是文本&lt;/div&gt;&quot;)</code></pre><h1 id="DOM节点的插入"><a href="#DOM节点的插入" class="headerlink" title="DOM节点的插入"></a>DOM节点的插入</h1><h2 id="内部插入"><a href="#内部插入" class="headerlink" title="内部插入"></a>内部插入</h2><pre><code>.append(content)          向每个匹配的元素内部追加内容.appendTo(content)         把所有匹配的元素追加到                        另一个指定的元素集合中.prepend(content)         向每个匹配的元素内部前置内容.prependTo(content)     把所有匹配的元素前置到另一个                        指定的元素集合中</code></pre><h2 id="外部插入"><a href="#外部插入" class="headerlink" title="外部插入"></a>外部插入</h2><pre><code>.after(content)         在匹配元素集合中的每个元素后面                    插入参数所指定的内容,作为其兄弟节点.before(content)         据参数设定,在匹配的元素前面                        插入内容</code></pre><p>支持多参数传递</p><pre><code>.insertBefore(content)     在目标元素前插入集合中                        每个匹配的元素.insertAfter(content)     在目标元素后面插入集合中                        每个匹配的元素</code></pre><h1 id="DOM节点的删除"><a href="#DOM节点的删除" class="headerlink" title="DOM节点的删除"></a>DOM节点的删除</h1><pre><code>.empty()          清空了匹配元素下所有子元素.remove()         删除自身</code></pre><p>remove()可以传递一个选择器表达式<br>用来过滤将被移除的匹配元素集合<br>可以选择性的删除指定的节点</p><pre><code>.detch()         删除自身</code></pre><p>detch()不会把匹配的元素从jQuery对象中删除，<br>因而可以在将来再使用这些匹配的元素。<br>与remove()不同的是,所有绑定的事件、附加的数据等都会保留下来</p><p>$(“div”).detach()这一句会移除对象,仅仅是显示效果没有了<br>但是内存中还是存在的当你append之后，又重新回到了文档流中。<br>就又显示出来了</p><pre><code>.unwrap()         将匹配元素集合的父级元素删除,                保留自身(和兄弟元素)在原来位置</code></pre><h1 id="DOM的复制与替换"><a href="#DOM的复制与替换" class="headerlink" title="DOM的复制与替换"></a>DOM的复制与替换</h1><h2 id="拷贝clone"><a href="#拷贝clone" class="headerlink" title="拷贝clone()"></a>拷贝clone()</h2><p>clone()方法深度 复制所有匹配的元素集合，<br>包括所有匹配元素、匹配元素的下级元素、文字节点。</p><pre><code>.clone()          只克隆了结构，事件丢失.clone(true)     结构、事件与数据都克隆</code></pre><p>注意:</p><p>1.clone()方法时，在将它插入到文档之前<br>  我们可以修改克隆后的元素或者元素内容<br>如:<br>  $(this).clone().css(‘color’,’red’) 增加了一个颜色</p><p>2.通过传递true<br>  将所有绑定在原始元素上的事件处理函数复制到克隆元素上</p><p>3.clone()方法是jQuery扩展的，<br>  只能处理通过jQuery绑定的事件与数据</p><p>4.元素数据（data）内对象和数组不会被复制<br>  将继续被克隆元素和原始元素共享深复制的所有数据<br>  需要手动复制每一个</p><h2 id="替换replaceWith-和replaceAll"><a href="#替换replaceWith-和replaceAll" class="headerlink" title="替换replaceWith()和replaceAll()"></a>替换replaceWith()和replaceAll()</h2><pre><code>.replaceWith(newContent)     用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合.replaceAll(target)    用集合的匹配元素替换每个目标元素</code></pre><p>.replaceWith()与replaceAll()<br>会删除与节点相关联的所有数据和事件处理程序</p><h2 id="包裹wrap"><a href="#包裹wrap" class="headerlink" title="包裹wrap()"></a>包裹wrap()</h2><pre><code>.wrap(wrappingElement)在集合中匹配的每个元素周围包裹一个HTML结构.wrap(function)一个回调函数,返回用于包裹匹配元素的HTML内容或jQuery对象</code></pre><h2 id="全包裹wrapAll"><a href="#全包裹wrapAll" class="headerlink" title="全包裹wrapAll()"></a>全包裹wrapAll()</h2><pre><code>.wrapAll(wrappingElement)给集合中匹配的元素增加一个外面包裹HTML结构.wrapAll(function)一个回调函数,返回用于包裹匹配元素的HTML内容或jQuery对象</code></pre><h2 id="内部包裹wrapInner"><a href="#内部包裹wrapInner" class="headerlink" title="内部包裹wrapInner()"></a>内部包裹wrapInner()</h2><pre><code>.wrapInner(wrappingElement)给集合中匹配的元素的内部,增加包裹的HTML结构.wrapInner(function)允许我们用一个callback函数做参数每次遇到匹配元素时,该函数被执行,返回一个DOM元素,jQuery对象,或者HTML片段，用来包住匹配元素的内容</code></pre><h1 id="JQ遍历"><a href="#JQ遍历" class="headerlink" title="JQ遍历"></a>JQ遍历</h1><h2 id="children"><a href="#children" class="headerlink" title="children()"></a>children()</h2><pre><code>.children(selector) 返回匹配元素集合中每个元素的所有子元素</code></pre><p>注意：<br>1.jQuery是一个合集对象，<br>  所以通过children是匹配合集中每一给元素的第一级子元素</p><p>2.children()方法选择性地接受同一类型选择器表达式</p><h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><pre><code>.find()     查找匹配元素的后代元素</code></pre><p>注意:</p><p>1.find是遍历当前元素集合中每个元素的后代。<br>  只要符合，不管是儿子辈，孙子辈都可以。</p><p>2.与其他的树遍历方法不同,选择器表达式对于.find()<br>  是必需的参数。如果我们需要实现对所有后代元素的取回，<br>  可以传递通配选择器 *</p><p>3.find只在后代中遍历，不包括自己<br>  选择器context是由.find()方法实现的;<br>  因此, $(‘.item-ii’).find(‘li’)<br>  等价于$(‘li’, ‘.item-ii’)<br>  (找到类名为item-ii的标签下的li标签)</p><h2 id="parent"><a href="#parent" class="headerlink" title="parent()"></a>parent()</h2><pre><code>.parent()         返回匹配元素集合中每一个元素的父元素</code></pre><p>注意:<br>1.JQuery是一个合集对象，<br>所以通过parent是匹配合集中每一个元素的父元素</p><p>2.parent()方法选择性地接受同一型选择器表达式</p><h2 id="parents"><a href="#parents" class="headerlink" title="parents()"></a>parents()</h2><pre><code>.parents()        查找合集里面的每一个元素的所有祖辈元素</code></pre><p>注意:</p><p>1.jQuery是一个合集对象，<br>  所以通过parent是匹配合集中所有元素的祖辈元素<br>2.parents()方法选择性地接受同一型选择器表达式</p><p>3.parents()和.parent()方法是相似的，<br>  但后者只是进行了一个单级的DOM树查找</p><p>4.$( “html” ).parent()方法返回一个包含document的集合<br>  而$( “html” ).parents()返回一个空集合</p><h2 id="closest"><a href="#closest" class="headerlink" title="closest()"></a>closest()</h2><pre><code>closest()  从元素本身开始在DOM上逐级向上级元素匹配           并返回最先匹配的祖先元素</code></pre><p>注意:<br>1.closest()方法接受一个匹配元素的选择器字符串<br>2.jQuery是一个合集对象<br>  所以通过closest是匹配合集中每一个元素的祖先元素<br>3.closest()方法给定的jQuery集合或元素来过滤元素</p><h2 id="closest与parents-区别"><a href="#closest与parents-区别" class="headerlink" title="closest与parents()区别"></a>closest与parents()区别</h2><p>1.<br>起始位置不同：.closest开始于当前元素 .parents开始于父元素</p><p>2.<br>遍历的目标不同：<br>.closest要找到指定的目标，<br>.parents遍历到文档根元素，<br>closest向上查找，直到找到一个匹配的就停止查找，<br>parents一直查找到根元素，并将匹配的元素加入集合</p><p>3.<br>结果不同：<br>.closest返回的是包含零个或一个元素的jquery对象，<br>parents返回的是包含零个或一个或多个元素的jquery对象</p><h2 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h2><pre><code>.next()     返回元素集合中每一个元素            紧邻的后面同辈元素的元素集合</code></pre><p>注意:</p><p>1.jQuery是一个合集对象，<br>  所以通过next匹配合集中每一个元素的下一个兄弟元素</p><p>2.next()方法选择性地接受同一类型选择器表达式</p><h2 id="prev"><a href="#prev" class="headerlink" title="prev()"></a>prev()</h2><pre><code>.prev()     查找指定元素集合中            每一个元素紧邻的前面同辈元素的元素集合</code></pre><p>注意:<br>1.jQuery是一个合集对象<br>  所以通过prev是匹配合集中每一个元素的上一个兄弟元素<br>2.prev()方法选择性地接受同一类型选择器表达式</p><h2 id="siblings"><a href="#siblings" class="headerlink" title="siblings()"></a>siblings()</h2><pre><code>.siblings()     查找指定元素集合中每一个元素的同辈元素</code></pre><p>注意:</p><p>1.JQuery是一个合集对象<br>  所以通过siblings是匹配合集中每一个元素的同辈元素<br>2.siblings()方法选择性地接受同一类型选择器表达式</p><h2 id="增添add"><a href="#增添add" class="headerlink" title="增添add()"></a>增添add()</h2><pre><code>.add()         用来创建一个新的jQuery对象             元素添加到匹配的元素集合中</code></pre><p>注:<br>.add()的参数可以几乎接受任何的$()<br>包括一个jQuery选择器表达式，DOM元素，或HTML片段引用</p><h2 id="遍历each"><a href="#遍历each" class="headerlink" title="遍历each()"></a>遍历each()</h2><p>each()就是一个for循环的迭代器<br>它会迭代jQuery对象合集中的每一个DOM元素<br>每次回调函数执行时,会传递当前循环次数作为参数(从0开始计数)</p><pre><code>.each()      遍历指定元素集合中的每个元素jQuery.each(array, callback )jQuery.each(object, callback )</code></pre><p>第一个参数传递的就是一个对象或者数组，第二个是回调函数</p><p>注:</p><p>1.each回调方法中的this指向当前迭代的dom元素</p><p>2.如果需要提前退出,可以通过返回false<br>  以便在回调函数内中止循环.<br>  如果返回其他任何值，均表示继续执行下一个循环。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQ DOM&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JQ" scheme="https://sollylee.github.io/tags/JQ/"/>
    
  </entry>
  
  <entry>
    <title>Python学习(一)</title>
    <link href="https://sollylee.github.io/2018/04/22/Python%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>https://sollylee.github.io/2018/04/22/Python学习-一/</id>
    <published>2018-04-22T11:48:31.000Z</published>
    <updated>2018-08-02T07:19:38.434Z</updated>
    
    <content type="html"><![CDATA[<p>Python基础语法与数据类型<br><a id="more"></a></p><h1 id="python基本语法"><a href="#python基本语法" class="headerlink" title="python基本语法"></a>python基本语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre><code># 单行注释&quot;&quot;&quot;&quot;&quot;&quot; 或 &apos;&apos;&apos;&apos;&apos;&apos; 多行注释</code></pre><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><pre><code>and        x and y    (同&amp;&amp;)or        x or y    (同||)not        not x    (同!)</code></pre><h2 id="成员运算"><a href="#成员运算" class="headerlink" title="成员运算"></a>成员运算</h2><pre><code>in            x in ynot in        x not in y</code></pre><h2 id="身份运算"><a href="#身份运算" class="headerlink" title="身份运算"></a>身份运算</h2><pre><code>is            判断两个标识符是不是引用自同一个对象not is        与 is 相反id()         用于获取对象的内存地址注: ==         判断引用变量的值是否相等</code></pre><h2 id="语法知识"><a href="#语法知识" class="headerlink" title="语法知识"></a>语法知识</h2><p>1.python可以在同一行中使用多条语句,语句间用分号(;)分割<br>2.print默认输出是换行的, 如果要是实现不换行要在变量末尾<br>  加上 end=””<br>3.python可以用斜杠()将一行的语句分成多行,在[], {},<br>  或()中的多行语句，不需要使用反斜杠()</p><h2 id="import与from…import"><a href="#import与from…import" class="headerlink" title="import与from…import"></a>import与from…import</h2><p>导入相应的模块</p><p>语法:</p><pre><code>import somemodule        将整个模块(somemodule)导入from somemodule import somefunction        从某个模块中                                        导入某个函数from somemodule import firstfunc,         从某个模块中secondfunc, thirdfunc                    导入多个函数from somemodule import *    将某个模块中的全部函数导入    </code></pre><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p>不可变:    Number(数字), String(字符串), Tuple(元组)</p><p>可变: List(集合), Dictionary(字典), Sets(集合)</p><p>type()函数可以查询变量所指的对象类型</p><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>声明: int, float, bool, complex(复数)<br>Python3中, 只有一个整数类型, 表示为长整型</p><p>isinstance()函数用来判断变量类型</p><pre><code>isinstance(var, class)        函数用来判断变量类型                            是返回True, 否返回False</code></pre><p>type()与isinstance()区别:</p><p>1.type()不会认为子类是一种父类类型</p><p>2.isinstance()则会</p><p>del语句用于删除一些对象引用</p><p>语法:</p><pre><code>del var1[, var2[, var3[..., varN]]]</code></pre><p>数值运算:<br>符号与用法和C语言基本一致(只列出不同的)</p><pre><code>a/b     # 除法, 得到一个浮点数a//b     # 除法, 得到一个整数a**b    # 乘方, a^b</code></pre><p>基本知识</p><p>1.一个变量可以通过赋值指向不同类型的对象</p><p>2.混合计算时, Python会把整型转换成浮点型</p><p>3.复数, 用a+bj或complex(a,b)表示,<br>  复数的实虚部都是浮点型</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>Python中的字符串用单引号 ‘ 或双引号 “ 括起来，<br>同时使用反斜杠 \ 转义特殊字符。</p><p>字符串的截取的语法格式如下：</p><pre><code>变量[头下标:尾下标]</code></pre><p>索引值以 0 为开始值，-1 为从末尾的开始位置。<br>加号 + 是字符串的连接符,<br>星号 * 表示复制当前字符串，紧跟的数字为复制的次数</p><p>E.g.:</p><pre><code>print (str)          # 输出字符串print (str[0:-1])    # 输出第一个到倒数第二个的所有字符print (str[0])       # 输出字符串第一个字符print (str[2:5])     # 输出从第三个开始到第五个的字符print (str[2:])      # 输出从第三个开始的后的所有字符print (str * 2)      # 输出字符串两次print (str + &quot;TEST&quot;) # 连接字符串</code></pre><p>Python 使用反斜杠()转义特殊字符，<br>如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r<br>表示原始字符串</p><p>E.g.</p><pre><code>print(r&quot;\nPython&quot;)输出: \nPython</code></pre><p>反斜杠()也可以作为续行符，表示下一行是上一行的延续。<br>也可以使用 “””…””” 或者 ‘’’…’’’ 跨越多行</p><p>注意：</p><p>1.反斜杠可以用来转义，使用r可以让反斜杠不发生转义。<br>2.字符串可以用+运算符连接在一起，用 * 运算符重复。<br>3.Python中的字符串有两种索引方式,从左往右以0开始,从右往左以-1开始<br>4.Python中的字符串不能改变。<br>5.Python中没有单独的字符类型，一个字符就是长度为1的字符串</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>1.集合是一个无序不重复元素的序列<br>2.主要用于进行成员关系测试和删除重复元素<br>3.可用大括号{}或set()函数创建集合<br>  注意,创建一个空集合必须使用set(),空的{}<br>  用于创建空字典</p><p>e.g: parame = {value1, value2, ….} 或 set(value)</p><p>4.输出集合是,重复的元素会被自动去掉</p><p>成员测试</p><pre><code>if &apos;xx&apos; in parame :    print(&apos;&apos;)else:       print(&apos;&apos;)</code></pre><p>set可以进行集合运算</p><pre><code>a = set(&apos;abracadabra&apos;)b = set(&apos;alacazam&apos;)a - b        # a和b的差集a | b       # a和b的并集a &amp; b         # a和b的交集a ^ b        # a和b中不同时存在的元素注意: - 不等于 ^</code></pre><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>1.List写在方括号[]内, 元素用逗号隔开, eg: List = [1, 2, 3,…]</p><p>2.List中的元素类型可以不同, 它支持数字, 字符串, 列表(嵌套)</p><p>3.和字符串类似, List也可以截取, 索引值与字符串相同<br>  变量[头下标:尾下标], (+)拼接, ( * )重复输出</p><p>4.List中的元素可以被修改</p><h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><p>1.与List相似, 元素类型可以不同, 不过元素不可以被修改<br>  但可以包含可被修改的元素</p><p>2.元组写在()小括号内, 元素间用逗号隔开</p><p>3.字符串可以看作是一个特殊的元组, 方法相同</p><p>4.特殊的构造语法:</p><pre><code>tuple1 = ()         # 空元组tuple2 = (20,)        # 一个元素的元组, 需在元素后添加逗号</code></pre><p>String, List和Tuple都属于sequence(序列)</p><h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><p>1.字典是无序的对象集合, 列表是有序的对象集合,<br>二者区别: 字典元素是通过健来存取,而不是通过偏移存取</p><p>2.字典是一种映射类型, 字典用{}标识,<br>它是一个无序的键(key):值(value)对集合</p><p>3.键(key)必须使用不可变类型<br>4.同一字典中, 键(key)必须是唯一的</p><p>E.g.:</p><pre><code>dict = {}dict[&apos;one&apos;] = &quot;Python&quot;dict[2]     = &quot;C&quot;print (dict[&apos;one&apos;])     # 输出键为 &apos;one&apos; 的值print (dict[2])         # 输出键为 2 的值print (dict)              # 输出完整的字典print (dict.keys())       # 输出所有键print (dict.values())     # 输出所有值</code></pre><p>5.构造函数 dict() 可以直接从键值对序列中构建字典如下：<br>E.g.</p><pre><code>dict([(&apos;Runoob&apos;, 1), (&apos;Google&apos;, 2), (&apos;Taobao&apos;, 3)])=&gt;{&apos;Taobao&apos;: 3, &apos;Runoob&apos;: 1, &apos;Google&apos;: 2}{x: x**2 for x in (2, 4, 6)}=&gt;{2: 4, 4: 16, 6: 36}dict(Runoob=1, Google=2, Taobao=3)=&gt;{&apos;Taobao&apos;: 3, &apos;Runoob&apos;: 1, &apos;Google&apos;: 2}</code></pre><p>6.创建空字典使用 { }</p><p>7.遍历字典</p><pre><code>for key, value in obj.items():</code></pre><p>8.去掉重复值</p><pre><code>set(obj.values())</code></pre><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>1.当函数返回多个值时, 是以元组方式返回的</p><p>2.字典是使用了散列表(hashtable)算法</p><p>3.如果一个字典对象作为for的迭代对象, 那么这个操作<br>  将会遍历字典所有的键</p><p>4.isinstance主要用于判断A类是否继承与B类</p><p>5.为什么python没有自增, 自减运算符?</p><pre><code>  python中一个变量可以以多个名称访问,即以内容为基准, 不像C中已变量为基准,所以python中数字类型的值不可改变. eg:a=5, b=5, a, b具有相同的地址, 当 a 改变时b也改变了, 所以只能以 a += 1 或 a = a+1 来改变a的值, 执行后,a的地址也改变了注: 在交互环境中(编译器)会有一个小整池的概念,它会把(-5, 256)间的数先预先创建好,当a与b超过这个范围时, 两个变量就会指向不同的对象, 因此地址也会不一样.</code></pre><p>6.” _ “下划线,表示上一次的输出结果, 应视其为有只读变量</p><p>7.Python不支持复数转换成整数或浮点数</p><p>8.round()函数,规则为: “4舍6入5看齐, 奇进偶不进”</p><p>9.Python3 中 cmp()函数的代替函数:<br>返回ture或false</p><pre><code>import operator        # 需先引入运算符模块operator.gt(x, y)    # greater than(x&gt;y?)operator.ge(x, y)    # greater and equal(x&gt;=y?)operator.eq(x, y)    # equal (x=y?)operator.le(x, y)    # less and equal (x&lt;=y?)operator.lt(x, y)    # less than (x&lt;y?)</code></pre><p>10.fractions模块提供了分数类的支持</p><pre><code>  可以同时提供分子(numerator)和分母(denominator)给构造函数用于实例化Fraction类, 但两者必须同时是int类型或numbers.Rational类型,否则会抛出类型错误.当分母为0,初始化的时候回导致抛出异常ZeroDivisionError</code></pre><p>11.Python字符串格式化<br>字符串格式化使用与C中sprintf函数一样的语法<br>eg: print(“hello,%s” %(‘Python’))<br>%c 格式化字符串及其ASCII码,其他与C一致</p><p>12.Python三引号允许一个字符串跨多行, 字符串可以包括<br>   换行符, 制表符以及其他特殊字符</p><p>13.Python中,所有字符都是Unicode字符串,<br>   普通字符串是以ASCII码进行存储的,而Unicode<br>   字符串则储存为16位unicode字符串</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python基础语法与数据类型&lt;br&gt;
    
    </summary>
    
      <category term="后端/机器学习" scheme="https://sollylee.github.io/categories/%E5%90%8E%E7%AB%AF-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="https://sollylee.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JQ基础学习(一)</title>
    <link href="https://sollylee.github.io/2018/04/22/JQ%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>https://sollylee.github.io/2018/04/22/JQ基础学习-一/</id>
    <published>2018-04-22T11:47:53.000Z</published>
    <updated>2018-08-02T07:33:51.108Z</updated>
    
    <content type="html"><![CDATA[<p>JQ样式<br><a id="more"></a></p><h1 id="JQ基础知识"><a href="#JQ基础知识" class="headerlink" title="JQ基础知识"></a>JQ基础知识</h1><p>$(document).ready 的作用是等页面的文档<br>（document）中的节点都加载完毕后，再执行后续的代码</p><p>通过jQuery方法包装后的对象，是一个类数组对象。<br>它与DOM对象完全不同，唯一相似的是它们都能操作DOM。</p><h2 id="JQ对象转换为DOM对象"><a href="#JQ对象转换为DOM对象" class="headerlink" title="JQ对象转换为DOM对象"></a>JQ对象转换为DOM对象</h2><p>1.利用数组下标的方式读取到jQuery中的DOM对象</p><pre><code>var $div = $(&apos;div&apos;) //jQuery对象var div = $div[0] //转化成DOM对象</code></pre><p>2.通过jQuery自带的get()方法<br>jQuery对象自身提供一个.get() 方法允许我们直接访问jQuery对象中相关的DOM节点</p><pre><code>var $div = $(&apos;div&apos;) //jQuery对象var div = $div.get(0) //通过get方法,转化成DOM对象</code></pre><h2 id="DOM对象转换为JQ对象"><a href="#DOM对象转换为JQ对象" class="headerlink" title="DOM对象转换为JQ对象"></a>DOM对象转换为JQ对象</h2><p>如果传递给$(DOM)函数的参数是一个DOM对象，<br>jQuery方法会把这个DOM对象给包装成一个新的jQuery对象</p><pre><code>var div = document.getElementsByTagName(&apos;div&apos;); //dom对象var $div = $(div); //jQuery对象</code></pre><h1 id="JQ选择器"><a href="#JQ选择器" class="headerlink" title="JQ选择器"></a>JQ选择器</h1><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>通过元素的id名获取节点</p><pre><code>$( &quot;#id&quot; )</code></pre><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>通过class样式类名来获取节点</p><pre><code>$( &quot;.class&quot; )</code></pre><h2 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h2><p>根据给定（html）标记名称选择所有的元素</p><pre><code>$( &quot;element&quot; )</code></pre><h2 id="全选择器"><a href="#全选择器" class="headerlink" title="全选择器"></a>全选择器</h2><p>通过传递 ‘星号’ 选择器来选中文档页面中的元素</p><pre><code>$( &quot;*&quot; )</code></pre><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><p>选择所有指定”parent”元素中指定的”child”的直接子元素</p><pre><code>$(&quot;parent&gt;child&quot;)</code></pre><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>选择给定的”ancestor”元素的所有后代元素</p><pre><code>$(&quot;ancestor descendant&quot;)</code></pre><h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><p>选择所有紧接在”prev”元素后的”next”元素</p><pre><code>$(&quot;prev+next&quot;)</code></pre><h3 id="一般兄弟选择器"><a href="#一般兄弟选择器" class="headerlink" title="一般兄弟选择器"></a>一般兄弟选择器</h3><p>匹配”prev”元素之后的所有兄弟元素,具有相同的父元素<br>并匹配过滤”siblings”选择器</p><pre><code>$(&quot;prev~siblings&quot;)</code></pre><h2 id="基本筛选选择器"><a href="#基本筛选选择器" class="headerlink" title="基本筛选选择器"></a>基本筛选选择器</h2><pre><code>$(&quot;:first&quot;)            匹配第一个元素$(&quot;:last&quot;)            匹配最后一个元素$(&quot;:not(seletor)&quot;)    选择所有元素除去不匹配给定                    的选择器元素$(&quot;:eq(index)&quot;)        在匹配的集合中选择索引为index的元素$(&quot;:gt(index)&quot;)        在匹配的集合中选择索引大于index的元素$(&quot;:lt(index)&quot;)        在匹配的集合中选择索引小于index的元素$(&quot;:even&quot;)            选择索引值为偶数的元素,从零开始计数$(&quot;:odd&quot;)            选择索引值为奇数的元素,从零开始计数$(&quot;:header&quot;)        选择所有标题元素,e.g.:h1,h2...$(&quot;:lang(language)&quot;)    选择指定语言的所有元素$(&quot;:root&quot;)            选择该文档的根元素$(&quot;:animated&quot;)        选择所有正在执行动画效果的元素</code></pre><p>注意事项：</p><p>1.<br>:eq(), :lt(), :gt(), :even, :odd<br>用来筛选他们前面的匹配表达式的集合元素，<br>根据之前匹配的元素在进一步筛选<br>注意jQuery合集都是从0开始索引</p><p>2.<br>gt是一个段落筛选，从指定索引的下一个开始，<br>gt(1) 实际从2开始</p><h2 id="内容筛选选择器"><a href="#内容筛选选择器" class="headerlink" title="内容筛选选择器"></a>内容筛选选择器</h2><pre><code>$(&quot;:contains(text)&quot;)    选择所有包含指定文本的元素$(&quot;:parent&quot;)            选择所有含有子元素或者文本的元素$(&quot;:empty&quot;)                选择所有没有子元素的元素(包括文本)$(&quot;:has(selector)&quot;)        选择元素中至少包含指定选择器的元素</code></pre><p>注意事项：</p><p>1.<br>:contains与:has都有查找的意思，<br>但是contains查找包含“指定文本”的元素，<br>has查找包含“指定元素”的元素</p><p>2.<br>如果:contains匹配的文本包含在元素的子元素中，<br>同样认为是符合条件的。:parent与:empty是相反的，<br>两者所涉及的子元素，包括文本节点</p><h2 id="可见性筛选选择器"><a href="#可见性筛选选择器" class="headerlink" title="可见性筛选选择器"></a>可见性筛选选择器</h2><pre><code>$(&quot;:visible&quot;)    选择所有显示的元素$(&quot;:hidden&quot;)    选择所有隐藏的元素</code></pre><p>Note:</p><p>1.<br>:hidden选择器，<br>不仅仅包含样式是display=”none”的元素，<br>还包括隐藏表单、visibility等等</p><p>2.<br>我们有几种方式可以隐藏一个元素：</p><pre><code>(1) CSS display的值是none。(2) type=&quot;hidden&quot;的表单元素。(3) 宽度和高度都显式设置为0。(4) 一个祖先元素是隐藏的，该元素是不会在页面上显示(5) CSS visibility的值是hidden(6) CSS opacity的指是0</code></pre><p>3.<br>如果元素中占据文档中一定的空间,元素被认为是可见的。<br>可见元素的宽度或高度，是大于零。<br>元素的visibility: hidden 或 opacity: 0被认为是可见的，因为他们仍然占用空间布局。</p><p>4.<br>不在文档中的元素是被认为是不可见的，<br>如果当他们被插入到文档中<br>jQuery没有办法知道他们是否是可见的，<br>因为元素可见性依赖于适用的样式</p><h2 id="属性筛选选择器"><a href="#属性筛选选择器" class="headerlink" title="属性筛选选择器"></a>属性筛选选择器</h2><pre><code>$(&quot;[attribute|=&apos;value&apos;]&quot;)选择指定属性值等于给定字符串或以该文字串为前缀的元素$(&quot;[attribute*=&apos;value&apos;]&quot;)选择指定属性值具有包含一个给定的子符串的元素(选择给定的属性是以包含某些值的元素)$(&quot;[attribute~=&apos;value&apos;]&quot;)选择指定属性用空格分隔的值中包含一个给定值的元素$(&quot;[attribute=&apos;value&apos;]&quot;)选择指定属性是给定值的元素$(&quot;[attribute!=&apos;value&apos;]&quot;)选择不存在指定属性或者指定属性不等于给定值的元素$(&quot;[attribute^=&apos;value&apos;]&quot;)选择指定属性是以给定字符串开始的元素$(&quot;[attribute$=&apos;value&apos;]&quot;)选择指定属性是以给定值结尾的元素,区分大小写$(&quot;[attribute]&quot;)选择所有具有指定属性的元素,该元素可以是任意值$(&quot;[attributeFilter1][attributeFilterN]&quot;)选择匹配所有指定的属性筛选器的元素</code></pre><h2 id="子元素筛选选择器"><a href="#子元素筛选选择器" class="headerlink" title="子元素筛选选择器"></a>子元素筛选选择器</h2><pre><code>$(&quot;first-child&quot;)    选择所有父级元素下的第一个子元素$(&quot;last-child&quot;)        选择所有父级元素下的最后一个子元素$(&quot;:only-child&quot;)    若某元素是其父元素的唯一的子元素,                    那么它就会被选中$(&quot;:nth-child&quot;)        选择的他们所有父级的第n个子元素$(&quot;:nth-last-child&quot;)    选择所有他们父元素的第n个子元素,                        计数从最后一个元素开始到第一个</code></pre><p>注意事项：</p><p>(1)<br>:first只匹配一个单独的元素，<br>但是:first-child选择器可以匹配多个：<br>即为每个父级元素匹配第一个子元素。<br>这相当于:nth-child(1)</p><p>(2)<br>:last 只匹配一个单独的元素，<br> :last-child选择器可以匹配多个元素：即，<br> 为每个父级元素匹配最后一个子元素</p><p>(3)<br>如果子元素只有一个的话，<br>:first-child与:last-child是同一个<br> :only-child匹配某个元素是父元素中唯一的子元素，<br> 就是说当前子元素是父元素中唯一的元素，则匹配</p><p>(4)<br>jQuery实现:nth-child(n)是严格来自CSS规范，<br>所以n值是“索引”，也就是说，从1开始计数，<br>:nth-child(index)从1开始的，<br>而eq(index)是从0开始的</p><p>(5)<br>nth-child(n) 与 :nth-last-child(n) 的区别前者是从前往后计算，后者从后往前计算</p><h2 id="表单元素选择器"><a href="#表单元素选择器" class="headerlink" title="表单元素选择器"></a>表单元素选择器</h2><pre><code>$(&quot;:input&quot;)        选择所有input,textarea,select和button元素$(&quot;:text&quot;)        匹配所有文本框$(&quot;:password&quot;)    匹配所有密码框$(&quot;:radio&quot;)        匹配所有单选按钮$(&quot;:checkbox&quot;)    匹配所有复选框$(&quot;:submit&quot;)    匹配所有提交按钮$(&quot;:image&quot;)        匹配所有图像域$(&quot;:reset&quot;)        匹配所有重置按钮$(&quot;:button&quot;)    匹配所有按钮$(&quot;:file&quot;)        匹配所有文件域</code></pre><p>注意事项：</p><p>除了input筛选选择器，<br>几乎每个表单类别筛选器都对应一个input元素的type值。<br>大部分表单类别筛选器可以使用属性筛选器替换。<br>比如 $(‘:password’) == $(‘[type=password]’)</p><h2 id="表单元素筛选选择器"><a href="#表单元素筛选选择器" class="headerlink" title="表单元素筛选选择器"></a>表单元素筛选选择器</h2><pre><code>$(&quot;:enabled&quot;)        选取可用的表单元素$(&quot;:disabled&quot;)        选取不可用的表单元素$(&quot;:checked&quot;)        选取被选中的input元素$(&quot;:selected&quot;)        选取被选中的option元素</code></pre><p>注意事项：</p><p>(1)<br>选择器适用于复选框和单选框，<br>对于下拉框元素, 使用 :selected 选择器</p><p>(2)<br>在某些浏览器中<br>选择器:checked可能会错误选取到option元素<br>所以保险起见换用选择器input:checked<br>确保只会选取input元素</p><h1 id="JQ的属性与样式"><a href="#JQ的属性与样式" class="headerlink" title="JQ的属性与样式"></a>JQ的属性与样式</h1><h2 id="attr-与removeAttr"><a href="#attr-与removeAttr" class="headerlink" title="attr()与removeAttr()"></a>attr()与removeAttr()</h2><p>attar()方法</p><p>attr()方法用来获取和设置元素属性<br>attr是attribute（属性）的缩写<br>在jQuery DOM操作中会经常用到attr()</p><p>attr()有4个表达式</p><pre><code>attr(传入属性名)            获取属性的值attr(属性名, 属性值)        设置属性的值attr(属性名,函数值)        设置属性的函数值attr(attributes)         给指定元素设置多个属性值,即{属性名一: “属性值一”, 属性名二: “属性值二”,...}</code></pre><p>removeAttr()删除方法</p><pre><code>.removeAttr( attributeName )为匹配的元素集合中的每个元素中移除一个属性(attribute)</code></pre><p>注意:</p><p>Attribute就是dom节点自带的属性<br>Property是这个DOM元素作为对象，其附加的内容</p><p>获取Attribute就需要用attr,获取Property就需要用prop</p><h2 id="html-与-text"><a href="#html-与-text" class="headerlink" title=".html()与.text()"></a>.html()与.text()</h2><p>.html()方法</p><p>获取集合中第一个匹配元素的HTML内容<br>或设置每一个匹配元素的html内容，<br>具体有3种用法：</p><pre><code>.html()     不传入值,就是获取集合中第一个匹配元素的HTML内容.html(htmlString)设置每一个匹配元素的html内容.html(function(index, oldhtml))用来返回设置HTML内容的一个函数</code></pre><p>.text()方法<br>得到匹配元素集合中每个元素的文本内容结合<br>包括他们的后代或<br>设置匹配元素集合中每个元素的文本内容为指定的文本内容。</p><p>具体有3种用法：</p><pre><code>.text() 得到匹配元素集合中每个元素的合并文本,包括他们的后代.text(textString) 用于设置匹配元素内容的文本.text(function(index, text)) 用来返回设置文本内容的一个函数</code></pre><p>注意:</p><p>(1).html()方法内部使用的是DOM的innerHTML属性来处理的<br>    所以在设置与获取上需要注意的一个最重要的问题，<br>    这个操作是针对整个HTML内容(不仅仅只是文本内容)</p><p>(2).text()结果返回一个字符串,包含所有匹配元素的合并文本</p><p>两者的异同:</p><p>(1).html与.text的方法操作是一样,只是在具体针对处理对象不同</p><p>(2).html处理的是元素内容,.text处理的是文本内容</p><p>(3).html只能使用在HTML文档中,<br>   .text 在XML 和 HTML 文档中都能使用</p><p>(4)如果处理的对象只有一个子文本节点,<br>   那么html处理的结果与text是一样的</p><p>(5)火狐不支持innerText属性，用了类似的textContent属性<br>   .text()方法综合了2个属性的支持，所以可以兼容所有浏览器</p><h2 id="val"><a href="#val" class="headerlink" title=".val()"></a>.val()</h2><p>.val()方法</p><pre><code>.val()         无参数，获取匹配的元素集合中第一个元素的当前值.val(value)        设置匹配的元素集合中每个元素的值.val(function)    一个用来返回设置值的函数</code></pre><p>注意:</p><p>(1)通过.val()处理select元素，当没有选择项被选中，它返回null</p><p>(2).val()方法多用来设置表单的字段的值</p><p>(3)如果select元素有multiple（多选）属性<br>   并且至少一个选择项被选中,.val()方法返回一个数组<br>   这个数组包含每个选中选择项的值</p><h2 id="html-text-和-val-的差异总结"><a href="#html-text-和-val-的差异总结" class="headerlink" title=".html(),.text()和.val()的差异总结"></a>.html(),.text()和.val()的差异总结</h2><pre><code>1  .html(),.text(),.val()三种方法都是用来读取选定元素的内容；只不过.html()是用来读取元素的html内容(包括html标签).text()用来读取元素的纯文本内容，包括其后代元素.val()是用来读取表单元素的&quot;value&quot;值。其中.html()和.text()方法不能使用在表单元素上,而.val()只能使用在表单元素上；另外.html()方法使用在多个元素上时，只读取第一个元素；.val()方法和.html()相同，如果其应用在多个元素上时，只能读取第一个表单元素的&quot;value&quot;值但是.text()和他们不一样，如果.text()应用在多个元素上时，将会读取所有选中元素的文本内容。2 .html(htmlString),.text(textString)和.val(value)三种方法都是用来替换选中元素的内容，如果三个方法同时运用在多个元素上时，那么将会替换所有选中元素的内容。.html(),.text(),.val()都可以使用回调函数的返回值来动态的改变多个元素的内容。</code></pre><h2 id="addClass-与removeClass"><a href="#addClass-与removeClass" class="headerlink" title="addClass()与removeClass()"></a>addClass()与removeClass()</h2><p>.addClass(className)方法</p><pre><code>.addClass(className)  为每个匹配元素所要增加的一个或多个样式名.addClass(function(index, currentClass)) 这个函数返回一个或更多用空格隔开的要增加的样式名</code></pre><p>注意事项：</p><p>.addClass()方法不会替换一个样式类名。<br>它只是简单的添加一个样式类名到元素上</p><p>.removeClass( )方法</p><pre><code>.removeClass([className])每个匹配元素移除的一个或多个用空格隔开的样式名.removeClass( function(index, class) )一个函数，返回一个或多个将要被移除的样式名</code></pre><p>注意事项:</p><p>如果一个样式类名作为一个参数,<br>只有这样式类会被从匹配的元素集合中删除 。 如果没有样式名作为参数，那么所有的样式类将被移除</p><h2 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass()"></a>toggleClass()</h2><p>在匹配的元素集合中的每个元素上添加或删除一个或多个样式类<br>取决于这个样式类是否存在或值切换属性。<br>即：如果存在（不存在）就删除（添加）一个类</p><pre><code>.toggleClass(className)：在匹配的元素集合中的每个元素上用来切换的一个或多个(用空格隔开)样式类名.toggleClass(className, switch )：一个布尔值，用于判断样式是否应该被添加或移除.toggleClass([switch])一个用来判断样式类添加还是移除的 布尔值.toggleClass(function(index, class, switch) [, switch])用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数。接收元素的索引位置和元素旧的样式类作为参数</code></pre><p>注意事项：</p><p>(1)<br>toggleClass是一个互斥的逻辑，<br>也就是通过判断对应的元素上是否存在指定的Class名，<br>如果有就删除，如果没有就增加</p><p>(2)<br>toggleClass会保留原有的Class名后新增，通过空格隔开</p><h2 id="css"><a href="#css" class="headerlink" title=".css()"></a>.css()</h2><p>获取元素样式属性的计算值或者设置元素的CSS属性</p><p>获取：</p><pre><code>.css( propertyName )获取匹配元素集合中的第一个元素的样式属性的计算值.css( propertyNames )传递一组数组，返回一个对象结果</code></pre><p>设置：</p><pre><code>.css(propertyName, value )设置CSS.css( propertyName, function )可以传入一个回调函数，返回取到对应的值进行处理.css( properties )可以传一个对象，同时设置多个样式</code></pre><p>注意事项：</p><p>(1)<br>浏览器属性获取方式不同，<br>在获取某些值的时候都jQuery采用统一的处理<br>比如颜色采用RBG，尺寸采用px</p><p>(2)<br>.css()方法支持驼峰写法与大小写混搭的写法，<br>内部做了容错的处理</p><p>(3)<br>当一个数只被作为值（value）的时候，<br>jQuery会将其转换为一个字符串，<br>并添在字符串的结尾处添加px，<br>例如 .css(“width”,50})与.css(“width”,”50px”})一样</p><h2 id="css-与-addClass-设置样式的区别"><a href="#css-与-addClass-设置样式的区别" class="headerlink" title=".css()与.addClass()设置样式的区别"></a>.css()与.addClass()设置样式的区别</h2><p>1.可维护性：</p><p>.addClass()<br>的本质是通过定义个class类的样式规则，给元素添加一个或多个类。<br>css方法是通过JavaScript大量代码进行改变元素的样式<br>通过.addClass()我们可以批量的给相同的元素设置统一规则，<br>变动起来比较方便，可以统一修改删除。<br>如果通过.css()方法就需要指定每一个元素是一一的修改，<br>日后维护也要一一的修改，比较麻烦</p><p>2.灵活性：</p><p>通过.css()方式可以很容易动态的去改变一个样式的属性，<br>不需要在去繁琐的定义个class类的规则。<br>一般来说在不确定开始布局规则，通过动态生成的HTML代码结构中，<br>都是通过.css()方法处理的</p><p>3.样式值：</p><p>.addClass()本质只是针对class的类的增加删除，<br>不能获取到指定样式的属性的值，.css()可以获取到指定的样式值。</p><p>4.样式的优先级：<br>css的样式是有优先级的，<br>当外部样式、内部样式和内联样式同一样式规则同时<br>应用于同一个元素的时候<br>优先级如下：</p><pre><code>外部样式 &lt; 内部样式 &lt; 内联样式</code></pre><p>.addClass()方法是通过增加class名的方式，<br>那么这个样式是在外部文件或者内部样式中先定义好的，<br>等到需要的时候在附加到元素上</p><p>通过.css()方法处理的是内联样式，<br>直接通过元素的style属性附加到元素上的</p><pre><code>通过.css方法设置的样式属性优先级要高于.addClass方法</code></pre><p>5.总结：</p><p>.addClass与.css方法各有利弊，一般是静态的结构，<br>都确定了布局的规则，可以用addClass的方法，增加统一的类规则</p><p>如果是动态的HTML结构，在不确定规则，<br>或者经常变化的情况下，一般多考虑.css()方式</p><h2 id="元素的数据存储"><a href="#元素的数据存储" class="headerlink" title="元素的数据存储"></a>元素的数据存储</h2><p>jQuery提供的存储接口：</p><pre><code>jQuery.data(element, key, value)       静态接口,存数据jQuery.data(element, key)            静态接口,取数据   .data(key, value)                    实例接口,存数据.data(key)                             实例接口,存数据</code></pre><p>2个方法在使用上存取都是通一个接口，传递元素，键值数据。<br>在jQuery的官方文档中，建议用.data()方法来代替。</p><p>删除接口：</p><pre><code>jQuery.removeData(element [, name]).removeData([name])</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JQ样式&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JQ" scheme="https://sollylee.github.io/tags/JQ/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶学习(四)</title>
    <link href="https://sollylee.github.io/2018/02/08/JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0-%E5%9B%9B/"/>
    <id>https://sollylee.github.io/2018/02/08/JavaScript进阶学习-四/</id>
    <published>2018-02-08T09:22:42.000Z</published>
    <updated>2018-02-09T07:48:54.753Z</updated>
    
    <content type="html"><![CDATA[<p>js进阶学习four<br><a id="more"></a></p><h2 id="DOM对象补充"><a href="#DOM对象补充" class="headerlink" title="DOM对象补充"></a>DOM对象补充</h2><p>###获取DOM对象方法</p><pre><code>    方法                 说明                     获得getElementByID        通过指定id获取元素         一个getElementsByName  通过元素名称name属性获取元素  一组getElementsByTagName  通过标签名获取元素         一组</code></pre><h3 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute()"></a>getAttribute()</h3><p>通过元素节点的属性名称获取属性的值。</p><pre><code>elementNode.getAttribute(name)</code></pre><p>说明:<br>1.elementNode：元素节点。下同。<br>2.name：要想查询的元素节点的属性名字 如: id,title</p><h3 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute()"></a>setAttribute()</h3><p>方法增加一个指定名称和值的新属性，<br>或者把一个现有的属性设定为指定的值。</p><p>   elementNode.setAttribute(name,value)</p><p>说明：<br>1.name: 要设置的属性名。<br>2.value: 要设置的属性值。</p><p>注意：<br>把指定的属性设置为指定的值<br>如果不存在具有指定名称的属性，该方法将创建一个新属性</p><h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><p>在文档对象模型 (DOM) 中，每个节点都是一个对象。</p><p>DOM 节点有三个重要的属性 ：</p><pre><code>nodeName   节点的名称 nodeValue  节点的值nodeType   节点的类型</code></pre><h4 id="nodeName"><a href="#nodeName" class="headerlink" title="nodeName"></a>nodeName</h4><p>节点的名称，是只读的。</p><pre><code>元素节点的 nodeName 与标签名相同属性节点的 nodeName 是属性的名称文本节点的 nodeName 永远是 #text文档节点的 nodeName 永远是 #document</code></pre><h4 id="nodeValue"><a href="#nodeValue" class="headerlink" title="nodeValue"></a>nodeValue</h4><p>节点的值</p><pre><code>元素节点的 nodeValue 是 undefined 或 null文本节点的 nodeValue 是文本自身属性节点的 nodeValue 是属性的值</code></pre><h4 id="nodeType"><a href="#nodeType" class="headerlink" title="nodeType"></a>nodeType</h4><p>节点的类型，是只读的。<br>以下常用的几种结点类型:</p><pre><code>元素类型    节点类型  元素          1  属性          2  文本          3  注释          8  文档          9</code></pre><h3 id="访问子节点childNodes"><a href="#访问子节点childNodes" class="headerlink" title="访问子节点childNodes"></a>访问子节点childNodes</h3><p>访问选定元素节点下的所有子节点的列表，<br>返回的值可以看作是一个数组，它具有length属性</p><pre><code>elementNode.childNodes</code></pre><p>注意：<br>1.如果选定的节点没有子节点，<br>  则该属性返回不包含节点的 NodeList<br>2.IE全系列、firefox、chrome、opera、safari兼容问题<br>3.节点之间的空白符，<br>  在firefox、chrome、opera、safari浏览器是文本节点</p><p>####firstChild<br>返回‘childNodes’数组的第一个子节点。<br>如果选定的节点没有子节点，则该属性返回 NULL。</p><pre><code>node.firstChild</code></pre><p>说明：<br>与elementNode.childNodes[0]是同样的效果。 </p><p>####lastChild<br>返回‘childNodes’数组的最后一个子节点。<br>如果选定的节点没有子节点，则该属性返回 NULL。</p><pre><code>node.lastChild</code></pre><p>说明：<br>elementNode.childNodes[elementNode.childNodes.length-1]<br>是同样的效果。</p><h3 id="访问父节点parentNode"><a href="#访问父节点parentNode" class="headerlink" title="访问父节点parentNode"></a>访问父节点parentNode</h3><p>获取指定节点的父节点</p><pre><code>elementNode.parentNode</code></pre><p>若想继续指向祖节点可以继续加上 .parenetNode<br>eg:    </p><pre><code>elementNode.parentNode.parentNode</code></pre><p>###访问兄弟节点</p><h4 id="nextSibling"><a href="#nextSibling" class="headerlink" title="nextSibling"></a>nextSibling</h4><p>可返回某个节点之后紧跟的节点（处于同一树层级中）</p><pre><code>nodeObject.nextSibling</code></pre><p>说明：如果无此节点，则该属性返回 null。</p><p>####previousSibling<br>可返回某个节点之前紧跟的节点（处于同一树层级中）</p><pre><code>nodeObject.previousSibling  </code></pre><p>说明：如果无此节点，则该属性返回 null。</p><p>注意: 两个属性获取的是节点。<br>Internet Explorer 会忽略节点间生成的空白文本节点(如换行符号)<br>而其它浏览器不会忽略。</p><p>可以通过判断该节点的nodeType是否为1，来知道是否为元素节点</p><h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild()"></a>appendChild()</h3><p>在指定节点的最后一个子节点列表之后添加一个新的子节点</p><pre><code>appendChild(newnode)</code></pre><p>说明：<br>newnode：指定追加的节点</p><h3 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore()"></a>insertBefore()</h3><p>在已有的子节点前插入一个新的子节点。</p><pre><code>insertBefore(newnode,node);</code></pre><p>说明：<br>newnode: 要插入的新节点<br>node: 指定此节点前插入节点</p><p>注意: otest.insertBefore(newnode,node);也可以改为:<br>      otest.insertBefore(newnode,otest.childNodes[0]);</p><h3 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild()"></a>removeChild()</h3><p>从子节点列表中删除某个节点<br>如删除成功，返回被删除的节点<br>如失败，则返回 NULL</p><pre><code>nodeObject.removeChild(node)</code></pre><p>说明:<br>node：必需，指定需要删除的节点</p><p>注意: 把删除的子节点赋值给x，这个子节点不在DOM树中<br>      但是还存在内存中，可通过 x 操作<br>      如果要完全删除对象，给 x 赋 null 值。</p><h3 id="replaceChild"><a href="#replaceChild" class="headerlink" title="replaceChild()"></a>replaceChild()</h3><p>实现子节点(对象)的替换。返回被替换对象的引用。 </p><p>   node.replaceChild (newnode,oldnew) </p><p>参数:<br>newnode: 必需，用于替换 oldnew 的对象<br>oldnew: 必需，被 newnode 替换的对象</p><p>注意:<br>1.当 oldnode 被替换时，所有与之相关的属性内容都将被移除<br>2.newnode 必须先被建立。 </p><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement()"></a>createElement()</h3><p>可创建元素节点,返回一个 Element 对象</p><pre><code>document.createElement(tagName)</code></pre><p>说明:<br>tagName：字符串值，这个字符串用来指明创建元素的类型<br>注意：要与appendChild() 或 insertBefore()<br>      方法联合使用，将元素显示在页面中。</p><p>调用方式:<br>eg:创建一个连接</p><pre><code>var main = document.body;var at=document.createElement(&quot;a&quot;);main.appendChild(at);</code></pre><h3 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode()"></a>createTextNode()</h3><p>创建新的文本节点，返回新创建的 Text 节点</p><pre><code>document.createTextNode(data)</code></pre><p>说明：<br>data : 字符串值，可规定此节点的文本。</p><p>调用方式:<br>eg:创建一个div，并在里面写上”i love JaveScript”</p><p>  var element=document.createElement(“div”);<br>  var text=document.createTextNode(“i love JaveScript”);<br>  element.appendChild(text);<br>  document.body.appendChild(element);</p><h3 id="clientHeight-amp-amp-clientWidth"><a href="#clientHeight-amp-amp-clientWidth" class="headerlink" title="clientHeight&amp;&amp;clientWidth"></a>clientHeight&amp;&amp;clientWidth</h3><p>获得浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）<br>在不同浏览器都实用的 JavaScript 方案：</p><pre><code>var w= document.documentElement.clientWidth      || document.body.clientWidth;var h= document.documentElement.clientHeight      || document.body.clientHeight;</code></pre><h3 id="scrollHeight-amp-amp-scrollWidth"><a href="#scrollHeight-amp-amp-scrollWidth" class="headerlink" title="scrollHeight&amp;&amp;scrollWidth"></a>scrollHeight&amp;&amp;scrollWidth</h3><p>获取网页内容高度和宽度。</p><pre><code>var w=document.documentElement.scrollWidth           || document.body.scrollWidth;var h=document.documentElement.scrollHeight          || document.body.scrollHeight;</code></pre><h3 id="offsetHeight-amp-amp-offsetWidth"><a href="#offsetHeight-amp-amp-offsetWidth" class="headerlink" title="offsetHeight&amp;&amp;offsetWidth"></a>offsetHeight&amp;&amp;offsetWidth</h3><p>获取网页内容高度和宽度<br>(包括滚动条等边线，会随窗口的显示大小改变)<br>offsetHeight = clientHeight + 滚动条 + 边框。</p><pre><code>var w= document.documentElement.offsetWidth    || document.body.offsetWidth;var h= document.documentElement.offsetHeight    || document.body.offsetHeight;</code></pre><h3 id="网页卷去的距离与偏移量"><a href="#网页卷去的距离与偏移量" class="headerlink" title="网页卷去的距离与偏移量"></a>网页卷去的距离与偏移量</h3><pre><code>scrollLeft:设置或获取位于给定对象左边界           与窗口中目前可见内容的最左端之间的距离 scrollTop:设置或获取位于对象最顶端          与窗口中可见内容的最顶端之间的距离 offsetLeft:获取指定对象相对于版面           或由offsetParent属性指定的           父坐标的计算左侧位置offsetTop:获取指定对象相对于版面          或由offsetParent属性指定的          父坐标的计算顶端位置</code></pre><p>注意:<br>offsetParent：布局中设置postion属性<br>              (Relative、Absolute、fixed)的父容器<br>              从最近的父节点开始，一层层向上找<br>              直到HTML的body</p><p>参考:<br><a href="http://blog.csdn.net/xiebaochun/article/details/38382169" target="_blank" rel="noopener">http://blog.csdn.net/xiebaochun/article/details/38382169</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js进阶学习four&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶(三)</title>
    <link href="https://sollylee.github.io/2018/02/08/JavaScript%E8%BF%9B%E9%98%B6-%E4%B8%89/"/>
    <id>https://sollylee.github.io/2018/02/08/JavaScript进阶-三/</id>
    <published>2018-02-08T08:23:33.000Z</published>
    <updated>2018-02-09T07:34:57.365Z</updated>
    
    <content type="html"><![CDATA[<p>javascript进阶学习总结三</p><a id="more"></a><h1 id="浏览器对象-BOM"><a href="#浏览器对象-BOM" class="headerlink" title="浏览器对象(BOM)"></a>浏览器对象(BOM)</h1><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><h3 id="java计时器"><a href="#java计时器" class="headerlink" title="java计时器"></a>java计时器</h3><p>在JavaScript中，我们可以在设定的时间间隔之后来执行代码<br>而不是在函数被调用后立即执行。</p><p>计时器类型：<br>一次性计时器：仅在指定的延迟时间之后触发一次。<br>间隔性触发计时器：每隔一定的时间间隔就触发一次。</p><pre><code>setTimeout():指定的延迟时间之后来执行代码。clearTimeout():取消setTimeout的设置。setInterval():每隔指定的时间执行代码。clearInterval():取消setInterval()设置。</code></pre><h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h4><p>在执行时,从载入页面后每隔指定的时间执行代码。</p><pre><code>setInterval(代码,交互时间);</code></pre><p>说明：<br>1.代码：要调用的函数或要执行的代码串</p><p>2.交互时间：周期性执行或调用表达式之间的时间间隔<br>            以毫秒计（1s=1000ms）</p><p>返回值:<br>一个可以传递给 clearInterval()<br>从而取消对”代码”的周期性执行的值</p><p>调用方式(假设有一个clock()函数):</p><pre><code>setInterval(&quot;clock()&quot;,1000)          或setInterval(clock,1000)</code></pre><h4 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a>clearInterval()</h4><p>clearInterval() 方法可取消由 setInterval() 设置的交互时间</p><p>   clearInterval(id_of_setInterval)</p><p>说明:</p><p>id_of_setInterval：由 setInterval() 返回的 ID 值。</p><h4 id="计时器setTimeout"><a href="#计时器setTimeout" class="headerlink" title="计时器setTimeout()"></a>计时器setTimeout()</h4><p>setTimeout()计时器，在载入后延迟指定时间后,<br>去执行一次表达式,仅执行一次</p><pre><code>setTimeout(代码,延迟时间);</code></pre><p>说明：<br>1.代码: 要调用的函数或要执行的代码串</p><p>2.延时时间：在执行代码前需等待的时间，<br>            以毫秒为单位（1s=1000ms)。</p><h4 id="取消计时器clearTimeout"><a href="#取消计时器clearTimeout" class="headerlink" title="取消计时器clearTimeout()"></a>取消计时器clearTimeout()</h4><p>setTimeout()和clearTimeout()一起使用，停止计时器</p><pre><code>clearTimeout(id_of_setTimeout)</code></pre><p>参数说明:<br>id_of_setTimeout：由 setTimeout() 返回的 ID 值</p><h2 id="History-对象"><a href="#History-对象" class="headerlink" title="History 对象"></a>History 对象</h2><p>history对象记录了用户曾经浏览过的页面(URL)，并可以实现浏览器前进与后退相似导航的功能</p><pre><code>window.history.[属性|方法]</code></pre><p>History对象属性:</p><pre><code>length  返回浏览器历史列表中的URL数量</code></pre><p>History对象方法</p><pre><code>back()  加载history列表中的前一个URLforward()  加载history列表中的后一个URLgo()  加载history列表中的某个具体的页面go(0) 当前页面go(1) 相当forward()go(-1) 相等back()go(n) 访问history的url列表中相对位置的URL</code></pre><h2 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h2><p>location用于获取或设置窗体的URL，并且可以用于解析URL</p><pre><code>location.[属性|方法]</code></pre><p>location对象属性:</p><pre><code>hash  设置或返回从井号（#）开始的URL（锚）host  设置或返回主机名和当前URL的端口号hostname 设置或返回当前URL的主机名href 设置或返回当前URL。pathname 设置或返回当前URL的路径部分port  设置或返回当前URL的协议。search  设置或返回从问号（？）开始的URL(查询部分)</code></pre><p>location对象方法:</p><pre><code>assign()  加载新的文档reload()  重新加载当前文档replace()  用新的文档替换当前文档</code></pre><h2 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h2><p>Navigator 对象包含有关浏览器的信息<br>通常用于检测浏览器与操作系统的版本</p><pre><code>Navigator.属性</code></pre><p>Navigator对象属性:</p><pre><code>appCodeName 浏览器代码名的字符串表示appName  返回浏览器的名称appVersiion  返回浏览器的平台和版本信息platform  返回运行浏览器的操作系统平台userAgent  返回由客户机发送服务器的user-agent头部的值</code></pre><h2 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h2><p>screen对象用于获取用户的屏幕信息</p><pre><code>window.screen.属性</code></pre><p>screen对象属性:</p><pre><code>availHeight：窗口可以使用的屏幕高度，单位像素；availWidth：窗口可以使用的屏幕宽度，单位像素；colorDepth：用户浏览器表示的颜色位数，            通常为32位(每像素的位数)pixelDepth：用户浏览器表示的颜色位数，            通常为32位(每像素的位数)            (IE不支持此属性)height：屏幕的高度，单位像素；width：屏幕的宽度，单位像素；</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript进阶学习总结三&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶(二)</title>
    <link href="https://sollylee.github.io/2018/02/05/JavaScript%E8%BF%9B%E9%98%B6-%E4%BA%8C/"/>
    <id>https://sollylee.github.io/2018/02/05/JavaScript进阶-二/</id>
    <published>2018-02-05T04:32:25.000Z</published>
    <updated>2018-02-05T11:12:24.979Z</updated>
    
    <content type="html"><![CDATA[<p>js进阶学习总结two<br><a id="more"></a></p><h2 id="js内置对象"><a href="#js内置对象" class="headerlink" title="js内置对象"></a>js内置对象</h2><h3 id="Date-日期对象"><a href="#Date-日期对象" class="headerlink" title="Date 日期对象"></a>Date 日期对象</h3><p>日期对象可以储存任意一个日期，<br>并且可以精确到毫秒数（1/1000 秒）。<br>定义一个时间对象 :</p><pre><code>var Udate=new Date(); </code></pre><p>访问方法语法：“&lt;日期对象&gt;.&lt;方法&gt;”<br>Date对象中处理时间和日期的常用方法：</p><pre><code>get/setDate()     返回/设置日期get/setFullYear() 返回/设置年份，用四位数表示get/setYear()   返回/设置年份get/setHours()  返回/设置小时 24小时get/setMouth()  返回/设置月份 0-11月 所以要加一get/setMinutes() 返回/设置分钟get/setTime()    返回/设置时间，毫秒为单位，计算从 1970 年 1 月 1 日零时到日期对象所指的日期的毫秒数。</code></pre><p>可以在设置时间上推迟时间:<br>eg:时间推迟 1 小时<br>就是: “x.setTime(x.getTime() + 60 <em> 60 </em> 1000);”</p><p>获取星期的方法:<br>getDay() 返回星期，返回的是0-6的数字，0 表示星期天。<br>如果要返回相对应“星期”，<br>通过数组完成，代码如下:</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  var mydate=new Date();  var weekday=[&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,  &quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;];  document.write(&quot;今天是：&quot;+ weekday[mydate.getDay()]);&lt;/script&gt;</code></pre><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p>定义字符串的方法就是直接赋值。<br>eg：</p><pre><code>var mystr = &quot;Hello World&quot;</code></pre><p>访问字符串对象的属性length:</p><pre><code>stringObject.length; 返回该字符串的长度。</code></pre><p>访问字符串对象的方法：</p><pre><code>stringObject.方法toUpperCase() 将字符串所有小写字母转换为大写toLowerCase() 将字符串所有大写字母转换为小写</code></pre><h4 id="charAt-index"><a href="#charAt-index" class="headerlink" title="charAt(index)"></a>charAt(index)</h4><p>返回指定位置的字符(index为字符下标,必填)<br>返回的字符是长度为 1 的字符串。</p><p>注意：</p><p>1.字符串中第一个字符的下标是0。<br>  最后一个字符的下标为字符串长度减一(string.length-1)</p><p>2.如果参数index不在 0 与string.length-1之间，<br>  该方法将返回一个空字符串</p><p>3.空格也算一个字符</p><h4 id="indexOf-substring-startpos"><a href="#indexOf-substring-startpos" class="headerlink" title="indexOf(substring, startpos)"></a>indexOf(substring, startpos)</h4><p>返回某个指定的字符串值在字符串中首次出现的位置.<br>substring(必填), startpos(可选参数)</p><p>说明：</p><p>1.该方法将从头到尾地检索字符串stringObject,<br>  看它是否含有子串substring</p><p>2.可选参数，从stringObject的startpos位置开始查找substring，<br>如果没有此参数将从stringObject的开始位置查找。</p><p>3.如果找到一个 substring，则返回substring的第一次出现的位置<br>stringObject 中的字符位置是从 0 开始的</p><p>若要检索的字符串值没有出现，则返回-1</p><h4 id="字符串分割split-separator-limit"><a href="#字符串分割split-separator-limit" class="headerlink" title="字符串分割split(separator,limit)"></a>字符串分割split(separator,limit)</h4><p>将字符串分割为字符串数组，并返回此数组。</p><p>sparator为必填参数，以该参数为标志分割数组</p><p>limit为可选参数，分割次数，设置后，<br>返回的字符串不会超过分割次数,省略后将返回所有分割的字符串</p><p>注意：如果把空字符串(“”)作为separator,<br>那么stringObject中的每个字符之间都会被分割。</p><h4 id="substring-startPos-stopPos"><a href="#substring-startPos-stopPos" class="headerlink" title="substring(startPos,stopPos)"></a>substring(startPos,stopPos)</h4><p>提取字符串中介于两个指定下标之间的字符</p><p>startPos为必填参数，一个非负整数，开始位置</p><p>stopPos为可填参数，一个非负整数，结束位置,<br>省略后默认为字符串末尾</p><p>注意：</p><p>1.返回的内容是从start开始(包含start位置的字符)到stop-1 处的所有字符，其长度为 stop 减start。</p><p>2.如果参数 start 与 stop 相等，<br>那么该方法返回的就是一个空串(即长度为 0 的字符串)</p><p>3.如果 start 比 stop 大，<br>那么该方法在提取子串之前会先交换这两个参数。</p><h4 id="substr-startPos-length"><a href="#substr-startPos-length" class="headerlink" title="substr(startPos,length)"></a>substr(startPos,length)</h4><p>从字符串中提取从 startPos位置开始的指定数目的字符串。</p><p>startPos为必填参数,开始位置.必须是数值</p><p>length为可填参数,提取的字符串长度,省略则返回从startPos<br>到字符串对象的结尾的字符</p><p>注意：</p><p>1.如果参数startPos是负数，从字符串的尾部开始算起的位置。<br>即:-1 指字符串中最后一个字符，-2指倒数第二个字符,以此类推</p><p>2.如果startPos为负数且绝对值大于字符串长度，startPos为0。</p><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math对象，提供对数据的数学计算。<br>Math对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法<br>eg：<br>      var mypi=Math.PI; //获取π值<br>调用方式: Math.方法<br>常用方法:</p><pre><code>ceil(X) 对一个数进行向上取整，X必填,为一个数值。下同floor(X) 对一个数进行向下取整。round(X) 把一个数字四舍五入为最接近的整数。random() 返回介于 0 ~ 1（大于或等于 0 但小于 1 )         之间的一个随机数。</code></pre><h3 id="数组对象-补充"><a href="#数组对象-补充" class="headerlink" title="数组对象(补充)"></a>数组对象(补充)</h3><p>数组方法:</p><p>调用方式:    arrayObject.方法</p><pre><code>concat()    连接两个或更多的数组，并返回结果join()      把数组的所有元素放入一个字符串            元素通过指定的分隔符进行分隔pop()       删除并返回数组的最后一个元素push()      向数组的未尾添加一个或多个元素            并返回新的长度reverse()   颠倒数组中的元素顺序shift()     删除并返回数组的第一个元素slice()     从某个已有的数组返回选定的元素sort()      对数组的元素进行排序splice()    删除元素，并向数组添加新元素toSource()  返回该对象的源代码toString()  把数组转换为字符串，并返回结果</code></pre><p>部分方法详解:</p><h4 id="concat-array1-array2-…-arrayN"><a href="#concat-array1-array2-…-arrayN" class="headerlink" title="concat(array1,array2,…,arrayN)"></a>concat(array1,array2,…,arrayN)</h4><p>连接两个或多个数组。返回一个新数组(副本)，不改变原来的数组。<br>array1为要连接的第一个数组，以此类推</p><h4 id="join-separator"><a href="#join-separator" class="headerlink" title="join(separator)"></a>join(separator)</h4><p>把数组中的所有元素放入一个字符串。<br>元素是通过指定的分隔符进行分隔的。<br>sperator为可选参数，指定的分隔符，省略默认为 逗号</p><p>注意：<br>返回的字符串中，是把数组中的各个元素串起来，<br>用&lt;分隔符&gt;置于元素与元素之间。<br>这个方法不影响数组原本的内容。</p><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>用于颠倒数组中元素的顺序</p><p>该方法会改变原来的数组，而不会创建新的数组。</p><h4 id="slice-start-end"><a href="#slice-start-end" class="headerlink" title="slice(start, end)"></a>slice(start, end)</h4><p>从已有的数组中返回选定的元素。</p><p>返回一个新的数组，<br>包含从 start 到 end(不包括end)的arrayObject中的元素<br>该方法并不会修改数组，而是返回一个子数组。</p><p>start 为必填参数(数值)，开始选取的位置，若为负数<br>则从数组末尾开始往回数</p><p>end 为可选参数，结束的位置，省略默认从start到数组末尾</p><p>String.slice() 与 Array.slice() 相似。</p><h4 id="sort-sortMethod"><a href="#sort-sortMethod" class="headerlink" title="sort(sortMethod)"></a>sort(sortMethod)</h4><p>使数组中的元素按照一定的顺序排列。</p><p>sortMethod为可填参数，规定排序顺序，必须为函数<br>说明：</p><p>1.如果不指定&lt;方法函数&gt;，则按unicode码顺序排列。<br>2.如果指定&lt;方法函数&gt;，则按&lt;方法函数&gt;所指定的排序方法排序。</p><p>注意:</p><p>该函数要比较两个值，<br>然后返回一个用于说明这两个值的相对顺序的数字。<br>比较函数应该具有两个参数 a 和 b，<br>其返回值如下： </p><p>  若返回值&lt;=-1，则表示 A 在排序后的序列中出现在 B 之前。<br>  若返回值&gt;-1 &amp;&amp; <1，则表示 a="" 和="" b="" 具有相同的排序顺序。="" 若返回值="">=1，则表示 A 在排序后的序列中出现在 B 之后。</1，则表示></p><p>升序：</p><pre><code>function sortNum(a,b) {      return a - b;     //如降序，把“a - b”该成“b - a”}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js进阶学习总结two&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶(一)</title>
    <link href="https://sollylee.github.io/2018/02/02/JavaScript%E8%BF%9B%E9%98%B6-%E4%B8%80/"/>
    <id>https://sollylee.github.io/2018/02/02/JavaScript进阶-一/</id>
    <published>2018-02-02T10:50:49.000Z</published>
    <updated>2018-02-02T12:02:56.744Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript进阶学习总结（一）<br><a id="more"></a></p><h2 id="js基础语法补充"><a href="#js基础语法补充" class="headerlink" title="js基础语法补充"></a>js基础语法补充</h2><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>js中拥有:<br>算术操作符(+、-、 * , /、–、++等)，<br>比较操作符(&lt;、&gt;、&gt;=、&lt;=、==、!=)，<br>逻辑操作符(&amp;&amp;、||、！)。功能与C语言一致。</p><p>算术运算符<br>主要用来完成类似加减乘除，自增自减的工作，<br>在JS中，“+”不只代表加法，还可以连接两个字符串</p><p>比较操作符<br>主要用于两个操作数的比较，成立返回true，否则返回false</p><p>逻辑运算符<br>主要用于条件判断，成立返回true，否则返回false</p><p>操作符之间的优先级（高到低）:<br>算术操作符 → 比较操作符 → 逻辑操作符 → “=”赋值符号</p><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><pre><code>var 变量名=new Array();</code></pre><p>js的数组元素下标也是从0开始的,<br>元素成员也是  变量名[num]  来表示，<br>不过要注意的是：</p><pre><code>1.创建的新数组是空数组，没有值，如输出，则显示undefined。2.虽然创建数组时，指定了长度，但实际上数组都是变长的，也就是说即使指定了长度为8，仍然可以将元素存储在规定长度以外</code></pre><p>数组长度:</p><pre><code>myarray.length; //获得数组myarray的长度</code></pre><p>二维数组的定义有两种方式:</p><pre><code>1.var myarr=new Array();  //先声明一维 for(var i=0;i&lt;2;i++)    //一维长度为2{          myarr[i]=new Array();  //再声明二维        for(var j=0;j&lt;3;j++)   //二维长度为3      {              myarr[i][j]=i+j;   //赋值，每个数组元素的值为i+j   } }2. var myarr = [[0 , 1 , 2 ],[1 , 2 , 3]]  //myarr[2][3]</code></pre><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>js中有if语句、if-else语句、if-else嵌套语句<br>while语句、do-while语句（不用在最后加 ; ）<br>for语句、switch语句、continue、break语句。</p><p>它们的功能语法与C语言的一致。</p><h4 id="if-else嵌套"><a href="#if-else嵌套" class="headerlink" title="if-else嵌套:"></a>if-else嵌套:</h4><pre><code>if(条件1){ 条件1成立时执行的代码}else  if(条件2){ 条件2成立时执行的代码}...else  if(条件n){ 条件n成立时执行的代码}else{ 条件1、2至n不成立时执行的代码}</code></pre><h4 id="while循环语句："><a href="#while循环语句：" class="headerlink" title="while循环语句："></a>while循环语句：</h4><pre><code>while(判断条件){    循环语句}</code></pre><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句:"></a>switch语句:</h4><pre><code>switch(表达式){case值1:  执行代码块 1  break;case值2:  执行代码块 2  break;...case值n:  执行代码块 n  break;default:  与 case值1、...case值n 不同时执行的代码}</code></pre><h4 id="for循环语句："><a href="#for循环语句：" class="headerlink" title="for循环语句："></a>for循环语句：</h4><pre><code>for(初始化变量;循环条件;循环迭代){         循环语句  }</code></pre><h4 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do-while语句"></a>do-while语句</h4><pre><code>do{    循环语句}while(判断条件)</code></pre><h2 id="事件响应"><a href="#事件响应" class="headerlink" title="事件响应"></a>事件响应</h2><p>在网页中，如使用事件，就在该元素中设置事件属性。<br>eg:</p><pre><code>&lt; input  .... 事件=&quot;函数名()&quot; /&gt;</code></pre><h3 id="鼠标单击事件-onclick"><a href="#鼠标单击事件-onclick" class="headerlink" title="鼠标单击事件(onclick)"></a>鼠标单击事件(onclick)</h3><p>onclick是鼠标单击事件，当在网页上单击鼠标时，<br>就会发生该事件。同时onclick事件调用的程序块就会被执行，<br>通常与按钮一起使用。</p><h3 id="鼠标经过事件（onmouseover）"><a href="#鼠标经过事件（onmouseover）" class="headerlink" title="鼠标经过事件（onmouseover）"></a>鼠标经过事件（onmouseover）</h3><p>鼠标经过事件，当鼠标移到一个对象上时，<br>该对象就触发onmouseover事件，并执行onmouseover事件调用的程序</p><h3 id="鼠标移开事件（onmouseout）"><a href="#鼠标移开事件（onmouseout）" class="headerlink" title="鼠标移开事件（onmouseout）"></a>鼠标移开事件（onmouseout）</h3><p>鼠标移开事件，当鼠标移开当前对象时，执行onmouseout调用的程序</p><h3 id="光标聚焦事件（onfocus）"><a href="#光标聚焦事件（onfocus）" class="headerlink" title="光标聚焦事件（onfocus）"></a>光标聚焦事件（onfocus）</h3><p>当网页中的对象获得聚点时，执行onfocus调用的程序就会被执行</p><h3 id="失焦事件（onblur）"><a href="#失焦事件（onblur）" class="headerlink" title="失焦事件（onblur）"></a>失焦事件（onblur）</h3><p>onblur事件与onfocus是相对事件，<br>当光标离开当前获得聚焦对象的时候，触发onblur事件，<br>同时执行被调用的程序。</p><h3 id="内容选中事件（onselect）"><a href="#内容选中事件（onselect）" class="headerlink" title="内容选中事件（onselect）"></a>内容选中事件（onselect）</h3><p>选中事件，当文本框或者文本域中的文字被选中时，<br>触发onselect事件，同时调用的程序就会被执行。</p><h3 id="文本框内容改变事件（onchange）"><a href="#文本框内容改变事件（onchange）" class="headerlink" title="文本框内容改变事件（onchange）"></a>文本框内容改变事件（onchange）</h3><p>通过改变文本框的内容来触发onchange事件，同时执行被调用的程序</p><h3 id="加载事件（onload）"><a href="#加载事件（onload）" class="headerlink" title="加载事件（onload）"></a>加载事件（onload）</h3><p>事件会在页面加载完成后，立即发生，同时执行被调用的程序。<br>注意：1. 加载页面时，触发onload事件，事件写在&lt; body &gt;标签内</p><h3 id="卸载事件（onunload）"><a href="#卸载事件（onunload）" class="headerlink" title="卸载事件（onunload）"></a>卸载事件（onunload）</h3><p>当用户退出页面时（页面关闭、页面刷新等），<br>触发onUnload事件，同时执行被调用的程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript进阶学习总结（一）&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript入门</title>
    <link href="https://sollylee.github.io/2018/02/01/JavaScript%E5%85%A5%E9%97%A8/"/>
    <id>https://sollylee.github.io/2018/02/01/JavaScript入门/</id>
    <published>2018-02-01T09:10:28.000Z</published>
    <updated>2018-02-02T11:57:49.743Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript入门(基础学习总结)<br><a id="more"></a></p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><p>一行的结束就被认定为语句的结束，通常在结尾加上一个分号”;”来表示语句的结束。</p><p>javascript作为一种脚本语言可以放在html页面中任何位置。<br>但浏览器解释html时是按先后顺序的，所以前面的script就先被执行。<br>比如进行页面显示初始化的js必须放在head里面,<br>因为初始化都要求提前进行(如给页面body设置css等);<br>而如果是通过事件调用执行的function那么对位置没什么要求的。</p><h3 id="js文件引用"><a href="#js文件引用" class="headerlink" title="js文件引用"></a>js文件引用</h3><pre><code>&lt;script src=&quot;文件名&quot;&gt;&lt;/script&gt;</code></pre><h3 id="js注释"><a href="#js注释" class="headerlink" title="js注释"></a>js注释</h3><pre><code>//   注释一行/**/ 注释多行</code></pre><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><pre><code>var  变量名;</code></pre><p>注意:</p><pre><code>1. 变量名必须以下划线&apos;_&apos;、英文字母或美元符号&apos;$&apos;开始.2. 变量名可以使用任意多个英文字母，数字，下划线，或者美元符号组成3. 变量名不能使用JavaScript关键词和JavaScript保留字</code></pre><p>可以给变量赋值数字，字母，字符串，true或false.</p><p>附：</p><p>javascript保留字：</p><pre><code>abstract、enum、int、short、boolean、export、interface、static、byte、extends、long、super、char、final、native、synchronized、class、float、package、throws、const、goto、private、tranisientdebugger、implements、protected、volatile、double、import、public</code></pre><p>javascript关键字：</p><pre><code>break、else、new、var、case、finally、return、void、catch、for、switch、while、default、if、throw、delete、in、try、do、instanceof、typeof</code></pre><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><pre><code>function 函数名(形参){    函数代码;    return  返回值;}</code></pre><p>形参和返回语句可有可无，<br>返回值可以是数字，字母，字符串，ture/false<br>返回值可以用变量取接。</p><p>调用函数： 函数名(参数);</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><pre><code>if(条件){ 条件成立时执行的代码 }else{ 条件不成立时执行的代码 }</code></pre><h3 id="输出内容-document-write"><a href="#输出内容-document-write" class="headerlink" title="输出内容(document.write())"></a>输出内容(document.write())</h3><p>第一种:输出内容用””括起，直接输出””号内的内容。</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  document.write(&quot;I love JavaScript！&quot;); //内容用&quot;&quot;括起来，&quot;&quot;里的内容直接输出。&lt;/script&gt;</code></pre><p>第二种:通过变量，输出内容</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  var mystr=&quot;hello world!&quot;;  document.write(mystr);  //直接写变量名，输出变量存储的内容。&lt;/script&gt;</code></pre><p>第三种:输出多项内容，内容之间用+号连接。</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  var mystr=&quot;hello&quot;;  document.write(mystr+&quot;I love JavaScript&quot;);   //多项内容之间用+号连接&lt;/script&gt;</code></pre><p>第四种:输出HTML标签，并起作用，标签使用””括起来。</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  var mystr=&quot;hello&quot;;document.write(mystr+&quot;&lt;br&gt;&quot;);//输出hello后，输出一个换行符  document.write(&quot;JavaScript&quot;);&lt;/script&gt;</code></pre><p> 输出时，加上“white-space:pre”(空白会被浏览器保留)样式，<br> 可以输出空格。</p><h2 id="常用互动语法"><a href="#常用互动语法" class="headerlink" title="常用互动语法"></a>常用互动语法</h2><h3 id="js-警告"><a href="#js-警告" class="headerlink" title="js-警告"></a>js-警告</h3><pre><code>alert(字符串);</code></pre><p>alert 弹出消息对话框(包含一个确定按钮)。</p><h3 id="js-确定-confirm消息对话框"><a href="#js-确定-confirm消息对话框" class="headerlink" title="js-确定(confirm消息对话框)"></a>js-确定(confirm消息对话框)</h3><pre><code>confirm(str);</code></pre><p>str:在消息对话框中要显示的文本</p><p>返回值:<br>        按下“确定”，返回true<br>        按下“取消”，返回false</p><p>返回值用于判断语句。</p><h3 id="js-提问-prompt"><a href="#js-提问-prompt" class="headerlink" title="js-提问(prompt)"></a>js-提问(prompt)</h3><pre><code>prompt(str1,str2);</code></pre><p>str1:要显示在消息对话框中的文本，不可修改</p><p>str2:文本框的内容，可以修改</p><p>返回值：<br>        点击确定，文本框中的内容作为返回值<br>        点击取消，返回null</p><h3 id="js-打开新窗口-window-open"><a href="#js-打开新窗口-window-open" class="headerlink" title="js-打开新窗口(window.open)"></a>js-打开新窗口(window.open)</h3><pre><code>window.open([URl],[窗口名称],[参数字符串])</code></pre><p>URL：可选参数，在窗口中要显示网页的网址或路径。<br>如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。</p><p>窗口名称：可选参数，被打开窗口的名称。</p><p>注意：<br>    1.该名称由字母、数字和下划线字符组成。</p><pre><code>2.&quot;_top&quot;、&quot;_blank&quot;、&quot;_self&quot;具有特殊意义的名称。    _blank：在新窗口显示目标网页    _self：在当前窗口显示目标网页    _top：框架网页中在上部窗口中显示目标网页3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。4.name 不能包含有空格。</code></pre><p>参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。</p><pre><code>参数          值                     说明 top         Number        窗口顶部离屏幕顶部的像素数left         Number        窗口左侧离屏幕左侧的像素数width        Number               窗口的高度height       Number               窗口的宽度menubar      yes/no             窗口有没有菜单toolbar      yes/no             窗口有没有工具条scrollbars   yes/no             窗口有没有滚动条status       yes/no             窗口有没有状态栏</code></pre><h3 id="js-关闭窗口-window-close"><a href="#js-关闭窗口-window-close" class="headerlink" title="js-关闭窗口(window.close)"></a>js-关闭窗口(window.close)</h3><pre><code>window.close;//关闭本窗口</code></pre><p>或</p><pre><code>&lt;窗口对象&gt;.close();//关闭指定窗口</code></pre><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>文档对象模型DOM（Document Object Model）<br>定义访问和处理HTML文档的标准方法。<br>DOM 将HTML文档呈现为带有元素、属性和文本的树结构(节点树)</p><p>元素节点：&lt; html &gt; &lt; body &gt; &lt; p &gt; 等标签</p><p>文本节点：向用户展示的内容,如&lt; li &gt;间的文本</p><p>属性节点: 元素属性，如&lt; a &gt;标签的链接属性 herf=””</p><h3 id="获取id"><a href="#获取id" class="headerlink" title="获取id"></a>获取id</h3><pre><code>document.getElementById(&quot;id&quot;)</code></pre><p>以变量接取，var i=document.getElementById(“id”);</p><h3 id="innerHTML属性"><a href="#innerHTML属性" class="headerlink" title="innerHTML属性"></a>innerHTML属性</h3><p>innerHTML(区分大小写)属性用于获取或替换HTML元素的内容</p><pre><code>object.innerHTML//object为获取的对象，下同</code></pre><p>eg:</p><pre><code>&lt; p id=&quot;con&quot;&gt;xxxxxx&lt; /p &gt;var i=document.getElementById(&quot;con&quot;);i.innerHTML=&quot;hello world&quot; //修改p中的内容为&quot;hello world&quot;</code></pre><h3 id="改变HTML样式"><a href="#改变HTML样式" class="headerlink" title="改变HTML样式"></a>改变HTML样式</h3><pre><code>object.style.display=&quot;value&quot;;</code></pre><p>value:<br>    none   此元素不会被显示(隐藏)</p><pre><code>block  此元素将显示为块级元素(显示)</code></pre><h3 id="控制类名-className属性"><a href="#控制类名-className属性" class="headerlink" title="控制类名(className属性)"></a>控制类名(className属性)</h3><pre><code>object.className=classname;</code></pre><p>作用：<br>    1.获取元素的class属性<br>    2.为网页内的某个元素指定一个css样式来改变外观</p><h3 id="取消获取的样式"><a href="#取消获取的样式" class="headerlink" title="取消获取的样式"></a>取消获取的样式</h3><pre><code>1. object.removeAttribute(&quot;style&quot;);2. object.style=null;3.object.style=&quot;&quot;;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript入门(基础学习总结)&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://sollylee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>sublime使用技巧</title>
    <link href="https://sollylee.github.io/2018/01/28/sublime%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://sollylee.github.io/2018/01/28/sublime使用技巧/</id>
    <published>2018-01-28T01:42:37.000Z</published>
    <updated>2018-08-01T02:28:30.896Z</updated>
    
    <content type="html"><![CDATA[<p>前端工具sublime的使用技巧，从慕课中总结而来</p><a id="more"></a><h2 id="一些插件及与其相关的快捷键的使用："><a href="#一些插件及与其相关的快捷键的使用：" class="headerlink" title="一些插件及与其相关的快捷键的使用："></a>一些插件及与其相关的快捷键的使用：</h2><p>安装Packet：菜单栏View-&gt;Show Console-&gt;粘贴text2或text3的Packet配置信息-&gt;重启软件-&gt;Ct+N（新建文档）-&gt;Ct+Sh+P-&gt;输入pci-&gt;查找要安装的插件</p><h3 id="Emmet插件："><a href="#Emmet插件：" class="headerlink" title="Emmet插件："></a>Emmet插件：</h3><p>安装好Emmet插件后：</p><pre><code>！+Ct+E:迅速生成html的基础元素Ct+P:查找时加 #元素名；找到后，若要在该行下新加一行，可按 Ct+Enter上一行  Ct+Sh+Enterul&gt;.item$*10 ,再按Ct+E，则一次性生成10个&lt;li class=&quot;item(1/2/3/../10)&quot;&gt;&lt;/li&gt; 即 父元素&gt; .（表示有class标签或用 # 表示有id值）类名（id名）$*（子元素出现次数），再Ct+E在文本中写 h2{this is good} 再按Ct+E,则生成 &lt;h2&gt;this is good&lt;/h2&gt;Ct+ 键盘上含 } 的键：文本缩进Ct+Sh+V：粘贴时保持复制时的格式，如缩进等</code></pre><h3 id="insert-callback插件"><a href="#insert-callback插件" class="headerlink" title="insert callback插件"></a>insert callback插件</h3><pre><code>Alt+C：删除多于的符号</code></pre><h3 id="advanNew"><a href="#advanNew" class="headerlink" title="advanNew"></a>advanNew</h3><p>Ctrl+Shift+P打开命令模式，<br>输入”pci”（Package Control:Install Package），<br>在提示框输入”adva”，选”AdvancedNewFile”进行安装。</p><pre><code>安装完成后使用&quot;Ctrl+Alt+N&quot;</code></pre><p>选在屏幕下方出现的输入框中输入”test.html”，创建了一个html文件；</p><p>输入框中输入”public/css/test.css”，<br>则在public目录下的css中创建了一个test.css文件；</p><p>输入框中输入”public/css/sass/test.sass”，<br>则在public目录下的css中创建了一个sass文件夹<br>并在其中创建了一个test.sass文件。</p><h3 id="httpRequester"><a href="#httpRequester" class="headerlink" title="httpRequester"></a>httpRequester</h3><pre><code>Ctrl+Shift+P打开命令模式，输入&quot;pci&quot;（Package Control:Install Package），在提示框输入&quot;http&quot;，选&quot;Http Requester&quot;进行安装。</code></pre><p>安装完成后要使用注解的方式来标记函数需要测试的路由地址</p><p>在Sublime内部，做服务器响应的测试Get请求</p><pre><code>/* GET users listing. */// localhost:3000/users/router.get(&apos;/&apos;, function(req, res) {res.send(&apos;respond with a resource&apos;);});</code></pre><p>注释需要测试的路由地址”// localhost:3000/users/“（localhost为路由地址，3000为端口号）<br>选中”localhost:3000/users/“，<br>使用快捷键”Alt+Ctrl+R”，出现新的页面显示服务器的响应，<br>“200 OK”表示服务器响应正确。</p><p>get请求比较容易测试，可以在浏览器中输入地址；<br>post请求比较难以测试<br>以前测试post请求需要完成一个表单（用html语言写），<br>然后模拟提交，这样不利于开发</p><p>不需要前端form表单的情况下来模拟form提交，先完成post请求<br>在Sublime内部，做服务器响应的测试Post请求</p><pre><code>/* POST localhost:3000/users/Content-type: application/x-www-form-urlencodedPOST_BODY:variable1=avalue&amp;variable2=1234&amp;variable3=anothervalue*/router.post(&apos;/&apos;, function(req, res) {res.send(req.body);});（POST：访问地址是一个post请求，&quot;localhost:3000/users/&quot;是访问的地址，&quot;Content-type...anothervalue&quot;指定是以form表单形式提交）选中&quot;/* */&quot;内的注释，使用快捷键&quot;Alt+Ctrl+R&quot;，出现新的页面显示服务器的响应，&quot;200 OK&quot;表示服务器响应正确</code></pre><h3 id="netauke-Snip"><a href="#netauke-Snip" class="headerlink" title="netauke Snip"></a>netauke Snip</h3><h3 id="sidebar-enhancement"><a href="#sidebar-enhancement" class="headerlink" title="sidebar enhancement"></a>sidebar enhancement</h3><p>右击对应文档，有直接浏览该页的选项</p><h3 id="docblockr"><a href="#docblockr" class="headerlink" title="docblockr"></a>docblockr</h3><p>用于简化注释拼写</p><pre><code>/** +Tab键 ：可有函数的注释格式/** 或 /* + 回车键：其余注释符自动补充输入/*按回车，补充行注释。输入/**按回车，补充多行注释。在写好的函数上方输入/**按tab键，自动补充函数说明格式。Ctrl+/: 行注释;Ctrl+Shift+/: 块注释.</code></pre><h3 id="sublimelinter-jshlint"><a href="#sublimelinter-jshlint" class="headerlink" title="sublimelinter-jshlint"></a>sublimelinter-jshlint</h3><pre><code>用于语法、风格的检验安装jsnode插件 -&gt; 安装sublimelinter-jshlint插件 -&gt;运行cmd，输入 npm install -g jshint -&gt;最后到sulimt软件里检验补充9.html代码对齐插件html beautiful；安装后快捷键ctr + alt + shift + f</code></pre><h3 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h3><p>ctrl+shift+p —&gt;Install Package —&gt;<br>找到SideBarEnhancements<br>安装SideBarEnhancements</p><p>配置预览快捷键</p><p>Preferences —&gt; Key Bindings - User 将以下代码复制到数组中。</p><pre><code>// chrome{ &quot;keys&quot;: [&quot;f2&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,&quot;args&quot;: {&quot;paths&quot;: [],&quot;application&quot;: &quot;C:/Program Files (x86)/Google/Chrome/Application/chrome.exe&quot;,&quot;extensions&quot;:&quot;.*&quot;}},// firefox{ &quot;keys&quot;: [&quot;f3&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,&quot;args&quot;: {&quot;paths&quot;: [],&quot;application&quot;: &quot;D:/Program Files (x86)/Mozilla Firefox/firefox.exe&quot;,&quot;extensions&quot;:&quot;.*&quot;}},// ie{ &quot;keys&quot;: [&quot;f4&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,&quot;args&quot;: {&quot;paths&quot;: [],&quot;application&quot;: &quot;C:/Program Files/Internet Explorer/iexplore.exe&quot;,&quot;extensions&quot;:&quot;.*&quot;}}</code></pre><p>上面的代码中有两处需要注意的地方，<br>一个是keys表示快捷键，即f2可以启动chrome进行预览。<br>另一个是application，表示浏览器所在的安装路径，<br>只有路径配置正确，才能够正常调用浏览器</p><h3 id="nettus-fetch插件"><a href="#nettus-fetch插件" class="headerlink" title="nettus fetch插件"></a>nettus fetch插件</h3><pre><code>ctrl+shift+p---&gt;输入nettus fetch回车---&gt;ctrl_shift+p---&gt;输入fetch manage来管理配置文件</code></pre><p>使用fetch来下载jquery步骤：</p><pre><code>ctrl+alt+n在某个目录下创建一个jQuery文件---&gt;在该文件中输入ctrl+shift+p---&gt;输入fetch file回车---&gt;jquery回车下载。</code></pre><p>在fetch配置文件中来增加新的类库（如：underscore.js）：<br>步骤如下：</p><pre><code>在该文件中添加&quot;underscore&quot;:&quot;http://github.com/jashkenas/underscore/blob/master/underscore.min.js&quot;和前一个参数以&quot;逗号&quot;来分隔。ctrl+alt+n在某个目录下创建一个underscore文件---&gt;在该文件中输入ctrl+shift+p---&gt;输入fetch file回车---&gt;jquery回车下载。</code></pre><p>到github下载underscore.js文件<br>github上的underscore文件地址：</p><pre><code>https://raw.githubusercontent.com/jashkenas/underscore/master/underscore-min.js</code></pre><h2 id="快捷键的使用"><a href="#快捷键的使用" class="headerlink" title="快捷键的使用"></a>快捷键的使用</h2><p>1、Ctrl+H：查找替换<br>2、Ctrl+D：选择游标所在单词，连续Ctrl+D实现多行选择<br>（选择与第一次选择相同的单词）<br>3、Ctrl+K Ctrl+D：跳过当前选择，选择下一个<br>4、Ctrl+shift+D：复制游标所在行<br>5、Ctrl+F3：选择所以与游标所在单词相同的单词<br>6、全选：先Ctrl+A全选然后Ctrl+shift+L产生游标<br>7、按住shift，右键，拖动，产生多行游标<br>8、Ctrl+P 的作用是：搜索项目中的文件 go to anything<br>9、Ctrl+Shift+P 快捷键的作用是：打开命令模式<br>10、Ctrl+Shift+K 的快捷键是：删除整行<br>11、ctrl+shift+v 保持缩进粘贴<br>12、Ctrl+] 增加缩进 [ 减小缩进。<br>13、Alt+. 闭合标签<br>14、Alt+&gt; 闭合标签<br>15、Ctrl+? 注释一行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端工具sublime的使用技巧，从慕课中总结而来&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://sollylee.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端工具" scheme="https://sollylee.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sollylee.github.io/2018/01/27/hello-world/"/>
    <id>https://sollylee.github.io/2018/01/27/hello-world/</id>
    <published>2018-01-27T11:56:45.915Z</published>
    <updated>2018-01-28T01:35:53.986Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
