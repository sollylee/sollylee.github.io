<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript进阶学习(四)]]></title>
    <url>%2Fsollylee.github.io%2F2018%2F02%2F08%2FJavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0-%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[js进阶学习four DOM对象补充###获取DOM对象方法 方法 说明 获得 getElementByID 通过指定id获取元素 一个 getElementsByName 通过元素名称name属性获取元素 一组 getElementsByTagName 通过标签名获取元素 一组 getAttribute()通过元素节点的属性名称获取属性的值。 elementNode.getAttribute(name) 说明:1.elementNode：元素节点。下同。2.name：要想查询的元素节点的属性名字 如: id,title setAttribute()方法增加一个指定名称和值的新属性，或者把一个现有的属性设定为指定的值。 elementNode.setAttribute(name,value) 说明：1.name: 要设置的属性名。2.value: 要设置的属性值。 注意：把指定的属性设置为指定的值如果不存在具有指定名称的属性，该方法将创建一个新属性 节点属性在文档对象模型 (DOM) 中，每个节点都是一个对象。 DOM 节点有三个重要的属性 ： nodeName 节点的名称 nodeValue 节点的值 nodeType 节点的类型 nodeName节点的名称，是只读的。 元素节点的 nodeName 与标签名相同 属性节点的 nodeName 是属性的名称 文本节点的 nodeName 永远是 #text 文档节点的 nodeName 永远是 #document nodeValue节点的值 元素节点的 nodeValue 是 undefined 或 null 文本节点的 nodeValue 是文本自身 属性节点的 nodeValue 是属性的值 nodeType节点的类型，是只读的。以下常用的几种结点类型: 元素类型 节点类型 元素 1 属性 2 文本 3 注释 8 文档 9 访问子节点childNodes访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，它具有length属性 elementNode.childNodes 注意：1.如果选定的节点没有子节点， 则该属性返回不包含节点的 NodeList2.IE全系列、firefox、chrome、opera、safari兼容问题3.节点之间的空白符， 在firefox、chrome、opera、safari浏览器是文本节点 ####firstChild返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。 node.firstChild 说明：与elementNode.childNodes[0]是同样的效果。 ####lastChild返回‘childNodes’数组的最后一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。 node.lastChild 说明：elementNode.childNodes[elementNode.childNodes.length-1]是同样的效果。 访问父节点parentNode获取指定节点的父节点 elementNode.parentNode 若想继续指向祖节点可以继续加上 .parenetNodeeg: elementNode.parentNode.parentNode ###访问兄弟节点 nextSibling可返回某个节点之后紧跟的节点（处于同一树层级中） nodeObject.nextSibling 说明：如果无此节点，则该属性返回 null。 ####previousSibling可返回某个节点之前紧跟的节点（处于同一树层级中） nodeObject.previousSibling 说明：如果无此节点，则该属性返回 null。 注意: 两个属性获取的是节点。Internet Explorer 会忽略节点间生成的空白文本节点(如换行符号)而其它浏览器不会忽略。 可以通过判断该节点的nodeType是否为1，来知道是否为元素节点 appendChild()在指定节点的最后一个子节点列表之后添加一个新的子节点 appendChild(newnode) 说明：newnode：指定追加的节点 insertBefore()在已有的子节点前插入一个新的子节点。 insertBefore(newnode,node); 说明：newnode: 要插入的新节点node: 指定此节点前插入节点 注意: otest.insertBefore(newnode,node);也可以改为: otest.insertBefore(newnode,otest.childNodes[0]); removeChild()从子节点列表中删除某个节点如删除成功，返回被删除的节点如失败，则返回 NULL nodeObject.removeChild(node) 说明:node：必需，指定需要删除的节点 注意: 把删除的子节点赋值给x，这个子节点不在DOM树中 但是还存在内存中，可通过 x 操作 如果要完全删除对象，给 x 赋 null 值。 replaceChild()实现子节点(对象)的替换。返回被替换对象的引用。 node.replaceChild (newnode,oldnew) 参数:newnode: 必需，用于替换 oldnew 的对象oldnew: 必需，被 newnode 替换的对象 注意:1.当 oldnode 被替换时，所有与之相关的属性内容都将被移除2.newnode 必须先被建立。 createElement()可创建元素节点,返回一个 Element 对象 document.createElement(tagName) 说明:tagName：字符串值，这个字符串用来指明创建元素的类型注意：要与appendChild() 或 insertBefore() 方法联合使用，将元素显示在页面中。 调用方式:eg:创建一个连接 var main = document.body; var at=document.createElement(&quot;a&quot;); main.appendChild(at); createTextNode()创建新的文本节点，返回新创建的 Text 节点 document.createTextNode(data) 说明：data : 字符串值，可规定此节点的文本。 调用方式:eg:创建一个div，并在里面写上”i love JaveScript” var element=document.createElement(“div”); var text=document.createTextNode(“i love JaveScript”); element.appendChild(text); document.body.appendChild(element); clientHeight&amp;&amp;clientWidth获得浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）在不同浏览器都实用的 JavaScript 方案： var w= document.documentElement.clientWidth || document.body.clientWidth; var h= document.documentElement.clientHeight || document.body.clientHeight; scrollHeight&amp;&amp;scrollWidth获取网页内容高度和宽度。 var w=document.documentElement.scrollWidth || document.body.scrollWidth; var h=document.documentElement.scrollHeight || document.body.scrollHeight; offsetHeight&amp;&amp;offsetWidth获取网页内容高度和宽度(包括滚动条等边线，会随窗口的显示大小改变)offsetHeight = clientHeight + 滚动条 + 边框。 var w= document.documentElement.offsetWidth || document.body.offsetWidth; var h= document.documentElement.offsetHeight || document.body.offsetHeight; 网页卷去的距离与偏移量scrollLeft:设置或获取位于给定对象左边界 与窗口中目前可见内容的最左端之间的距离 scrollTop:设置或获取位于对象最顶端 与窗口中可见内容的最顶端之间的距离 offsetLeft:获取指定对象相对于版面 或由offsetParent属性指定的 父坐标的计算左侧位置 offsetTop:获取指定对象相对于版面 或由offsetParent属性指定的 父坐标的计算顶端位置 注意:offsetParent：布局中设置postion属性 (Relative、Absolute、fixed)的父容器 从最近的父节点开始，一层层向上找 直到HTML的body 参考:http://blog.csdn.net/xiebaochun/article/details/38382169]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript进阶(三)]]></title>
    <url>%2Fsollylee.github.io%2F2018%2F02%2F08%2FJavaScript%E8%BF%9B%E9%98%B6-%E4%B8%89%2F</url>
    <content type="text"><![CDATA[javascript进阶学习总结三 浏览器对象(BOM)window对象java计时器在JavaScript中，我们可以在设定的时间间隔之后来执行代码而不是在函数被调用后立即执行。 计时器类型：一次性计时器：仅在指定的延迟时间之后触发一次。间隔性触发计时器：每隔一定的时间间隔就触发一次。 setTimeout():指定的延迟时间之后来执行代码。 clearTimeout():取消setTimeout的设置。 setInterval():每隔指定的时间执行代码。 clearInterval():取消setInterval()设置。 setInterval()在执行时,从载入页面后每隔指定的时间执行代码。 setInterval(代码,交互时间); 说明：1.代码：要调用的函数或要执行的代码串 2.交互时间：周期性执行或调用表达式之间的时间间隔 以毫秒计（1s=1000ms） 返回值:一个可以传递给 clearInterval()从而取消对”代码”的周期性执行的值 调用方式(假设有一个clock()函数): setInterval(&quot;clock()&quot;,1000) 或 setInterval(clock,1000) clearInterval()clearInterval() 方法可取消由 setInterval() 设置的交互时间 clearInterval(id_of_setInterval) 说明: id_of_setInterval：由 setInterval() 返回的 ID 值。 计时器setTimeout()setTimeout()计时器，在载入后延迟指定时间后,去执行一次表达式,仅执行一次 setTimeout(代码,延迟时间); 说明：1.代码: 要调用的函数或要执行的代码串 2.延时时间：在执行代码前需等待的时间， 以毫秒为单位（1s=1000ms)。 取消计时器clearTimeout()setTimeout()和clearTimeout()一起使用，停止计时器 clearTimeout(id_of_setTimeout) 参数说明:id_of_setTimeout：由 setTimeout() 返回的 ID 值 History 对象history对象记录了用户曾经浏览过的页面(URL)，并可以实现浏览器前进与后退相似导航的功能 window.history.[属性|方法] History对象属性: length 返回浏览器历史列表中的URL数量 History对象方法 back() 加载history列表中的前一个URL forward() 加载history列表中的后一个URL go() 加载history列表中的某个具体的页面 go(0) 当前页面 go(1) 相当forward() go(-1) 相等back() go(n) 访问history的url列表中相对位置的URL Location对象location用于获取或设置窗体的URL，并且可以用于解析URL location.[属性|方法] location对象属性: hash 设置或返回从井号（#）开始的URL（锚） host 设置或返回主机名和当前URL的端口号 hostname 设置或返回当前URL的主机名 href 设置或返回当前URL。 pathname 设置或返回当前URL的路径部分 port 设置或返回当前URL的协议。 search 设置或返回从问号（？）开始的URL(查询部分) location对象方法: assign() 加载新的文档 reload() 重新加载当前文档 replace() 用新的文档替换当前文档 Navigator对象Navigator 对象包含有关浏览器的信息通常用于检测浏览器与操作系统的版本 Navigator.属性 Navigator对象属性: appCodeName 浏览器代码名的字符串表示 appName 返回浏览器的名称 appVersiion 返回浏览器的平台和版本信息 platform 返回运行浏览器的操作系统平台 userAgent 返回由客户机发送服务器的user-agent头部的值 screen对象screen对象用于获取用户的屏幕信息 window.screen.属性 screen对象属性: availHeight：窗口可以使用的屏幕高度，单位像素； availWidth：窗口可以使用的屏幕宽度，单位像素； colorDepth：用户浏览器表示的颜色位数， 通常为32位(每像素的位数) pixelDepth：用户浏览器表示的颜色位数， 通常为32位(每像素的位数) (IE不支持此属性) height：屏幕的高度，单位像素； width：屏幕的宽度，单位像素；]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript进阶(二)]]></title>
    <url>%2Fsollylee.github.io%2F2018%2F02%2F05%2FJavaScript%E8%BF%9B%E9%98%B6-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[js进阶学习总结two js内置对象Date 日期对象日期对象可以储存任意一个日期，并且可以精确到毫秒数（1/1000 秒）。定义一个时间对象 : var Udate=new Date(); 访问方法语法：“&lt;日期对象&gt;.&lt;方法&gt;”Date对象中处理时间和日期的常用方法： get/setDate() 返回/设置日期 get/setFullYear() 返回/设置年份，用四位数表示 get/setYear() 返回/设置年份 get/setHours() 返回/设置小时 24小时 get/setMouth() 返回/设置月份 0-11月 所以要加一 get/setMinutes() 返回/设置分钟 get/setTime() 返回/设置时间，毫秒为单位，计算从 1970 年 1 月 1 日零时到日期对象所指的日期的毫秒数。 可以在设置时间上推迟时间:eg:时间推迟 1 小时就是: “x.setTime(x.getTime() + 60 60 1000);” 获取星期的方法:getDay() 返回星期，返回的是0-6的数字，0 表示星期天。如果要返回相对应“星期”，通过数组完成，代码如下: &lt;script type=&quot;text/javascript&quot;&gt; var mydate=new Date(); var weekday=[&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;, &quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;]; document.write(&quot;今天是：&quot;+ weekday[mydate.getDay()]); &lt;/script&gt; 字符串对象定义字符串的方法就是直接赋值。eg： var mystr = &quot;Hello World&quot; 访问字符串对象的属性length: stringObject.length; 返回该字符串的长度。 访问字符串对象的方法： stringObject.方法 toUpperCase() 将字符串所有小写字母转换为大写 toLowerCase() 将字符串所有大写字母转换为小写 charAt(index)返回指定位置的字符(index为字符下标,必填)返回的字符是长度为 1 的字符串。 注意： 1.字符串中第一个字符的下标是0。 最后一个字符的下标为字符串长度减一(string.length-1) 2.如果参数index不在 0 与string.length-1之间， 该方法将返回一个空字符串 3.空格也算一个字符 indexOf(substring, startpos)返回某个指定的字符串值在字符串中首次出现的位置.substring(必填), startpos(可选参数) 说明： 1.该方法将从头到尾地检索字符串stringObject, 看它是否含有子串substring 2.可选参数，从stringObject的startpos位置开始查找substring，如果没有此参数将从stringObject的开始位置查找。 3.如果找到一个 substring，则返回substring的第一次出现的位置stringObject 中的字符位置是从 0 开始的 若要检索的字符串值没有出现，则返回-1 字符串分割split(separator,limit)将字符串分割为字符串数组，并返回此数组。 sparator为必填参数，以该参数为标志分割数组 limit为可选参数，分割次数，设置后，返回的字符串不会超过分割次数,省略后将返回所有分割的字符串 注意：如果把空字符串(“”)作为separator,那么stringObject中的每个字符之间都会被分割。 substring(startPos,stopPos)提取字符串中介于两个指定下标之间的字符 startPos为必填参数，一个非负整数，开始位置 stopPos为可填参数，一个非负整数，结束位置,省略后默认为字符串末尾 注意： 1.返回的内容是从start开始(包含start位置的字符)到stop-1 处的所有字符，其长度为 stop 减start。 2.如果参数 start 与 stop 相等，那么该方法返回的就是一个空串(即长度为 0 的字符串) 3.如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。 substr(startPos,length)从字符串中提取从 startPos位置开始的指定数目的字符串。 startPos为必填参数,开始位置.必须是数值 length为可填参数,提取的字符串长度,省略则返回从startPos到字符串对象的结尾的字符 注意： 1.如果参数startPos是负数，从字符串的尾部开始算起的位置。即:-1 指字符串中最后一个字符，-2指倒数第二个字符,以此类推 2.如果startPos为负数且绝对值大于字符串长度，startPos为0。 Math对象Math对象，提供对数据的数学计算。Math对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法eg： var mypi=Math.PI; //获取π值调用方式: Math.方法常用方法: ceil(X) 对一个数进行向上取整，X必填,为一个数值。下同 floor(X) 对一个数进行向下取整。 round(X) 把一个数字四舍五入为最接近的整数。 random() 返回介于 0 ~ 1（大于或等于 0 但小于 1 ) 之间的一个随机数。 数组对象(补充)数组方法: 调用方式: arrayObject.方法 concat() 连接两个或更多的数组，并返回结果 join() 把数组的所有元素放入一个字符串 元素通过指定的分隔符进行分隔 pop() 删除并返回数组的最后一个元素 push() 向数组的未尾添加一个或多个元素 并返回新的长度 reverse() 颠倒数组中的元素顺序 shift() 删除并返回数组的第一个元素 slice() 从某个已有的数组返回选定的元素 sort() 对数组的元素进行排序 splice() 删除元素，并向数组添加新元素 toSource() 返回该对象的源代码 toString() 把数组转换为字符串，并返回结果 部分方法详解: concat(array1,array2,…,arrayN)连接两个或多个数组。返回一个新数组(副本)，不改变原来的数组。array1为要连接的第一个数组，以此类推 join(separator)把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的。sperator为可选参数，指定的分隔符，省略默认为 逗号 注意：返回的字符串中，是把数组中的各个元素串起来，用&lt;分隔符&gt;置于元素与元素之间。这个方法不影响数组原本的内容。 reverse()用于颠倒数组中元素的顺序 该方法会改变原来的数组，而不会创建新的数组。 slice(start, end)从已有的数组中返回选定的元素。 返回一个新的数组，包含从 start 到 end(不包括end)的arrayObject中的元素该方法并不会修改数组，而是返回一个子数组。 start 为必填参数(数值)，开始选取的位置，若为负数则从数组末尾开始往回数 end 为可选参数，结束的位置，省略默认从start到数组末尾 String.slice() 与 Array.slice() 相似。 sort(sortMethod)使数组中的元素按照一定的顺序排列。 sortMethod为可填参数，规定排序顺序，必须为函数说明： 1.如果不指定&lt;方法函数&gt;，则按unicode码顺序排列。2.如果指定&lt;方法函数&gt;，则按&lt;方法函数&gt;所指定的排序方法排序。 注意: 该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下： 若返回值&lt;=-1，则表示 A 在排序后的序列中出现在 B 之前。 若返回值&gt;-1 &amp;&amp; =1，则表示 A 在排序后的序列中出现在 B 之后。 升序： function sortNum(a,b) { return a - b; //如降序，把“a - b”该成“b - a” }]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript进阶(一)]]></title>
    <url>%2Fsollylee.github.io%2F2018%2F02%2F02%2FJavaScript%E8%BF%9B%E9%98%B6-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[JavaScript进阶学习总结（一） js基础语法补充操作符js中拥有:算术操作符(+、-、 * , /、–、++等)，比较操作符(&lt;、&gt;、&gt;=、&lt;=、==、!=)，逻辑操作符(&amp;&amp;、||、！)。功能与C语言一致。 算术运算符主要用来完成类似加减乘除，自增自减的工作，在JS中，“+”不只代表加法，还可以连接两个字符串 比较操作符主要用于两个操作数的比较，成立返回true，否则返回false 逻辑运算符主要用于条件判断，成立返回true，否则返回false 操作符之间的优先级（高到低）:算术操作符 → 比较操作符 → 逻辑操作符 → “=”赋值符号 定义数组var 变量名=new Array(); js的数组元素下标也是从0开始的,元素成员也是 变量名[num] 来表示，不过要注意的是： 1.创建的新数组是空数组，没有值，如输出，则显示undefined。 2.虽然创建数组时，指定了长度，但实际上数组都是变长的， 也就是说即使指定了长度为8，仍然可以将元素存储在规定长度以外 数组长度: myarray.length; //获得数组myarray的长度 二维数组的定义有两种方式: 1. var myarr=new Array(); //先声明一维 for(var i=0;i&lt;2;i++) //一维长度为2 { myarr[i]=new Array(); //再声明二维 for(var j=0;j&lt;3;j++) //二维长度为3 { myarr[i][j]=i+j; //赋值，每个数组元素的值为i+j } } 2. var myarr = [[0 , 1 , 2 ],[1 , 2 , 3]] //myarr[2][3] 流程控制js中有if语句、if-else语句、if-else嵌套语句while语句、do-while语句（不用在最后加 ; ）for语句、switch语句、continue、break语句。 它们的功能语法与C语言的一致。 if-else嵌套:if(条件1) { 条件1成立时执行的代码} else if(条件2) { 条件2成立时执行的代码} ... else if(条件n) { 条件n成立时执行的代码} else { 条件1、2至n不成立时执行的代码} while循环语句：while(判断条件) { 循环语句 } switch语句:switch(表达式) { case值1: 执行代码块 1 break; case值2: 执行代码块 2 break; ... case值n: 执行代码块 n break; default: 与 case值1、...case值n 不同时执行的代码 } for循环语句：for(初始化变量;循环条件;循环迭代) { 循环语句 } do-while语句do { 循环语句 } while(判断条件) 事件响应在网页中，如使用事件，就在该元素中设置事件属性。eg: &lt; input .... 事件=&quot;函数名()&quot; /&gt; 鼠标单击事件(onclick)onclick是鼠标单击事件，当在网页上单击鼠标时，就会发生该事件。同时onclick事件调用的程序块就会被执行，通常与按钮一起使用。 鼠标经过事件（onmouseover）鼠标经过事件，当鼠标移到一个对象上时，该对象就触发onmouseover事件，并执行onmouseover事件调用的程序 鼠标移开事件（onmouseout）鼠标移开事件，当鼠标移开当前对象时，执行onmouseout调用的程序 光标聚焦事件（onfocus）当网页中的对象获得聚点时，执行onfocus调用的程序就会被执行 失焦事件（onblur）onblur事件与onfocus是相对事件，当光标离开当前获得聚焦对象的时候，触发onblur事件，同时执行被调用的程序。 内容选中事件（onselect）选中事件，当文本框或者文本域中的文字被选中时，触发onselect事件，同时调用的程序就会被执行。 文本框内容改变事件（onchange）通过改变文本框的内容来触发onchange事件，同时执行被调用的程序 加载事件（onload）事件会在页面加载完成后，立即发生，同时执行被调用的程序。注意：1. 加载页面时，触发onload事件，事件写在&lt; body &gt;标签内 卸载事件（onunload）当用户退出页面时（页面关闭、页面刷新等），触发onUnload事件，同时执行被调用的程序。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript入门]]></title>
    <url>%2Fsollylee.github.io%2F2018%2F02%2F01%2FJavaScript%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[JavaScript入门(基础学习总结) 基础语法基本规则一行的结束就被认定为语句的结束，通常在结尾加上一个分号”;”来表示语句的结束。 javascript作为一种脚本语言可以放在html页面中任何位置。但浏览器解释html时是按先后顺序的，所以前面的script就先被执行。比如进行页面显示初始化的js必须放在head里面,因为初始化都要求提前进行(如给页面body设置css等);而如果是通过事件调用执行的function那么对位置没什么要求的。 js文件引用&lt;script src=&quot;文件名&quot;&gt;&lt;/script&gt; js注释// 注释一行 /**/ 注释多行 定义变量var 变量名; 注意: 1. 变量名必须以下划线&apos;_&apos;、英文字母或美元符号&apos;$&apos;开始. 2. 变量名可以使用任意多个英文字母，数字，下划线，或者美元符号组成 3. 变量名不能使用JavaScript关键词和JavaScript保留字 可以给变量赋值数字，字母，字符串，true或false. 附： javascript保留字： abstract、enum、int、short、boolean、export、interface、 static、byte、extends、long、super、char、final、native、 synchronized、class、float、package、throws、const、goto、 private、tranisientdebugger、implements、protected、volatile、 double、import、public javascript关键字： break、else、new、var、case、finally、return、void、catch、 for、switch、while、default、if、throw、delete、in、 try、do、instanceof、typeof 定义函数function 函数名(形参) { 函数代码; return 返回值; } 形参和返回语句可有可无，返回值可以是数字，字母，字符串，ture/false返回值可以用变量取接。 调用函数： 函数名(参数); 条件语句if(条件) { 条件成立时执行的代码 } else { 条件不成立时执行的代码 } 输出内容(document.write())第一种:输出内容用””括起，直接输出””号内的内容。 &lt;script type=&quot;text/javascript&quot;&gt; document.write(&quot;I love JavaScript！&quot;); //内容用&quot;&quot;括起来，&quot;&quot;里的内容直接输出。 &lt;/script&gt; 第二种:通过变量，输出内容 &lt;script type=&quot;text/javascript&quot;&gt; var mystr=&quot;hello world!&quot;; document.write(mystr); //直接写变量名，输出变量存储的内容。 &lt;/script&gt; 第三种:输出多项内容，内容之间用+号连接。 &lt;script type=&quot;text/javascript&quot;&gt; var mystr=&quot;hello&quot;; document.write(mystr+&quot;I love JavaScript&quot;); //多项内容之间用+号连接 &lt;/script&gt; 第四种:输出HTML标签，并起作用，标签使用””括起来。 &lt;script type=&quot;text/javascript&quot;&gt; var mystr=&quot;hello&quot;; document.write(mystr+&quot;&lt;br&gt;&quot;);//输出hello后，输出一个换行符 document.write(&quot;JavaScript&quot;); &lt;/script&gt; 输出时，加上“white-space:pre”(空白会被浏览器保留)样式， 可以输出空格。 常用互动语法js-警告alert(字符串); alert 弹出消息对话框(包含一个确定按钮)。 js-确定(confirm消息对话框)confirm(str); str:在消息对话框中要显示的文本 返回值: 按下“确定”，返回true 按下“取消”，返回false 返回值用于判断语句。 js-提问(prompt)prompt(str1,str2); str1:要显示在消息对话框中的文本，不可修改 str2:文本框的内容，可以修改 返回值： 点击确定，文本框中的内容作为返回值 点击取消，返回null js-打开新窗口(window.open)window.open([URl],[窗口名称],[参数字符串]) URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。 窗口名称：可选参数，被打开窗口的名称。 注意： 1.该名称由字母、数字和下划线字符组成。 2.&quot;_top&quot;、&quot;_blank&quot;、&quot;_self&quot;具有特殊意义的名称。 _blank：在新窗口显示目标网页 _self：在当前窗口显示目标网页 _top：框架网页中在上部窗口中显示目标网页 3.相同 name 的窗口只能创建一个， 要想创建多个窗口则 name 不能相同。 4.name 不能包含有空格。 参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。 参数 值 说明 top Number 窗口顶部离屏幕顶部的像素数 left Number 窗口左侧离屏幕左侧的像素数 width Number 窗口的高度 height Number 窗口的宽度 menubar yes/no 窗口有没有菜单 toolbar yes/no 窗口有没有工具条 scrollbars yes/no 窗口有没有滚动条 status yes/no 窗口有没有状态栏 js-关闭窗口(window.close)window.close;//关闭本窗口 或 &lt;窗口对象&gt;.close();//关闭指定窗口 DOM文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有元素、属性和文本的树结构(节点树) 元素节点：&lt; html &gt; &lt; body &gt; &lt; p &gt; 等标签 文本节点：向用户展示的内容,如&lt; li &gt;间的文本 属性节点: 元素属性，如&lt; a &gt;标签的链接属性 herf=”” 获取iddocument.getElementById(&quot;id&quot;) 以变量接取，var i=document.getElementById(“id”); innerHTML属性innerHTML(区分大小写)属性用于获取或替换HTML元素的内容 object.innerHTML//object为获取的对象，下同 eg: &lt; p id=&quot;con&quot;&gt;xxxxxx&lt; /p &gt; var i=document.getElementById(&quot;con&quot;); i.innerHTML=&quot;hello world&quot; //修改p中的内容为&quot;hello world&quot; 改变HTML样式object.style.display=&quot;value&quot;; value: none 此元素不会被显示(隐藏) block 此元素将显示为块级元素(显示) 控制类名(className属性)object.className=classname; 作用： 1.获取元素的class属性 2.为网页内的某个元素指定一个css样式来改变外观 取消获取的样式1. object.removeAttribute(&quot;style&quot;); 2. object.style=null; 3.object.style=&quot;&quot;;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime使用技巧]]></title>
    <url>%2Fsollylee.github.io%2F2018%2F01%2F28%2Fsublime%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[前端工具sublime的使用技巧，从慕课中总结而来 一些插件及与其相关的快捷键的使用：安装Packet：菜单栏View-&gt;Show Console-&gt;粘贴text2或text3的Packet配置信息-&gt;重启软件-&gt;Ct+N（新建文档）-&gt;Ct+Sh+P-&gt;输入pci-&gt;查找要安装的插件 Emmet插件：安装好Emmet插件后： ！+Ct+E:迅速生成html的基础元素 Ct+P:查找时加 #元素名；找到后，若要在该行下新加一行，可按 Ct+Enter 上一行 Ct+Sh+Enter ul&gt;.item$*10 ,再按Ct+E， 则一次性生成10个&lt;li class=&quot;item(1/2/3/../10)&quot;&gt;&lt;/li&gt; 即 父元素&gt; .（表示有class标签或用 # 表示有id值） 类名（id名）$*（子元素出现次数），再Ct+E 在文本中写 h2{this is good} 再按Ct+E, 则生成 &lt;h2&gt;this is good&lt;/h2&gt; Ct+ 键盘上含 } 的键：文本缩进 Ct+Sh+V：粘贴时保持复制时的格式，如缩进等 insert callback插件Alt+C：删除多于的符号 advanNewCtrl+Shift+P打开命令模式，输入”pci”（Package Control:Install Package），在提示框输入”adva”，选”AdvancedNewFile”进行安装。 安装完成后使用&quot;Ctrl+Alt+N&quot; 选在屏幕下方出现的输入框中输入”test.html”，创建了一个html文件； 输入框中输入”public/css/test.css”，则在public目录下的css中创建了一个test.css文件； 输入框中输入”public/css/sass/test.sass”，则在public目录下的css中创建了一个sass文件夹并在其中创建了一个test.sass文件。 httpRequesterCtrl+Shift+P打开命令模式， 输入&quot;pci&quot;（Package Control:Install Package）， 在提示框输入&quot;http&quot;，选&quot;Http Requester&quot;进行安装。 安装完成后要使用注解的方式来标记函数需要测试的路由地址 在Sublime内部，做服务器响应的测试Get请求 /* GET users listing. */ // localhost:3000/users/ router.get(&apos;/&apos;, function(req, res) { res.send(&apos;respond with a resource&apos;); }); 注释需要测试的路由地址”// localhost:3000/users/“（localhost为路由地址，3000为端口号）选中”localhost:3000/users/“，使用快捷键”Alt+Ctrl+R”，出现新的页面显示服务器的响应，“200 OK”表示服务器响应正确。 get请求比较容易测试，可以在浏览器中输入地址；post请求比较难以测试以前测试post请求需要完成一个表单（用html语言写），然后模拟提交，这样不利于开发 不需要前端form表单的情况下来模拟form提交，先完成post请求在Sublime内部，做服务器响应的测试Post请求 /* POST localhost:3000/users/ Content-type: application/x-www-form-urlencoded POST_BODY: variable1=avalue&amp;variable2=1234&amp;variable3=anothervalue */ router.post(&apos;/&apos;, function(req, res) { res.send(req.body);}); （POST：访问地址是一个post请求， &quot;localhost:3000/users/&quot;是访问的地址， &quot;Content-type...anothervalue&quot;指定是以form表单形式提交） 选中&quot;/* */&quot;内的注释， 使用快捷键&quot;Alt+Ctrl+R&quot;，出现新的页面显示服务器的响应， &quot;200 OK&quot;表示服务器响应正确 netauke Snipsidebar enhancement右击对应文档，有直接浏览该页的选项 docblockr用于简化注释拼写 /** +Tab键 ：可有函数的注释格式 /** 或 /* + 回车键：其余注释符自动补充 输入/*按回车，补充行注释。 输入/**按回车，补充多行注释。 在写好的函数上方输入/**按tab键，自动补充函数说明格式。 Ctrl+/: 行注释; Ctrl+Shift+/: 块注释. sublimelinter-jshlint用于语法、风格的检验 安装jsnode插件 -&gt; 安装sublimelinter-jshlint插件 -&gt;运行cmd， 输入 npm install -g jshint -&gt;最后到sulimt软件里检验 补充9.html代码对齐插件html beautiful； 安装后快捷键ctr + alt + shift + f SideBarEnhancementsctrl+shift+p —&gt;Install Package —&gt;找到SideBarEnhancements安装SideBarEnhancements 配置预览快捷键 Preferences —&gt; Key Bindings - User 将以下代码复制到数组中。 // chrome { &quot;keys&quot;: [&quot;f2&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: { &quot;paths&quot;: [], &quot;application&quot;: &quot;C:/Program Files (x86)/Google/Chrome/Application/chrome.exe&quot;, &quot;extensions&quot;:&quot;.*&quot; } }, // firefox { &quot;keys&quot;: [&quot;f3&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: { &quot;paths&quot;: [], &quot;application&quot;: &quot;D:/Program Files (x86)/Mozilla Firefox/firefox.exe&quot;, &quot;extensions&quot;:&quot;.*&quot; } }, // ie { &quot;keys&quot;: [&quot;f4&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: { &quot;paths&quot;: [], &quot;application&quot;: &quot;C:/Program Files/Internet Explorer/iexplore.exe&quot;, &quot;extensions&quot;:&quot;.*&quot; } } 上面的代码中有两处需要注意的地方，一个是keys表示快捷键，即f2可以启动chrome进行预览。另一个是application，表示浏览器所在的安装路径，只有路径配置正确，才能够正常调用浏览器 nettus fetch插件ctrl+shift+p---&gt;输入nettus fetch回车 ---&gt;ctrl_shift+p---&gt;输入fetch manage来管理配置文件 使用fetch来下载jquery步骤： ctrl+alt+n 在某个目录下创建一个jQuery文件---&gt; 在该文件中输入ctrl+shift+p---&gt; 输入fetch file回车---&gt;jquery回车下载。 在fetch配置文件中来增加新的类库（如：underscore.js）：步骤如下： 在该文件中添加&quot;underscore&quot;: &quot;http://github.com /jashkenas/underscore/blob/master/underscore.min.js&quot; 和前一个参数以&quot;逗号&quot;来分隔。 ctrl+alt+n 在某个目录下创建一个underscore文件---&gt; 在该文件中输入ctrl+shift+p---&gt; 输入fetch file回车---&gt;jquery回车下载。 到github下载underscore.js文件github上的underscore文件地址： https://raw.githubusercontent.com/ jashkenas/underscore/master/underscore-min.js 快捷键的使用1、Ctrl+H：查找替换2、Ctrl+D：选择游标所在单词，连续Ctrl+D实现多行选择（选择与第一次选择相同的单词）3、Ctrl+K Ctrl+D：跳过当前选择，选择下一个4、Ctrl+shift+D：复制游标所在行5、Ctrl+F3：选择所以与游标所在单词相同的单词6、全选：先Ctrl+A全选然后Ctrl+shift+L产生游标7、按住shift，右键，拖动，产生多行游标8、Ctrl+P 的作用是：搜索项目中的文件 go to anything9、Ctrl+Shift+P 快捷键的作用是：打开命令模式10、Ctrl+Shift+K 的快捷键是：删除整行11、ctrl+shift+v 保持缩进粘贴12、Ctrl+] 增加缩进 [ 减小缩进。13、Alt+. 闭合标签14、Alt+&gt; 闭合标签15、Ctrl+? 注释一行]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fsollylee.github.io%2F2018%2F01%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
