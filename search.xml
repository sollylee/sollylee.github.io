<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript进阶(一)]]></title>
    <url>%2Fsollylee.github.io%2F2018%2F02%2F02%2FJavaScript%E8%BF%9B%E9%98%B6-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[JavaScript进阶学习总结（一） js基础语法补充操作符js中拥有:算术操作符(+、-、 * , /、–、++等)，比较操作符(&lt;、&gt;、&gt;=、&lt;=、==、!=)，逻辑操作符(&amp;&amp;、||、！)。功能与C语言一致。 算术运算符主要用来完成类似加减乘除，自增自减的工作，在JS中，“+”不只代表加法，还可以连接两个字符串 比较操作符主要用于两个操作数的比较，成立返回true，否则返回false 逻辑运算符主要用于条件判断，成立返回true，否则返回false 操作符之间的优先级（高到低）:算术操作符 → 比较操作符 → 逻辑操作符 → “=”赋值符号 定义数组var 变量名=new Array(); js的数组元素下标也是从0开始的,元素成员也是 变量名[num] 来表示，不过要注意的是： 1.创建的新数组是空数组，没有值，如输出，则显示undefined。 2.虽然创建数组时，指定了长度，但实际上数组都是变长的， 也就是说即使指定了长度为8，仍然可以将元素存储在规定长度以外 数组长度: myarray.length; //获得数组myarray的长度 二维数组的定义有两种方式: 1. var myarr=new Array(); //先声明一维 for(var i=0;i&lt;2;i++) //一维长度为2 { myarr[i]=new Array(); //再声明二维 for(var j=0;j&lt;3;j++) //二维长度为3 { myarr[i][j]=i+j; //赋值，每个数组元素的值为i+j } } 2. var myarr = [[0 , 1 , 2 ],[1 , 2 , 3]] //myarr[2][3] 流程控制js中有if语句、if-else语句、if-else嵌套语句while语句、do-while语句（不用在最后加 ; ）for语句、switch语句、continue、break语句。 它们的功能语法与C语言的一致。 if-else嵌套:if(条件1) { 条件1成立时执行的代码} else if(条件2) { 条件2成立时执行的代码} ... else if(条件n) { 条件n成立时执行的代码} else { 条件1、2至n不成立时执行的代码} while循环语句：while(判断条件) { 循环语句 } switch语句:switch(表达式) { case值1: 执行代码块 1 break; case值2: 执行代码块 2 break; ... case值n: 执行代码块 n break; default: 与 case值1、...case值n 不同时执行的代码 } for循环语句：for(初始化变量;循环条件;循环迭代) { 循环语句 } do-while语句do { 循环语句 } while(判断条件) 事件响应在网页中，如使用事件，就在该元素中设置事件属性。eg: &lt; input .... 事件=&quot;函数名()&quot; /&gt; 鼠标单击事件(onclick)onclick是鼠标单击事件，当在网页上单击鼠标时，就会发生该事件。同时onclick事件调用的程序块就会被执行，通常与按钮一起使用。 鼠标经过事件（onmouseover）鼠标经过事件，当鼠标移到一个对象上时，该对象就触发onmouseover事件，并执行onmouseover事件调用的程序 鼠标移开事件（onmouseout）鼠标移开事件，当鼠标移开当前对象时，执行onmouseout调用的程序 光标聚焦事件（onfocus）当网页中的对象获得聚点时，执行onfocus调用的程序就会被执行 失焦事件（onblur）onblur事件与onfocus是相对事件，当光标离开当前获得聚焦对象的时候，触发onblur事件，同时执行被调用的程序。 内容选中事件（onselect）选中事件，当文本框或者文本域中的文字被选中时，触发onselect事件，同时调用的程序就会被执行。 文本框内容改变事件（onchange）通过改变文本框的内容来触发onchange事件，同时执行被调用的程序 加载事件（onload）事件会在页面加载完成后，立即发生，同时执行被调用的程序。注意：1. 加载页面时，触发onload事件，事件写在&lt; body &gt;标签内 卸载事件（onunload）当用户退出页面时（页面关闭、页面刷新等），触发onUnload事件，同时执行被调用的程序。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript入门]]></title>
    <url>%2Fsollylee.github.io%2F2018%2F02%2F01%2FJavaScript%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[JavaScript入门(基础学习总结) 基础语法基本规则一行的结束就被认定为语句的结束，通常在结尾加上一个分号”;”来表示语句的结束。 javascript作为一种脚本语言可以放在html页面中任何位置。但浏览器解释html时是按先后顺序的，所以前面的script就先被执行。比如进行页面显示初始化的js必须放在head里面,因为初始化都要求提前进行(如给页面body设置css等);而如果是通过事件调用执行的function那么对位置没什么要求的。 js文件引用&lt;script src=&quot;文件名&quot;&gt;&lt;/script&gt; js注释// 注释一行 /**/ 注释多行 定义变量var 变量名; 注意: 1. 变量名必须以下划线&apos;_&apos;、英文字母或美元符号&apos;$&apos;开始. 2. 变量名可以使用任意多个英文字母，数字，下划线，或者美元符号组成 3. 变量名不能使用JavaScript关键词和JavaScript保留字 可以给变量赋值数字，字母，字符串，true或false. 附： javascript保留字： abstract、enum、int、short、boolean、export、interface、 static、byte、extends、long、super、char、final、native、 synchronized、class、float、package、throws、const、goto、 private、tranisientdebugger、implements、protected、volatile、 double、import、public javascript关键字： break、else、new、var、case、finally、return、void、catch、 for、switch、while、default、if、throw、delete、in、 try、do、instanceof、typeof 定义函数function 函数名(形参) { 函数代码; return 返回值; } 形参和返回语句可有可无，返回值可以是数字，字母，字符串，ture/false返回值可以用变量取接。 调用函数： 函数名(参数); 条件语句if(条件) { 条件成立时执行的代码 } else { 条件不成立时执行的代码 } 输出内容(document.write())第一种:输出内容用””括起，直接输出””号内的内容。 &lt;script type=&quot;text/javascript&quot;&gt; document.write(&quot;I love JavaScript！&quot;); //内容用&quot;&quot;括起来，&quot;&quot;里的内容直接输出。 &lt;/script&gt; 第二种:通过变量，输出内容 &lt;script type=&quot;text/javascript&quot;&gt; var mystr=&quot;hello world!&quot;; document.write(mystr); //直接写变量名，输出变量存储的内容。 &lt;/script&gt; 第三种:输出多项内容，内容之间用+号连接。 &lt;script type=&quot;text/javascript&quot;&gt; var mystr=&quot;hello&quot;; document.write(mystr+&quot;I love JavaScript&quot;); //多项内容之间用+号连接 &lt;/script&gt; 第四种:输出HTML标签，并起作用，标签使用””括起来。 &lt;script type=&quot;text/javascript&quot;&gt; var mystr=&quot;hello&quot;; document.write(mystr+&quot;&lt;br&gt;&quot;);//输出hello后，输出一个换行符 document.write(&quot;JavaScript&quot;); &lt;/script&gt; 输出时，加上“white-space:pre”(空白会被浏览器保留)样式， 可以输出空格。 常用互动语法js-警告alert(字符串); alert 弹出消息对话框(包含一个确定按钮)。 js-确定(confirm消息对话框)confirm(str); str:在消息对话框中要显示的文本 返回值: 按下“确定”，返回true 按下“取消”，返回false 返回值用于判断语句。 js-提问(prompt)prompt(str1,str2); str1:要显示在消息对话框中的文本，不可修改 str2:文本框的内容，可以修改 返回值： 点击确定，文本框中的内容作为返回值 点击取消，返回null js-打开新窗口(window.open)window.open([URl],[窗口名称],[参数字符串]) URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。 窗口名称：可选参数，被打开窗口的名称。 注意： 1.该名称由字母、数字和下划线字符组成。 2.&quot;_top&quot;、&quot;_blank&quot;、&quot;_self&quot;具有特殊意义的名称。 _blank：在新窗口显示目标网页 _self：在当前窗口显示目标网页 _top：框架网页中在上部窗口中显示目标网页 3.相同 name 的窗口只能创建一个， 要想创建多个窗口则 name 不能相同。 4.name 不能包含有空格。 参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。 参数 值 说明 top Number 窗口顶部离屏幕顶部的像素数 left Number 窗口左侧离屏幕左侧的像素数 width Number 窗口的高度 height Number 窗口的宽度 menubar yes/no 窗口有没有菜单 toolbar yes/no 窗口有没有工具条 scrollbars yes/no 窗口有没有滚动条 status yes/no 窗口有没有状态栏 js-关闭窗口(window.close)window.close;//关闭本窗口 或 &lt;窗口对象&gt;.close();//关闭指定窗口 DOM文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有元素、属性和文本的树结构(节点树) 元素节点：&lt; html &gt; &lt; body &gt; &lt; p &gt; 等标签 文本节点：向用户展示的内容,如&lt; li &gt;间的文本 属性节点: 元素属性，如&lt; a &gt;标签的链接属性 herf=”” 获取iddocument.getElementById(&quot;id&quot;) 以变量接取，var i=document.getElementById(“id”); innerHTML属性innerHTML(区分大小写)属性用于获取或替换HTML元素的内容 object.innerHTML//object为获取的对象，下同 eg: &lt; p id=&quot;con&quot;&gt;xxxxxx&lt; /p &gt; var i=document.getElementById(&quot;con&quot;); i.innerHTML=&quot;hello world&quot; //修改p中的内容为&quot;hello world&quot; 改变HTML样式object.style.display=&quot;value&quot;; value: none 此元素不会被显示(隐藏) block 此元素将显示为块级元素(显示) 控制类名(className属性)object.className=classname; 作用： 1.获取元素的class属性 2.为网页内的某个元素指定一个css样式来改变外观 取消获取的样式1. object.removeAttribute(&quot;style&quot;); 2. object.style=null; 3.object.style=&quot;&quot;;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime使用技巧]]></title>
    <url>%2Fsollylee.github.io%2F2018%2F01%2F28%2Fsublime%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[前端工具sublime的使用技巧，从慕课中总结而来 一些插件及与其相关的快捷键的使用：安装Packet：菜单栏View-&gt;Show Console-&gt;粘贴text2或text3的Packet配置信息-&gt;重启软件-&gt;Ct+N（新建文档）-&gt;Ct+Sh+P-&gt;输入pci-&gt;查找要安装的插件 Emmet插件：安装好Emmet插件后： ！+Ct+E:迅速生成html的基础元素 Ct+P:查找时加 #元素名；找到后，若要在该行下新加一行，可按 Ct+Enter 上一行 Ct+Sh+Enter ul&gt;.item$*10 ,再按Ct+E， 则一次性生成10个&lt;li class=&quot;item(1/2/3/../10)&quot;&gt;&lt;/li&gt; 即 父元素&gt; .（表示有class标签或用 # 表示有id值） 类名（id名）$*（子元素出现次数），再Ct+E 在文本中写 h2{this is good} 再按Ct+E, 则生成 &lt;h2&gt;this is good&lt;/h2&gt; Ct+ 键盘上含 } 的键：文本缩进 Ct+Sh+V：粘贴时保持复制时的格式，如缩进等 insert callback插件Alt+C：删除多于的符号 advanNewCtrl+Shift+P打开命令模式，输入”pci”（Package Control:Install Package），在提示框输入”adva”，选”AdvancedNewFile”进行安装。 安装完成后使用&quot;Ctrl+Alt+N&quot; 选在屏幕下方出现的输入框中输入”test.html”，创建了一个html文件； 输入框中输入”public/css/test.css”，则在public目录下的css中创建了一个test.css文件； 输入框中输入”public/css/sass/test.sass”，则在public目录下的css中创建了一个sass文件夹并在其中创建了一个test.sass文件。 httpRequesterCtrl+Shift+P打开命令模式， 输入&quot;pci&quot;（Package Control:Install Package）， 在提示框输入&quot;http&quot;，选&quot;Http Requester&quot;进行安装。 安装完成后要使用注解的方式来标记函数需要测试的路由地址 在Sublime内部，做服务器响应的测试Get请求 /* GET users listing. */ // localhost:3000/users/ router.get(&apos;/&apos;, function(req, res) { res.send(&apos;respond with a resource&apos;); }); 注释需要测试的路由地址”// localhost:3000/users/“（localhost为路由地址，3000为端口号）选中”localhost:3000/users/“，使用快捷键”Alt+Ctrl+R”，出现新的页面显示服务器的响应，“200 OK”表示服务器响应正确。 get请求比较容易测试，可以在浏览器中输入地址；post请求比较难以测试以前测试post请求需要完成一个表单（用html语言写），然后模拟提交，这样不利于开发 不需要前端form表单的情况下来模拟form提交，先完成post请求在Sublime内部，做服务器响应的测试Post请求 /* POST localhost:3000/users/ Content-type: application/x-www-form-urlencoded POST_BODY: variable1=avalue&amp;variable2=1234&amp;variable3=anothervalue */ router.post(&apos;/&apos;, function(req, res) { res.send(req.body);}); （POST：访问地址是一个post请求， &quot;localhost:3000/users/&quot;是访问的地址， &quot;Content-type...anothervalue&quot;指定是以form表单形式提交） 选中&quot;/* */&quot;内的注释， 使用快捷键&quot;Alt+Ctrl+R&quot;，出现新的页面显示服务器的响应， &quot;200 OK&quot;表示服务器响应正确 netauke Snipsidebar enhancement右击对应文档，有直接浏览该页的选项 docblockr用于简化注释拼写 /** +Tab键 ：可有函数的注释格式 /** 或 /* + 回车键：其余注释符自动补充 输入/*按回车，补充行注释。 输入/**按回车，补充多行注释。 在写好的函数上方输入/**按tab键，自动补充函数说明格式。 Ctrl+/: 行注释; Ctrl+Shift+/: 块注释. sublimelinter-jshlint用于语法、风格的检验 安装jsnode插件 -&gt; 安装sublimelinter-jshlint插件 -&gt;运行cmd， 输入 npm install -g jshint -&gt;最后到sulimt软件里检验 补充9.html代码对齐插件html beautiful； 安装后快捷键ctr + alt + shift + f SideBarEnhancementsctrl+shift+p —&gt;Install Package —&gt;找到SideBarEnhancements安装SideBarEnhancements 配置预览快捷键 Preferences —&gt; Key Bindings - User 将以下代码复制到数组中。 // chrome { &quot;keys&quot;: [&quot;f2&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: { &quot;paths&quot;: [], &quot;application&quot;: &quot;C:/Program Files (x86)/Google/Chrome/Application/chrome.exe&quot;, &quot;extensions&quot;:&quot;.*&quot; } }, // firefox { &quot;keys&quot;: [&quot;f3&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: { &quot;paths&quot;: [], &quot;application&quot;: &quot;D:/Program Files (x86)/Mozilla Firefox/firefox.exe&quot;, &quot;extensions&quot;:&quot;.*&quot; } }, // ie { &quot;keys&quot;: [&quot;f4&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: { &quot;paths&quot;: [], &quot;application&quot;: &quot;C:/Program Files/Internet Explorer/iexplore.exe&quot;, &quot;extensions&quot;:&quot;.*&quot; } } 上面的代码中有两处需要注意的地方，一个是keys表示快捷键，即f2可以启动chrome进行预览。另一个是application，表示浏览器所在的安装路径，只有路径配置正确，才能够正常调用浏览器 nettus fetch插件ctrl+shift+p---&gt;输入nettus fetch回车 ---&gt;ctrl_shift+p---&gt;输入fetch manage来管理配置文件 使用fetch来下载jquery步骤： ctrl+alt+n 在某个目录下创建一个jQuery文件---&gt; 在该文件中输入ctrl+shift+p---&gt; 输入fetch file回车---&gt;jquery回车下载。 在fetch配置文件中来增加新的类库（如：underscore.js）：步骤如下： 在该文件中添加&quot;underscore&quot;: &quot;http://github.com /jashkenas/underscore/blob/master/underscore.min.js&quot; 和前一个参数以&quot;逗号&quot;来分隔。 ctrl+alt+n 在某个目录下创建一个underscore文件---&gt; 在该文件中输入ctrl+shift+p---&gt; 输入fetch file回车---&gt;jquery回车下载。 到github下载underscore.js文件github上的underscore文件地址： https://raw.githubusercontent.com/ jashkenas/underscore/master/underscore-min.js 快捷键的使用1、Ctrl+H：查找替换2、Ctrl+D：选择游标所在单词，连续Ctrl+D实现多行选择（选择与第一次选择相同的单词）3、Ctrl+K Ctrl+D：跳过当前选择，选择下一个4、Ctrl+shift+D：复制游标所在行5、Ctrl+F3：选择所以与游标所在单词相同的单词6、全选：先Ctrl+A全选然后Ctrl+shift+L产生游标7、按住shift，右键，拖动，产生多行游标8、Ctrl+P 的作用是：搜索项目中的文件 go to anything9、Ctrl+Shift+P 快捷键的作用是：打开命令模式10、Ctrl+Shift+K 的快捷键是：删除整行11、ctrl+shift+v 保持缩进粘贴12、Ctrl+] 增加缩进 [ 减小缩进。13、Alt+. 闭合标签14、Alt+&gt; 闭合标签15、Ctrl+? 注释一行]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fsollylee.github.io%2F2018%2F01%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
